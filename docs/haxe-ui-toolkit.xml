<haxe>
	<class path="ApplicationMain" params="" file="bin/windows/cpp/haxe/ApplicationMain.hx">
		<barA static="1"><c path="flash.display.Sprite"/></barA>
		<barB static="1"><c path="flash.display.Sprite"/></barB>
		<container static="1"><c path="flash.display.Sprite"/></container>
		<forceHeight static="1"><x path="Int"/></forceHeight>
		<forceWidth static="1"><x path="Int"/></forceWidth>
		<main public="1" set="method" line="31" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<applyScale public="1" set="method" line="178" static="1"><f a="?_">
	<unknown/>
	<x path="Void"/>
</f></applyScale>
		<getAsset public="1" set="method" line="225" static="1"><f a="inName">
	<c path="String"/>
	<d/>
</f></getAsset>
	</class>
	<class path="haxe.ui.toolkit.Main" params="" file="src/haxe/ui/toolkit/Main.hx"><main public="1" set="method" line="8" static="1"><f a=""><x path="Void"/></f></main></class>
	<class path="DocumentClass" params="" file="bin/windows/cpp/haxe/ApplicationMain.hx" module="ApplicationMain">
		<extends path="haxe.ui.toolkit.Main"/>
		<meta><m n=":build"><e>'???'</e></m></meta>
	</class>
	<class path="Array" params="T" file="C:\Tools\Haxe\haxe/std/Array.hx" extern="1">
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.
		
		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.
		
		The order of elements is preserved.
		
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.
		
		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However, 
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.
		
		This operation modifies `this` Array in place.
		
		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.
		
		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.
		
		This operation modifies `this` Array in place.
		
		The offset is calculated like so:
			
		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this` 
		  Array, i.e. `this.length + pos`. If this yields a negative value, the 
		  offset is 0.
		- Otherwise, the offset is `pos`.
		
		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.
		
		This operation modifies `this` Array in place.
		
		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.
		
		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.
		
		This operation modifies `this` Array in place.
		
		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].
		
		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.
		
		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.
		
		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.
		
		This operation modifies `this` Array in place.
		
		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.
		
		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.
		
		This operation does not modify `this` Array.
		
		The elements are not copied and retain their identity.
		
		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.
		
		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.
		
		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.
		
		This operation modifies `this` Array in place.
		
		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.
		
		If `this` is the empty Array `[]`, `null` is returned and the length 
		remains 0.</haxe_doc>
		</shift>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.
		
		This operation modifies `this` Array in place.
		
		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the offset
		it was added at.
		
		This operation modifies `this` Array in place.
		
		`this.length` increases by 1.</haxe_doc>
		</push>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.
		
		This operation modifies `this` Array in place.
		
		If `this` has at least one element, `this.length` will decrease by 1.
		
		If `this` is the empty Array `[]`, null is returned and the length 
		remains 0.</haxe_doc>
		</pop>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.
		
		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`
		
		If `this` is the empty Array `[]`, the result is the empty String `""`. 
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.
		
		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.
		
		This operation does not modify `this` Array.
		
		If `a` is the empty Array `[]`, a copy of `this` Array is returned.
		
		The length of the returned Array is equal to the sum of `this.length` 
		and `a.length`.
		
		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a `List` which
	is less memory and CPU consuming, unless you really need indexed access.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="C:\Tools\Haxe\haxe/std/Class.hx">
		<this><d/></this>
		<haxe_doc>An abstract type that represents a Class.
	
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/Date.hx">
		<now public="1" set="method" line="50" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="54" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<getDay public="1" set="method" line="46">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<getDate public="1" set="method" line="44">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getMonth public="1" set="method" line="42">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getFullYear public="1" set="method" line="40">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getSeconds public="1" set="method" line="38">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getMinutes public="1" set="method" line="36">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getHours public="1" set="method" line="34">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getTime public="1" set="method" line="30">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<mSeconds><x path="Float"/></mSeconds>
		<new public="1" set="method" line="26">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.
		
		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.
		
		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by
	
	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.
	
	There is some extra functions available in the `DateTools` class.
	
	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="DateTools" params="" file="C:\Tools\Haxe\haxe/std/DateTools.hx">
		<__format_get set="method" line="36" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="89" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="114" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.</haxe_doc>
		</format>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.
	
	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="cpp.Lib" params="" file="C:\Tools\Haxe\haxe/std/cpp/Lib.hx">
		<load public="1" set="method" line="29" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Load and return a Cpp primitive from a DLL library.</haxe_doc>
		</load>
		<loadLazy public="1" set="method" line="48" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Tries to load, and always returns a valid function, but the function may throw
		if called.</haxe_doc>
		</loadLazy>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="EReg" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/EReg.hx">
		<regexp_new_options line="174" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<d/>
</f></regexp_new_options>
		<regexp_match line="175" static="1"><f a=":::">
	<d/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></regexp_match>
		<regexp_matched_pos line="177" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<a>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
	</a>
</f></regexp_matched_pos>
		<map public="1" set="method" line="149">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>For each occurence of the pattern in the string `s`, the function `f` is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the `g` flag might cause some incorrect behavior on some platforms.</haxe_doc>
		</map>
		<matchSub public="1" set="method" line="65">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.
		
		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.matchSub(s.substr(pos,len))` can be used instead.
		
		This method modifies the internal state.
		
		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<matchedPos public="1" set="method" line="61">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.
		
		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.
		
		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<global><x path="Bool"/></global>
		<last><c path="String"/></last>
		<r><d/></r>
		<new public="1" set="method" line="28">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.
		
		This is equivalent to the shorthand syntax `~/r/opt`
		
		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.
	
	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.
	
	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier
	
	EReg instances maintain an internal state, which is affected by several of
	its methods.
	
	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="C:\Tools\Haxe\haxe/std/Enum.hx">
		<this><d/></this>
		<haxe_doc>An abstract type that represents an Enum type.
	
	The corresponding enum instance type is `EnumValue`.
	
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\Tools\Haxe\haxe/std/EnumValue.hx">
		<this><d/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="C:\Tools\Haxe\haxe/std/IntIterator.hx">
		<max><x path="Int"/></max>
		<min><x path="Int"/></min>
		<new public="1" set="method" line="44">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).
		
		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.
	
	It is usually not used explicitly, but through it's special syntax:
	`min...max`
		
	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Lambda" params="" file="C:\Tools\Haxe\haxe/std/Lambda.hx">
		<indexOf public="1" params="T" set="method" line="217" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.
		
		This function uses operator `==` to check for equality.
		
		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.
	
	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.
	
	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="List" params="T" file="C:\Tools\Haxe\haxe/std/List.hx">
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.
		
		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.
		
		Otherwise, false is returned.</haxe_doc>
		</remove>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<first public="1" set="method" line="81">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.
		
		This function does not modify `this` List.</haxe_doc>
		</first>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.
		
		`this.length` increases by 1.</haxe_doc>
		</push>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.
		
		`this.length` increases by 1.</haxe_doc>
		</add>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<q><c path="Array"><d/></c></q>
		<h><c path="Array"><d/></c></h>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="Map" params="K:V" file="C:\Tools\Haxe\haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.
		
	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.
	
	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.
	
	Maps can also be created with `key1 => value1, key2 => value2` syntax.
	
	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"/></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="C:\Tools\Haxe\haxe/std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IMap" params="K:V" file="C:\Tools\Haxe\haxe/std/Map.hx" module="Map" interface="1"><meta><m n=":keep"/></meta></class>
	<typedef path="_Map.Hashable" params="" file="C:\Tools\Haxe\haxe/std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="C:\Tools\Haxe\haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.
		
		For example, this is the result of -1.0 / 0.0.
		
		Operations with NEGATIVE_INFINITY as an operand may result in
		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...
		
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.
		
		For example, this is the result of 1.0 / 0.0.
		
		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...
	
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.
		
		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).
		
		All further operations with NaN as an operand will result in NaN.
		
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.
		
		In order to test if a value is NaN, you should use Math.isNaN() function.
		
		(Php) In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, see:
			https://bugs.php.net/bug.php?id=42143</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.
		
		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.
		
		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is
		POSITIVE_INFINITY.
		
		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.
		
		If `a` or `b` are NaN, the result is NaN.
		
		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		
		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.
		
		If `a` or `b` are NaN, the result is NaN.
		
		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of `v`.
		
		The unit of `v` is radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of `v`.
		
		The unit of `v` is radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.
		
		exp(1.0) is approximately 2.718281828459.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If `v` is NEGATIVE_INFINITY, the result is 0.0.
		
		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If `v` is 0.0, the result is NEGATIVE_INFINITY.
		
		This is the inverse operation of exp, i.e. log(exp(v)) == v always
		holds.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest Int value.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.
		
		TODO: need spec</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest Int value that is not greater than `v`.
		
		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.		
		
		TODO: need spec</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest Int value that is not less than `v`.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.
		
		TODO: need spec</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.
		
		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result is
		false.
		
		Otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.
		
		If `f` is NaN, the result is true.
		
		Otherwise the result is false. In particular, both POSITIVE_INFINITY and
		NEGATIVE_INFINITY are not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta><m n=":include"><e>"hxMath"</e></m></meta>
	</class>
	<class path="Reflect" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.
		
		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.
		
		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.
		
		If `o` is not an object or has no field named `field`, the result is
		null.
		
		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.
		
		If `field` is null, the result is unspecified.
		
		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<callMethod public="1" set="method" line="46" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="53" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.
		
		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.
		
		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="60" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.
		
		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compareMethods public="1" set="method" line="68" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.
		
		If `f1` or `f2` are not functions, the result is unspecified.
		
		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="76" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.
		
		The result is true if `v` is one of the following:
			
		- class instance
		- structure
		- Class<T>
		- Enum<T>
			
		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="87" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.
		
		This method is only guaranteed to work on anonymous structures.
		
		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<makeVarArgs public="1" set="method" line="104" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/Std.hx">
		<is public="1" set="method" line="23" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="31" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="35" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="39" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="43" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="47" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\Tools\Haxe\haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\Tools\Haxe\haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.
	
	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\Tools\Haxe\haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.
	
	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="C:\Tools\Haxe\haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="C:\Tools\Haxe\haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.
	
	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\Tools\Haxe\haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.
	
	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\Tools\Haxe\haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.
		
		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.
		
		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Tools\Haxe\haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Tools\Haxe\haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="C:\Tools\Haxe\haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.
		
		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.
		
		If `startIndex` or `endIndex` are negative, 0 is used instead.
		
		If `startIndex` exceeds `endIndex`, they are swapped.
		
		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.
		
		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.
		
		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.
		
		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.
		
		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.
		
		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.
		
		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.
		
		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.
		
		If `delimiter` is null, the result is unspecified.
		
		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.
		
		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.
		
		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.
		
		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.
		
		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.
		
		If `index` is negative or exceeds `this.length`, null is returned.
		
		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.
		
		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.
		
		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.
		
		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.
	
	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.
	
	Strings can be constructed using the string literal syntax "string value".
	
	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/StringBuf.hx">
		<add public="1" set="method" line="39">
			<f a="x">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.
		
		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).
		
		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<b><c path="Array"><c path="String"/></c></b>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.
		
		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.
	
	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.
	
	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="C:\Tools\Haxe\haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="37" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="62" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="98" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:
			
		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;
		
		If `quotes` is true, the following characters are also replaced:
		
		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<startsWith public="1" set="method" line="128" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<isSpace public="1" set="method" line="166" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String "", or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="180" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="205" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="227" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="249" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="292" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="314" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its length equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Sys" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/Sys.hx">
		<print public="1" set="method" line="24" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" line="28" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output, followed by a newline</haxe_doc>
		</println>
		<setCwd public="1" set="method" line="76" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the current working directory.</haxe_doc>
		</setCwd>
		<executablePath public="1" set="method" line="119" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<set_cwd line="139" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></set_cwd>
		<sys_exe_path line="145" static="1"><f a=""><c path="String"/></f></sys_exe_path>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in [sys] sub packages for more system APIs.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Type" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="35" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.
		
		If `o` is null or of a different type, null is returned.
		
		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getClassName public="1" set="method" line="56" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.
		
		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `c` has no package, the class name is returned.
		
		If `c` is null, the result is unspecified.
		
		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<resolveClass public="1" set="method" line="66" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.
		
		If `name` is the path of an existing class, that class is returned.
		
		Otherwise null is returned.
		
		If `name` is null or the path to a different type, the result is
		unspecified.
		
		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="73" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.
		
		If `name` is the path of an existing enum, that enum is returned.
		
		Otherwise null is returned.
		
		If `name` is null the result is unspecified.
		
		If `name` is the path to a different type, null is returned.
		
		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="80" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.
		
		This function guarantees that the class constructor is called.
		
		Default values of constructors arguments are not guaranteed to be
		taken into account.
		
		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.
		
		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEnum public="1" params="T" set="method" line="90" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="94" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getClassFields public="1" set="method" line="104" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.
		
		This does not include static fields of parent classes.
		
		The order of the fields in the returned Array is unspecified.
		
		If `c` is null, the result is unspecified.
		
		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="108" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<enumEq public="1" params="T" set="method" line="128" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.
		
		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.
	
	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="XmlType" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/Xml.hx" module="Xml"><meta><m n=":flatEnum"/></meta></enum>
	<class path="Xml" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Document>
		<_parse line="44" static="1"><f a=":">
	<c path="String"/>
	<a>
		<xml><f a="name:att">
	<c path="String"/>
	<d><c path="String"/></d>
	<x path="Void"/>
</f></xml>
		<pcdata><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></pcdata>
		<done><f a=""><x path="Void"/></f></done>
		<doctype><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></doctype>
		<cur><c path="Xml"/></cur>
		<comment><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></comment>
		<cdata><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></cdata>
	</a>
	<unknown/>
</f></_parse>
		<parse public="1" set="method" line="46" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parse a String into an Xml object.</haxe_doc>
		</parse>
		<toStringRec set="method" line="354"><f a="s">
	<c path="StringBuf"/>
	<x path="Void"/>
</f></toStringRec>
		<toString public="1" set="method" line="348">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<addChild public="1" set="method" line="322">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.</haxe_doc>
		</addChild>
		<firstElement public="1" set="method" line="311">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<firstChild public="1" set="method" line="305">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<elements public="1" set="method" line="238">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<attributes public="1" set="method" line="225">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an [Iterator] on all the attribute names.</haxe_doc>
		</attributes>
		<get public="1" set="method" line="197">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<get_nodeValue set="method" line="180"><f a=""><c path="String"/></f></get_nodeValue>
		<get_nodeName set="method" line="168"><f a=""><c path="String"/></f></get_nodeName>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<_parent><c path="Xml"/></_parent>
		<_children><c path="Array"><c path="Xml"/></c></_children>
		<_attributes><d><c path="String"/></d></_attributes>
		<_nodeValue><c path="String"/></_nodeValue>
		<_nodeName><c path="String"/></_nodeName>
		<new set="method" line="41"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="cpp.FastIterator" params="T" file="C:\Tools\Haxe\haxe/std/cpp/FastIterator.hx" extern="1">
		<next public="1" set="method"><f a=""><c path="cpp.FastIterator.T"/></f></next>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
	</class>
	<class path="cpp.rtti.FieldNumericIntegerLookup" params="" file="C:\Tools\Haxe\haxe/std/cpp/rtti/FieldNumericIntegerLookup.hx" interface="1">
		<haxe_doc>If you implement this interface, then the backend will generate code that
	allows fast numeric access to fields by integer id.  This should speed up the CFFI.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="cpp.zip.Compress" params="" file="C:\Tools\Haxe\haxe/std/cpp/zip/Compress.hx">
		<run public="1" set="method" line="44" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_deflate_init line="55" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></_deflate_init>
		<_deflate_bound line="56" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></_deflate_bound>
		<_deflate_buffer line="57" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></_deflate_buffer>
		<_deflate_end line="58" static="1"><f a="">
	<d/>
	<unknown/>
</f></_deflate_end>
		<_set_flush_mode line="59" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></_set_flush_mode>
		<close public="1" set="method" line="40"><f a=""><x path="Void"/></f></close>
		<setFlushMode public="1" set="method" line="36"><f a="f">
	<e path="cpp.zip.Flush"/>
	<x path="Void"/>
</f></setFlushMode>
		<execute public="1" set="method" line="32"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<s><d/></s>
		<new public="1" set="method" line="28"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="cpp.zip.Flush" params="" file="C:\Tools\Haxe\haxe/std/cpp/zip/Flush.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="cpp.zip.Uncompress" params="" file="C:\Tools\Haxe\haxe/std/cpp/zip/Uncompress.hx">
		<run public="1" set="method" line="43" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_inflate_init line="61" static="1"><f a="">
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></_inflate_init>
		<_inflate_buffer line="62" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></_inflate_buffer>
		<_inflate_end line="63" static="1"><f a="">
	<d/>
	<unknown/>
</f></_inflate_end>
		<_set_flush_mode line="64" static="1"><f a=":">
	<d/>
	<unknown/>
	<unknown/>
</f></_set_flush_mode>
		<close public="1" set="method" line="39"><f a=""><x path="Void"/></f></close>
		<setFlushMode public="1" set="method" line="35"><f a="f">
	<e path="cpp.zip.Flush"/>
	<x path="Void"/>
</f></setFlushMode>
		<this_run public="1" set="method" line="31"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></this_run>
		<s><d/></s>
		<new public="1" set="method" line="27"><f a="windowBits">
	<t path="Null"><x path="Int"/></t>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.io.Process" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/sys/io/Process.hx">
		<_run line="123" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<unknown/>
</f></_run>
		<_close line="126" static="1"><f a="">
	<d/>
	<unknown/>
</f></_close>
		<close public="1" set="method" line="115"><f a=""><x path="Void"/></f></close>
		<stdin public="1" set="null"><c path="haxe.io.Output"/></stdin>
		<stderr public="1" set="null"><c path="haxe.io.Input"/></stderr>
		<stdout public="1" set="null"><c path="haxe.io.Input"/></stdout>
		<p><d/></p>
		<new public="1" set="method" line="100"><f a="cmd:args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.io.Output" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/Output.hx">
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.io._Process.Stdin" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Output"/>
		<buf><c path="haxe.io.Bytes"/></buf>
		<p><d/></p>
		<new public="1" set="method" line="29"><f a="p">
	<unknown/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="250" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="275" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="324" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<toString public="1" set="method" line="211"><f a=""><c path="String"/></f></toString>
		<readString public="1" set="method" line="163"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<sub public="1" set="method" line="99"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<blit public="1" set="method" line="68"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<b><t path="haxe.io.BytesData"/></b>
		<length public="1" set="null"><x path="Int"/></length>
		<new set="method" line="29"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Input" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/Input.hx">
		<readString public="1" set="method" line="318"><f a="len">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<readLine public="1" set="method" line="127"><f a=""><c path="String"/></f></readLine>
		<readFullBytes public="1" set="method" line="99"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFullBytes>
		<close public="1" set="method" line="67"><f a=""><x path="Void"/></f></close>
		<readBytes public="1" set="method" line="46"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<readByte public="1" set="method" line="37"><f a=""><x path="Int"/></f></readByte>
		<haxe_doc>An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.io._Process.Stdout" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Input"/>
		<_stdout_read line="87" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stdout_read>
		<_stderr_read line="88" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stderr_read>
		<readBytes public="1" set="method" line="76" override="1"><f a="str:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<readByte public="1" set="method" line="70" override="1"><f a=""><x path="Int"/></f></readByte>
		<buf><c path="haxe.io.Bytes"/></buf>
		<out><x path="Bool"/></out>
		<p><d/></p>
		<new public="1" set="method" line="64"><f a="p:out">
	<unknown/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash.Lib" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/Lib.hx">
		<FULLSCREEN public="1" line="17" static="1"><x path="Int"/></FULLSCREEN>
		<BORDERLESS public="1" line="18" static="1"><x path="Int"/></BORDERLESS>
		<RESIZABLE public="1" line="19" static="1"><x path="Int"/></RESIZABLE>
		<HARDWARE public="1" line="20" static="1"><x path="Int"/></HARDWARE>
		<VSYNC public="1" line="21" static="1"><x path="Int"/></VSYNC>
		<HW_AA public="1" line="22" static="1"><x path="Int"/></HW_AA>
		<HW_AA_HIRES public="1" line="23" static="1"><x path="Int"/></HW_AA_HIRES>
		<ALLOW_SHADERS public="1" line="24" static="1"><x path="Int"/></ALLOW_SHADERS>
		<REQUIRE_SHADERS public="1" line="25" static="1"><x path="Int"/></REQUIRE_SHADERS>
		<DEPTH_BUFFER public="1" line="26" static="1"><x path="Int"/></DEPTH_BUFFER>
		<STENCIL_BUFFER public="1" line="27" static="1"><x path="Int"/></STENCIL_BUFFER>
		<company public="1" set="null" static="1"><c path="String"/></company>
		<current public="1" get="accessor" set="null" static="1"><c path="flash.display.MovieClip"/></current>
		<file public="1" set="null" static="1"><c path="String"/></file>
		<initHeight public="1" set="null" static="1"><x path="Int"/></initHeight>
		<initWidth public="1" set="null" static="1"><x path="Int"/></initWidth>
		<packageName public="1" set="null" static="1"><c path="String"/></packageName>
		<silentRecreate public="1" line="35" static="1"><x path="Bool"/></silentRecreate>
		<stage public="1" get="accessor" set="null" static="1"><c path="flash.display.Stage"/></stage>
		<version public="1" set="null" static="1"><c path="String"/></version>
		<__current line="39" static="1">
			<c path="flash.display.MovieClip"/>
			<meta><m n=":noCompletion"/></meta>
		</__current>
		<__isInit line="40" static="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__isInit>
		<__mainFrame line="41" static="1">
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__mainFrame>
		<__moduleNames line="42" static="1">
			<x path="Map">
				<c path="String"/>
				<c path="String"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</__moduleNames>
		<__stage line="43" static="1">
			<c path="flash.display.Stage"/>
			<meta><m n=":noCompletion"/></meta>
		</__stage>
		<as public="1" params="T" get="inline" set="null" line="46" static="1"><f a="v:c">
	<d/>
	<x path="Class"><c path="as.T"/></x>
	<t path="Null"><c path="as.T"/></t>
</f></as>
		<attach public="1" set="method" line="53" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.display.MovieClip"/>
</f></attach>
		<close public="1" set="method" line="60" static="1"><f a=""><x path="Void"/></f></close>
		<create public="1" set="method" line="68" static="1"><f a="onLoaded:width:height:?frameRate:?color:?flags:?title:?icon:?stageClass">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
	<x path="Class"><c path="flash.display.Stage"/></x>
	<x path="Void"/>
</f></create>
		<createManagedStage public="1" set="method" line="114" static="1"><f a="width:height:?flags">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="openfl.display.ManagedStage"/>
</f></createManagedStage>
		<findHaxeLib set="method" line="127" static="1"><f a="library">
	<c path="String"/>
	<c path="String"/>
</f></findHaxeLib>
		<load public="1" set="method" line="168" static="1"><f a="library:method:?args">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></load>
		<loaderTrace set="method" line="243" static="1"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></loaderTrace>
		<sysName set="method" line="261" static="1"><f a=""><c path="String"/></f></sysName>
		<tryLoad set="method" line="273" static="1"><f a="name:library:func:args">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></tryLoad>
		<exit public="1" set="method" line="326" static="1"><f a=""><x path="Void"/></f></exit>
		<forceClose public="1" set="method" line="347" static="1"><f a=""><x path="Void"/></f></forceClose>
		<getTimer public="1" set="method" line="355" static="1"><f a=""><x path="Int"/></f></getTimer>
		<getURL public="1" set="method" line="362" static="1"><f a="url:?target">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<x path="Void"/>
</f></getURL>
		<pause public="1" set="method" line="369" static="1"><f a=""><x path="Void"/></f></pause>
		<postUICallback public="1" set="method" line="376" static="1"><f a="inCallback">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></postUICallback>
		<resume public="1" set="method" line="387" static="1"><f a=""><x path="Void"/></f></resume>
		<setIcon public="1" set="method" line="394" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></setIcon>
		<setPackage public="1" set="method" line="402" static="1"><f a="company:file:packageName:version">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setPackage>
		<__setCurrentStage public="1" set="method" line="414" static="1">
			<f a="stage">
				<c path="flash.display.Stage"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__setCurrentStage>
		<trace public="1" set="method" line="421" static="1"><f a="arg">
	<d/>
	<x path="Void"/>
</f></trace>
		<get_current set="method" line="435" static="1"><f a=""><c path="flash.display.MovieClip"/></f></get_current>
		<get_stage set="method" line="454" static="1"><f a=""><c path="flash.display.Stage"/></f></get_stage>
		<nme_set_package line="477" static="1"><f a=":::">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></nme_set_package>
		<nme_get_frame_stage line="478" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_get_frame_stage>
		<nme_get_url line="479" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></nme_get_url>
		<nme_pause_animation line="480" static="1"><f a=""><unknown/></f></nme_pause_animation>
		<nme_resume_animation line="481" static="1"><f a=""><unknown/></f></nme_resume_animation>
	</class>
	<class path="flash.Memory" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/Memory.hx">
		<gcRef static="1"><c path="flash.utils.ByteArray"/></gcRef>
		<len static="1"><x path="Int"/></len>
		<select public="1" set="method" line="20" static="1"><f a="bytes">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></select>
		<getByte public="1" set="method" line="136" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Int"/>
</f></getByte>
		<getDouble public="1" set="method" line="144" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble>
		<getFloat public="1" set="method" line="152" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<getI32 public="1" set="method" line="160" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Int"/>
</f></getI32>
		<getUI16 public="1" set="method" line="168" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Int"/>
</f></getUI16>
		<setByte public="1" set="method" line="176" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setByte>
		<setDouble public="1" set="method" line="184" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setDouble>
		<setFloat public="1" set="method" line="192" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFloat>
		<setI16 public="1" set="method" line="200" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setI16>
		<setI32 public="1" set="method" line="208" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setI32>
	</class>
	<abstract path="flash.Vector" params="T" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/Vector.hx">
		<from><icast field="fromArray"><c path="Array"><c path="fromArray.U"/></c></icast></from>
		<this><c path="Array"><c path="flash.Vector.T"/></c></this>
		<to><icast field="toArray"><c path="Array"><c path="toArray.T"/></c></icast></to>
		<meta><m n=":arrayAccess"/></meta>
		<impl><class path="flash._Vector.Vector_Impl_" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/Vector.hx" private="1" module="flash.Vector">
	<length public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<fixed public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
	</fixed>
	<_new public="1" set="method" line="11" static="1">
		<f a="?length:?fixed">
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="flash.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<concat public="1" set="method" line="18" static="1">
		<f a="this:?a">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<c path="Array"><c path="flash.Vector.T"/></c>
			<x path="flash.Vector"><c path="flash.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</concat>
	<copy public="1" set="method" line="25" static="1">
		<f a="this">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<x path="flash.Vector"><c path="flash.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</copy>
	<iterator public="1" params="T" set="method" line="32" static="1">
		<f a="this">
			<c path="Array"><c path="iterator.T"/></c>
			<t path="Iterator"><c path="iterator.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
	<join public="1" set="method" line="39" static="1">
		<f a="this:sep">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</join>
	<pop public="1" set="method" line="46" static="1">
		<f a="this">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<t path="Null"><c path="flash.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</pop>
	<push public="1" set="method" line="53" static="1">
		<f a="this:x">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<c path="flash.Vector.T"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</push>
	<reverse public="1" set="method" line="60" static="1">
		<f a="this">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<shift public="1" set="method" line="67" static="1">
		<f a="this">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<t path="Null"><c path="flash.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</shift>
	<unshift public="1" set="method" line="74" static="1">
		<f a="this:x">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<c path="flash.Vector.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</unshift>
	<slice public="1" set="method" line="81" static="1">
		<f a="this:?pos:?end">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="flash.Vector"><c path="flash.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</slice>
	<sort public="1" set="method" line="88" static="1">
		<f a="this:f">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<f a=":">
				<c path="flash.Vector.T"/>
				<c path="flash.Vector.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sort>
	<splice public="1" set="method" line="95" static="1">
		<f a="this:pos:len">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="flash.Vector"><c path="flash.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</splice>
	<toString public="1" set="method" line="102" static="1">
		<f a="this">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<indexOf public="1" set="method" line="109" static="1">
		<f a="this:x:?from">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<c path="flash.Vector.T"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</indexOf>
	<lastIndexOf public="1" set="method" line="126" static="1">
		<f a="this:x:?from">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<c path="flash.Vector.T"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</lastIndexOf>
	<ofArray public="1" params="T" get="inline" set="null" line="142" static="1"><f a="a">
	<c path="Array"><d/></c>
	<x path="flash.Vector"><c path="ofArray.T"/></x>
</f></ofArray>
	<convert public="1" params="T:U" get="inline" set="null" line="149" static="1"><f a="v">
	<c path="Array"><c path="convert.T"/></c>
	<x path="flash.Vector"><c path="convert.U"/></x>
</f></convert>
	<fromArray public="1" params="T:U" get="inline" set="null" line="156" static="1">
		<f a="a">
			<c path="Array"><c path="fromArray.U"/></c>
			<x path="flash.Vector"><c path="fromArray.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<toArray public="1" params="T" get="inline" set="null" line="163" static="1">
		<f a="this">
			<c path="Array"><c path="toArray.T"/></c>
			<c path="Array"><c path="toArray.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<get_length set="method" line="177" static="1">
		<f a="this">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<set_length set="method" line="184" static="1">
		<f a="this:value">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_length>
	<get_fixed set="method" line="191" static="1">
		<f a="this">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_fixed>
	<set_fixed set="method" line="198" static="1">
		<f a="this:value">
			<c path="Array"><c path="flash.Vector.T"/></c>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_fixed>
</class></impl>
	</abstract>
	<class path="flash._Vector.Vector_Impl_" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/Vector.hx" private="1" module="flash.Vector">
		<length public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<fixed public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
		</fixed>
		<_new public="1" set="method" line="11" static="1">
			<f a="?length:?fixed">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="flash.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<concat public="1" set="method" line="18" static="1">
			<f a="this:?a">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<c path="Array"><c path="flash.Vector.T"/></c>
				<x path="flash.Vector"><c path="flash.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</concat>
		<copy public="1" set="method" line="25" static="1">
			<f a="this">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<x path="flash.Vector"><c path="flash.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</copy>
		<iterator public="1" params="T" set="method" line="32" static="1">
			<f a="this">
				<c path="Array"><c path="iterator.T"/></c>
				<t path="Iterator"><c path="iterator.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
		<join public="1" set="method" line="39" static="1">
			<f a="this:sep">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</join>
		<pop public="1" set="method" line="46" static="1">
			<f a="this">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<t path="Null"><c path="flash.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</pop>
		<push public="1" set="method" line="53" static="1">
			<f a="this:x">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<c path="flash.Vector.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</push>
		<reverse public="1" set="method" line="60" static="1">
			<f a="this">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<shift public="1" set="method" line="67" static="1">
			<f a="this">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<t path="Null"><c path="flash.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</shift>
		<unshift public="1" set="method" line="74" static="1">
			<f a="this:x">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<c path="flash.Vector.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</unshift>
		<slice public="1" set="method" line="81" static="1">
			<f a="this:?pos:?end">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="flash.Vector"><c path="flash.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</slice>
		<sort public="1" set="method" line="88" static="1">
			<f a="this:f">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<f a=":">
					<c path="flash.Vector.T"/>
					<c path="flash.Vector.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sort>
		<splice public="1" set="method" line="95" static="1">
			<f a="this:pos:len">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="flash.Vector"><c path="flash.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</splice>
		<toString public="1" set="method" line="102" static="1">
			<f a="this">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<indexOf public="1" set="method" line="109" static="1">
			<f a="this:x:?from">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<c path="flash.Vector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</indexOf>
		<lastIndexOf public="1" set="method" line="126" static="1">
			<f a="this:x:?from">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<c path="flash.Vector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</lastIndexOf>
		<ofArray public="1" params="T" get="inline" set="null" line="142" static="1"><f a="a">
	<c path="Array"><d/></c>
	<x path="flash.Vector"><c path="ofArray.T"/></x>
</f></ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="149" static="1"><f a="v">
	<c path="Array"><c path="convert.T"/></c>
	<x path="flash.Vector"><c path="convert.U"/></x>
</f></convert>
		<fromArray public="1" params="T:U" get="inline" set="null" line="156" static="1">
			<f a="a">
				<c path="Array"><c path="fromArray.U"/></c>
				<x path="flash.Vector"><c path="fromArray.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<toArray public="1" params="T" get="inline" set="null" line="163" static="1">
			<f a="this">
				<c path="Array"><c path="toArray.T"/></c>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<get_length set="method" line="177" static="1">
			<f a="this">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<set_length set="method" line="184" static="1">
			<f a="this:value">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_length>
		<get_fixed set="method" line="191" static="1">
			<f a="this">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_fixed>
		<set_fixed set="method" line="198" static="1">
			<f a="this:value">
				<c path="Array"><c path="flash.Vector.T"/></c>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_fixed>
	</class>
	<class path="flash.events.IEventDispatcher" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/IEventDispatcher.hx" interface="1">
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<t path="flash.events.Function"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="flash.events.Function"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/EventDispatcher.hx">
		<implements path="flash.events.IEventDispatcher"/>
		<__sortEvents get="inline" set="null" line="203" static="1">
			<f a="a:b">
				<c path="openfl.utils.WeakRef"><c path="flash.events.Listener"/></c>
				<c path="openfl.utils.WeakRef"><c path="flash.events.Listener"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__sortEvents>
		<__dispatchIOErrorEvent public="1" set="method" line="196">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__dispatchIOErrorEvent>
		<__dispatchCompleteEvent public="1" set="method" line="189">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__dispatchCompleteEvent>
		<willTrigger public="1" set="method" line="176"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<toString public="1" set="method" line="169"><f a=""><c path="String"/></f></toString>
		<removeEventListener public="1" set="method" line="139"><f a="type:listener:?capture">
	<c path="String"/>
	<t path="flash.events.Function"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method" line="114"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method" line="47"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method" line="24"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="flash.events.Function"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<__target>
			<c path="flash.events.IEventDispatcher"/>
			<meta><m n=":noCompletion"/></meta>
		</__target>
		<__eventMap>
			<t path="flash.events.EventMap"/>
			<meta><m n=":noCompletion"/></meta>
		</__eventMap>
		<new public="1" set="method" line="16"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/IBitmapDrawable.hx" interface="1"><__drawToSurface public="1" set="method">
	<f a="surface:matrix:colorTransform:blendMode:clipRect:smoothing">
		<d/>
		<c path="flash.geom.Matrix"/>
		<c path="flash.geom.ColorTransform"/>
		<c path="String"/>
		<c path="flash.geom.Rectangle"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</__drawToSurface></class>
	<class path="flash.display.DisplayObject" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/DisplayObject.hx">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<nme_create_display_object line="754" static="1"><f a=""><unknown/></f></nme_create_display_object>
		<nme_display_object_get_graphics line="755" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_display_object_get_graphics>
		<nme_display_object_draw_to_surface line="756" static="1"><f a=":::::">
	<d/>
	<d/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<c path="String"/>
	<c path="flash.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_draw_to_surface>
		<nme_display_object_get_id line="757" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_display_object_get_id>
		<nme_display_object_get_x line="758" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_x>
		<nme_display_object_set_x line="759" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<unknown/>
</f></nme_display_object_set_x>
		<nme_display_object_get_y line="760" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_y>
		<nme_display_object_set_y line="761" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<unknown/>
</f></nme_display_object_set_y>
		<nme_display_object_get_scale_x line="762" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_scale_x>
		<nme_display_object_set_scale_x line="763" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<unknown/>
</f></nme_display_object_set_scale_x>
		<nme_display_object_get_scale_y line="764" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_scale_y>
		<nme_display_object_set_scale_y line="765" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<unknown/>
</f></nme_display_object_set_scale_y>
		<nme_display_object_get_mouse_x line="766" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_mouse_x>
		<nme_display_object_get_mouse_y line="767" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_mouse_y>
		<nme_display_object_get_rotation line="768" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_rotation>
		<nme_display_object_set_rotation line="769" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<unknown/>
</f></nme_display_object_set_rotation>
		<nme_display_object_get_bg line="770" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_display_object_get_bg>
		<nme_display_object_set_bg line="771" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_display_object_set_bg>
		<nme_display_object_get_name line="772" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_display_object_get_name>
		<nme_display_object_set_name line="773" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></nme_display_object_set_name>
		<nme_display_object_get_width line="774" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_width>
		<nme_display_object_set_width line="775" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<unknown/>
</f></nme_display_object_set_width>
		<nme_display_object_get_height line="776" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_height>
		<nme_display_object_set_height line="777" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<unknown/>
</f></nme_display_object_set_height>
		<nme_display_object_get_alpha line="778" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_display_object_get_alpha>
		<nme_display_object_set_alpha line="779" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<unknown/>
</f></nme_display_object_set_alpha>
		<nme_display_object_get_blend_mode line="780" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_display_object_get_blend_mode>
		<nme_display_object_set_blend_mode line="781" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_display_object_set_blend_mode>
		<nme_display_object_get_cache_as_bitmap line="782" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_display_object_get_cache_as_bitmap>
		<nme_display_object_set_cache_as_bitmap line="783" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_display_object_set_cache_as_bitmap>
		<nme_display_object_get_pedantic_bitmap_caching line="784" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_display_object_get_pedantic_bitmap_caching>
		<nme_display_object_set_pedantic_bitmap_caching line="785" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_display_object_set_pedantic_bitmap_caching>
		<nme_display_object_get_pixel_snapping line="786" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_display_object_get_pixel_snapping>
		<nme_display_object_set_pixel_snapping line="787" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_display_object_set_pixel_snapping>
		<nme_display_object_get_visible line="788" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_display_object_get_visible>
		<nme_display_object_set_visible line="789" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_display_object_set_visible>
		<nme_display_object_set_filters line="790" static="1"><f a=":">
	<d/>
	<c path="Array"><d/></c>
	<unknown/>
</f></nme_display_object_set_filters>
		<nme_display_object_global_to_local line="791" static="1"><f a=":">
	<d/>
	<c path="flash.geom.Point"/>
	<unknown/>
</f></nme_display_object_global_to_local>
		<nme_display_object_local_to_global line="792" static="1"><f a=":">
	<d/>
	<c path="flash.geom.Point"/>
	<unknown/>
</f></nme_display_object_local_to_global>
		<nme_display_object_set_scale9_grid line="793" static="1"><f a=":">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_set_scale9_grid>
		<nme_display_object_set_scroll_rect line="794" static="1"><f a=":">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_set_scroll_rect>
		<nme_display_object_set_mask line="795" static="1"><f a=":">
	<d/>
	<t path="Null"><unknown/></t>
	<unknown/>
</f></nme_display_object_set_mask>
		<nme_display_object_set_matrix line="796" static="1"><f a=":">
	<d/>
	<c path="flash.geom.Matrix"/>
	<unknown/>
</f></nme_display_object_set_matrix>
		<nme_display_object_get_matrix line="797" static="1"><f a="::">
	<d/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_display_object_get_matrix>
		<nme_display_object_get_color_transform line="798" static="1"><f a="::">
	<d/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_display_object_get_color_transform>
		<nme_display_object_set_color_transform line="799" static="1"><f a=":">
	<d/>
	<c path="flash.geom.ColorTransform"/>
	<unknown/>
</f></nme_display_object_set_color_transform>
		<nme_display_object_get_pixel_bounds line="800" static="1"><f a=":">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_get_pixel_bounds>
		<nme_display_object_get_bounds line="801" static="1"><f a=":::">
	<d/>
	<d/>
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_display_object_get_bounds>
		<nme_display_object_hit_test_point line="802" static="1"><f a="::::">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></nme_display_object_hit_test_point>
		<set_y set="method" line="739"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<get_y set="method" line="738"><f a=""><x path="Float"/></f></get_y>
		<set_x set="method" line="730"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<get_x set="method" line="729"><f a=""><x path="Float"/></f></get_x>
		<set_width set="method" line="721"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<get_width set="method" line="720"><f a=""><x path="Float"/></f></get_width>
		<set_visible set="method" line="712"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<get_visible set="method" line="711"><f a=""><x path="Bool"/></f></get_visible>
		<set_transform set="method" line="702"><f a="value">
	<c path="flash.geom.Transform"/>
	<c path="flash.geom.Transform"/>
</f></set_transform>
		<get_transform set="method" line="701"><f a=""><c path="flash.geom.Transform"/></f></get_transform>
		<get_stage set="method" line="688"><f a=""><c path="flash.display.Stage"/></f></get_stage>
		<set_scrollRect set="method" line="679"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_scrollRect>
		<get_scrollRect set="method" line="678"><f a=""><c path="flash.geom.Rectangle"/></f></get_scrollRect>
		<set_scaleY set="method" line="670"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<get_scaleY set="method" line="669"><f a=""><x path="Float"/></f></get_scaleY>
		<set_scaleX set="method" line="661"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<get_scaleX set="method" line="660"><f a=""><x path="Float"/></f></get_scaleX>
		<set_scale9Grid set="method" line="651"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_scale9Grid>
		<get_scale9Grid set="method" line="650"><f a=""><c path="flash.geom.Rectangle"/></f></get_scale9Grid>
		<set_rotation set="method" line="642"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<get_rotation set="method" line="641"><f a=""><x path="Float"/></f></get_rotation>
		<get_parent set="method" line="638"><f a=""><c path="flash.display.DisplayObjectContainer"/></f></get_parent>
		<set_name set="method" line="630"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_name>
		<get_name set="method" line="629"><f a=""><c path="String"/></f></get_name>
		<get_mouseY set="method" line="626"><f a=""><x path="Float"/></f></get_mouseY>
		<get_mouseX set="method" line="625"><f a=""><x path="Float"/></f></get_mouseX>
		<set_mask set="method" line="616"><f a="value">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></set_mask>
		<set_height set="method" line="608"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<get_height set="method" line="607"><f a=""><x path="Float"/></f></get_height>
		<get_graphics set="method" line="594"><f a=""><c path="flash.display.Graphics"/></f></get_graphics>
		<set_filters set="method" line="570"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_filters>
		<get_filters set="method" line="554"><f a=""><c path="Array"><d/></c></f></get_filters>
		<set_pixelSnapping set="method" line="537"><f a="value">
	<e path="flash.display.PixelSnapping"/>
	<e path="flash.display.PixelSnapping"/>
</f></set_pixelSnapping>
		<get_pixelSnapping set="method" line="529"><f a=""><e path="flash.display.PixelSnapping"/></f></get_pixelSnapping>
		<set_pedanticBitmapCaching set="method" line="521"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_pedanticBitmapCaching>
		<get_pedanticBitmapCaching set="method" line="520"><f a=""><x path="Bool"/></f></get_pedanticBitmapCaching>
		<set_cacheAsBitmap set="method" line="512"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_cacheAsBitmap>
		<get_cacheAsBitmap set="method" line="511"><f a=""><x path="Bool"/></f></get_cacheAsBitmap>
		<set_blendMode set="method" line="503"><f a="value">
	<e path="flash.display.BlendMode"/>
	<e path="flash.display.BlendMode"/>
</f></set_blendMode>
		<get_blendMode set="method" line="495"><f a=""><e path="flash.display.BlendMode"/></f></get_blendMode>
		<set_opaqueBackground set="method" line="478"><f a="value">
	<t path="Null"><x path="Int"/></t>
	<t path="Null"><x path="Int"/></t>
</f></set_opaqueBackground>
		<get_opaqueBackground set="method" line="463"><f a=""><t path="Null"><x path="Int"/></t></f></get_opaqueBackground>
		<set_alpha set="method" line="455"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<get_alpha set="method" line="454"><f a=""><x path="Float"/></f></get_alpha>
		<__setParent public="1" set="method" line="411">
			<f a="parent">
				<c path="flash.display.DisplayObjectContainer"/>
				<c path="flash.display.DisplayObjectContainer"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__setParent>
		<__setMatrix public="1" set="method" line="404">
			<f a="matrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__setMatrix>
		<__setColorTransform public="1" set="method" line="397">
			<f a="colorTransform">
				<c path="flash.geom.ColorTransform"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__setColorTransform>
		<__onRemoved set="method" line="376">
			<f a="object:wasOnStage">
				<c path="flash.display.DisplayObject"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onRemoved>
		<__onAdded set="method" line="355">
			<f a="object:isOnStage">
				<c path="flash.display.DisplayObject"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onAdded>
		<__getPixelBounds public="1" set="method" line="346">
			<f a=""><c path="flash.geom.Rectangle"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__getPixelBounds>
		<__getObjectsUnderPoint public="1" set="method" line="335">
			<f a="point:result">
				<c path="flash.geom.Point"/>
				<c path="Array"><c path="flash.display.DisplayObject"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__getObjectsUnderPoint>
		<__getMatrix public="1" set="method" line="326">
			<f a=""><c path="flash.geom.Matrix"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__getMatrix>
		<__getInteractiveObjectStack public="1" set="method" line="307">
			<f a="stack">
				<c path="Array"><c path="flash.display.InteractiveObject"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__getInteractiveObjectStack>
		<__getConcatenatedMatrix public="1" set="method" line="298">
			<f a=""><c path="flash.geom.Matrix"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__getConcatenatedMatrix>
		<__getConcatenatedColorTransform public="1" set="method" line="289">
			<f a=""><c path="flash.geom.ColorTransform"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__getConcatenatedColorTransform>
		<__getColorTransform public="1" set="method" line="280">
			<f a=""><c path="flash.geom.ColorTransform"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__getColorTransform>
		<__fireEvent set="method" line="217">
			<f a="event">
				<c path="flash.events.Event"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__fireEvent>
		<__findByID set="method" line="204">
			<f a="id">
				<x path="Int"/>
				<c path="flash.display.DisplayObject"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__findByID>
		<__drawToSurface public="1" set="method" line="197">
			<f a="surface:matrix:colorTransform:blendMode:clipRect:smoothing">
				<d/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<c path="String"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__drawToSurface>
		<__dispatchEvent public="1" set="method" line="183">
			<f a="event">
				<c path="flash.events.Event"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__dispatchEvent>
		<__contains public="1" set="method" line="176">
			<f a="child">
				<c path="flash.display.DisplayObject"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__contains>
		<__broadcast public="1" set="method" line="169">
			<f a="event">
				<c path="flash.events.Event"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__broadcast>
		<__asInteractiveObject set="method" line="162">
			<f a=""><c path="flash.display.InteractiveObject"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__asInteractiveObject>
		<toString public="1" set="method" line="155" override="1"><f a=""><c path="String"/></f></toString>
		<localToGlobal public="1" set="method" line="146"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
		<hitTestPoint public="1" set="method" line="139"><f a="x:y:?shapeFlag">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></hitTestPoint>
		<hitTestObject public="1" set="method" line="112"><f a="object">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<globalToLocal public="1" set="method" line="103"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<getRect public="1" set="method" line="94"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<getBounds public="1" set="method" line="85"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<dispatchEvent public="1" set="method" line="67" override="1"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<__scrollRect>
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":noCompletion"/></meta>
		</__scrollRect>
		<__scale9Grid>
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":noCompletion"/></meta>
		</__scale9Grid>
		<__parent>
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":noCompletion"/></meta>
		</__parent>
		<__id>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__id>
		<__graphicsCache>
			<c path="flash.display.Graphics"/>
			<meta><m n=":noCompletion"/></meta>
		</__graphicsCache>
		<__filters>
			<c path="Array"><d/></c>
			<meta><m n=":noCompletion"/></meta>
		</__filters>
		<__handle public="1">
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__handle>
		<y public="1" get="accessor" set="accessor"><x path="Float"/></y>
		<x public="1" get="accessor" set="accessor"><x path="Float"/></x>
		<width public="1" get="accessor" set="accessor"><x path="Float"/></width>
		<visible public="1" get="accessor" set="accessor"><x path="Bool"/></visible>
		<transform public="1" get="accessor" set="accessor"><c path="flash.geom.Transform"/></transform>
		<stage public="1" get="accessor" set="null"><c path="flash.display.Stage"/></stage>
		<scrollRect public="1" get="accessor" set="accessor"><c path="flash.geom.Rectangle"/></scrollRect>
		<scaleY public="1" get="accessor" set="accessor"><x path="Float"/></scaleY>
		<scaleX public="1" get="accessor" set="accessor"><x path="Float"/></scaleX>
		<scale9Grid public="1" get="accessor" set="accessor"><c path="flash.geom.Rectangle"/></scale9Grid>
		<rotation public="1" get="accessor" set="accessor"><x path="Float"/></rotation>
		<pixelSnapping public="1" get="accessor" set="accessor"><e path="flash.display.PixelSnapping"/></pixelSnapping>
		<pedanticBitmapCaching public="1" get="accessor" set="accessor"><x path="Bool"/></pedanticBitmapCaching>
		<parent public="1" get="accessor" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<opaqueBackground public="1" get="accessor" set="accessor"><t path="Null"><x path="Int"/></t></opaqueBackground>
		<name public="1" get="accessor" set="accessor"><c path="String"/></name>
		<mouseY public="1" get="accessor" set="null"><x path="Float"/></mouseY>
		<mouseX public="1" get="accessor" set="null"><x path="Float"/></mouseX>
		<mask public="1" set="accessor"><c path="flash.display.DisplayObject"/></mask>
		<loaderInfo public="1"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<height public="1" get="accessor" set="accessor"><x path="Float"/></height>
		<graphics public="1" get="accessor" set="null"><c path="flash.display.Graphics"/></graphics>
		<filters public="1" get="accessor" set="accessor"><c path="Array"><d/></c></filters>
		<cacheAsBitmap public="1" get="accessor" set="accessor"><x path="Bool"/></cacheAsBitmap>
		<blendMode public="1" get="accessor" set="accessor"><e path="flash.display.BlendMode"/></blendMode>
		<alpha public="1" get="accessor" set="accessor"><x path="Float"/></alpha>
		<new public="1" set="method" line="55"><f a="handle:type">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.Bitmap" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/Bitmap.hx">
		<extends path="flash.display.DisplayObject"/>
		<set_smoothing set="method" line="72"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_smoothing>
		<set_bitmapData set="method" line="62"><f a="value">
	<c path="flash.display.BitmapData"/>
	<c path="flash.display.BitmapData"/>
</f></set_bitmapData>
		<__rebuild set="method" line="35">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__rebuild>
		<smoothing public="1" set="accessor"><x path="Bool"/></smoothing>
		<bitmapData public="1" set="accessor"><c path="flash.display.BitmapData"/></bitmapData>
		<new public="1" set="method" line="15"><f a="?bitmapData:?pixelSnapping:?smoothing">
	<c path="flash.display.BitmapData"/>
	<e path="flash.display.PixelSnapping"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.BitmapData" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/BitmapData.hx">
		<implements path="flash.display.IBitmapDrawable"/>
		<CLEAR public="1" get="inline" set="null" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":deprecated"/></meta>
		</CLEAR>
		<BLACK public="1" get="inline" set="null" line="19" static="1">
			<x path="Int"/>
			<meta><m n=":deprecated"/></meta>
		</BLACK>
		<WHITE public="1" get="inline" set="null" line="20" static="1">
			<x path="Int"/>
			<meta><m n=":deprecated"/></meta>
		</WHITE>
		<RED public="1" get="inline" set="null" line="21" static="1">
			<x path="Int"/>
			<meta><m n=":deprecated"/></meta>
		</RED>
		<GREEN public="1" get="inline" set="null" line="22" static="1">
			<x path="Int"/>
			<meta><m n=":deprecated"/></meta>
		</GREEN>
		<BLUE public="1" get="inline" set="null" line="23" static="1">
			<x path="Int"/>
			<meta><m n=":deprecated"/></meta>
		</BLUE>
		<PNG public="1" get="inline" set="null" line="24" static="1">
			<c path="String"/>
			<meta><m n=":deprecated"/></meta>
		</PNG>
		<JPG public="1" get="inline" set="null" line="25" static="1">
			<c path="String"/>
			<meta><m n=":deprecated"/></meta>
		</JPG>
		<TRANSPARENT public="1" get="inline" set="null" line="26" static="1"><x path="Int"/></TRANSPARENT>
		<HARDWARE public="1" get="inline" set="null" line="27" static="1"><x path="Int"/></HARDWARE>
		<FORMAT_8888 public="1" get="inline" set="null" line="28" static="1"><x path="Int"/></FORMAT_8888>
		<FORMAT_4444 public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></FORMAT_4444>
		<FORMAT_565 public="1" get="inline" set="null" line="30" static="1"><x path="Int"/></FORMAT_565>
		<createColor public="1" get="inline" set="null" line="112" static="1">
			<f a="rgb:?alpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</createColor>
		<extractAlpha public="1" get="inline" set="null" line="169" static="1">
			<f a="argb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</extractAlpha>
		<extractColor public="1" get="inline" set="null" line="176" static="1">
			<f a="argb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</extractColor>
		<getRGBAPixels public="1" get="inline" set="null" line="245" static="1"><f a="bitmapData">
	<c path="flash.display.BitmapData"/>
	<c path="flash.utils.ByteArray"/>
</f></getRGBAPixels>
		<load public="1" set="method" line="292" static="1"><f a="filename:?format">
	<c path="String"/>
	<x path="Int"/>
	<c path="flash.display.BitmapData"/>
</f></load>
		<loadFromBytes public="1" set="method" line="301" static="1"><f a="bytes:?rawAlpha">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<c path="flash.display.BitmapData"/>
</f></loadFromBytes>
		<loadFromHaxeBytes public="1" set="method" line="310" static="1"><f a="bytes:?rawAlpha">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="flash.display.BitmapData"/>
</f></loadFromHaxeBytes>
		<sameValue get="inline" set="null" line="339" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</sameValue>
		<__flipPixel get="inline" set="null" line="586" static="1">
			<f a="pixel">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__flipPixel>
		<__ucompare public="1" set="method" line="600" static="1">
			<f a="n1:n2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__ucompare>
		<nme_bitmap_data_create line="674" static="1"><f a=":::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Bool"/></t>
	<unknown/>
</f></nme_bitmap_data_create>
		<nme_bitmap_data_load line="675" static="1"><f a=":">
	<c path="String"/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_load>
		<nme_bitmap_data_from_bytes line="676" static="1"><f a=":">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<unknown/>
</f></nme_bitmap_data_from_bytes>
		<nme_bitmap_data_clear line="677" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_clear>
		<nme_bitmap_data_clone line="678" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_clone>
		<nme_bitmap_data_apply_filter line="679" static="1"><f a="::::">
	<d/>
	<d/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<unknown/>
</f></nme_bitmap_data_apply_filter>
		<nme_bitmap_data_color_transform line="680" static="1"><f a="::">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<unknown/>
</f></nme_bitmap_data_color_transform>
		<nme_bitmap_data_copy line="681" static="1"><f a="::::">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<d/>
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_bitmap_data_copy>
		<nme_bitmap_data_copy_channel line="682" static="1"><f a=":::::">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<d/>
	<c path="flash.geom.Point"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_copy_channel>
		<nme_bitmap_data_fill line="683" static="1"><f a=":::">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_fill>
		<nme_bitmap_data_get_pixels line="684" static="1"><f a=":">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></nme_bitmap_data_get_pixels>
		<nme_bitmap_data_get_pixel line="685" static="1"><f a="::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></nme_bitmap_data_get_pixel>
		<nme_bitmap_data_get_pixel32 line="686" static="1"><f a="::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></nme_bitmap_data_get_pixel32>
		<nme_bitmap_data_get_pixel_rgba line="687" static="1"><unknown/></nme_bitmap_data_get_pixel_rgba>
		<nme_bitmap_data_get_array line="689" static="1"><f a="::">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></nme_bitmap_data_get_array>
		<nme_bitmap_data_get_color_bounds_rect line="691" static="1"><f a="::::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<unknown/>
</f></nme_bitmap_data_get_color_bounds_rect>
		<nme_bitmap_data_scroll line="692" static="1"><f a="::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_scroll>
		<nme_bitmap_data_set_pixel line="693" static="1"><f a=":::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_pixel>
		<nme_bitmap_data_set_pixel32 line="694" static="1"><f a=":::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_pixel32>
		<nme_bitmap_data_set_pixel_rgba line="695" static="1"><unknown/></nme_bitmap_data_set_pixel_rgba>
		<nme_bitmap_data_set_bytes line="696" static="1"><f a=":::">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_bytes>
		<nme_bitmap_data_set_format line="697" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_format>
		<nme_bitmap_data_set_array line="699" static="1"><f a="::">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></nme_bitmap_data_set_array>
		<nme_bitmap_data_create_hardware_surface line="700" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_create_hardware_surface>
		<nme_bitmap_data_destroy_hardware_surface line="701" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_destroy_hardware_surface>
		<nme_bitmap_data_dispose line="703" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_dispose>
		<nme_bitmap_data_generate_filter_rect line="704" static="1"><f a="::">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
	<unknown/>
</f></nme_bitmap_data_generate_filter_rect>
		<nme_render_surface_to_surface line="705" static="1"><f a="::::::">
	<d/>
	<d/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<c path="String"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_render_surface_to_surface>
		<nme_bitmap_data_height line="706" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_bitmap_data_height>
		<nme_bitmap_data_width line="707" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_bitmap_data_width>
		<nme_bitmap_data_get_transparent line="708" static="1"><unknown/></nme_bitmap_data_get_transparent>
		<nme_bitmap_data_set_flags line="709" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_flags>
		<nme_bitmap_data_encode line="710" static="1"><f a="::">
	<d/>
	<c path="String"/>
	<x path="Float"/>
	<c path="flash.utils.ByteArray"/>
</f></nme_bitmap_data_encode>
		<nme_bitmap_data_dump_bits line="711" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_dump_bits>
		<nme_bitmap_data_flood_fill line="712" static="1"><f a=":::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_bitmap_data_flood_fill>
		<nme_bitmap_data_noise line="713" static="1"><f a=":::::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_bitmap_data_noise>
		<nme_bitmap_data_unmultiply_alpha line="714" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_unmultiply_alpha>
		<get_transparent set="method" line="664"><f a=""><x path="Bool"/></f></get_transparent>
		<get_height set="method" line="663"><f a=""><x path="Int"/></f></get_height>
		<get_width set="method" line="662"><f a=""><x path="Int"/></f></get_width>
		<get_rect set="method" line="661"><f a=""><c path="flash.geom.Rectangle"/></f></get_rect>
		<__loadFromBytes get="inline" set="null" line="593">
			<f a="bytes:?rawAlpha">
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__loadFromBytes>
		<__drawToSurface public="1" set="method" line="579">
			<f a="surface:matrix:colorTransform:blendMode:clipRect:smoothing">
				<d/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<c path="String"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__drawToSurface>
		<unmultiplyAlpha public="1" set="method" line="572"><f a=""><x path="Void"/></f></unmultiplyAlpha>
		<unlock public="1" set="method" line="565"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<threshold public="1" set="method" line="414"><f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></threshold>
		<setVector public="1" set="method" line="392"><f a="rect:pixels">
	<c path="flash.geom.Rectangle"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></setVector>
		<setPixels public="1" set="method" line="382"><f a="rect:pixels">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setPixel32 public="1" set="method" line="375"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixel public="1" set="method" line="368"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPixel>
		<setFormat public="1" set="method" line="361"><f a="format">
	<x path="Int"/>
	<x path="Void"/>
</f></setFormat>
		<setFlags public="1" set="method" line="353"><f a="flags">
	<x path="Int"/>
	<x path="Void"/>
</f></setFlags>
		<scroll public="1" set="method" line="346"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<perlinNoise public="1" set="method" line="331"><f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"/></c>
	<x path="Void"/>
</f></perlinNoise>
		<noise public="1" set="method" line="324"><f a="randomSeed:?low:?high:?channelOptions:?grayScale">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></noise>
		<lock public="1" set="method" line="317"><f a=""><x path="Void"/></f></lock>
		<getVector public="1" set="method" line="271"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="Array"><x path="Int"/></c>
</f></getVector>
		<getPixels public="1" set="method" line="236"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getPixel32 public="1" set="method" line="229"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel32>
		<getPixel public="1" set="method" line="222"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel>
		<getColorBoundsRect public="1" set="method" line="213"><f a="mask:color:?findColor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
</f></getColorBoundsRect>
		<generateFilterRect public="1" set="method" line="204"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<floodFill public="1" set="method" line="197"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></floodFill>
		<fillRectEx public="1" set="method" line="190"><f a="rect:color:?alpha">
	<c path="flash.geom.Rectangle"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fillRectEx>
		<fillRect public="1" set="method" line="183"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fillRect>
		<encode public="1" set="method" line="162"><f a="format:?quality">
	<c path="String"/>
	<x path="Float"/>
	<c path="flash.utils.ByteArray"/>
</f></encode>
		<dumpBits public="1" set="method" line="155"><f a=""><x path="Void"/></f></dumpBits>
		<draw public="1" set="method" line="148"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="flash.display.IBitmapDrawable"/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="flash.display.BlendMode"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></draw>
		<dispose public="1" set="method" line="135"><f a=""><x path="Void"/></f></dispose>
		<destroyHardwareSurface public="1" set="method" line="127"><f a=""><x path="Void"/></f></destroyHardwareSurface>
		<createHardwareSurface public="1" set="method" line="120"><f a=""><x path="Void"/></f></createHardwareSurface>
		<copyPixels public="1" set="method" line="105"><f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></copyPixels>
		<copyChannel public="1" set="method" line="98"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyChannel>
		<colorTransform public="1" set="method" line="91"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<clone public="1" set="method" line="82"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<clear public="1" set="method" line="75"><f a="color">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<applyFilter public="1" set="method" line="68"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<__transparent>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__transparent>
		<__handle public="1">
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__handle>
		<width public="1" get="accessor" set="null"><x path="Int"/></width>
		<transparent public="1" get="accessor" set="null"><x path="Bool"/></transparent>
		<rect public="1" get="accessor" set="null"><c path="flash.geom.Rectangle"/></rect>
		<height public="1" get="accessor" set="null"><x path="Int"/></height>
		<new public="1" set="method" line="41"><f a="width:height:?transparent:?fillColor:?gpuMode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":autoBuild"><e>'???'</e></m></meta>
	</class>
	<class path="flash.display.OptimizedPerlin" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/BitmapData.hx" module="flash.display.BitmapData">
		<P line="723" static="1"><c path="Array"><x path="Int"/></c></P>
		<seedOffset set="method" line="938"><f a="iSeed">
	<x path="Int"/>
	<x path="Void"/>
</f></seedOffset>
		<octFreqPers set="method" line="915"><f a="fPersistence">
	<x path="Float"/>
	<x path="Void"/>
</f></octFreqPers>
		<fill public="1" set="method" line="801"><f a="bitmap:_x:_y:_z:?_">
	<c path="flash.display.BitmapData"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
	<x path="Void"/>
</f></fill>
		<baseFactor><x path="Float"/></baseFactor>
		<iZoffset><x path="Float"/></iZoffset>
		<iYoffset><x path="Float"/></iYoffset>
		<iXoffset><x path="Float"/></iXoffset>
		<fPersMax><x path="Float"/></fPersMax>
		<aOctPers><c path="Array"><x path="Float"/></c></aOctPers>
		<aOctFreq><c path="Array"><x path="Float"/></c></aOctFreq>
		<octaves><x path="Int"/></octaves>
		<new public="1" set="method" line="792"><f a="?seed:?octaves:?falloff">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.BlendMode" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/BlendMode.hx">
		<NORMAL/>
		<LAYER/>
		<MULTIPLY/>
		<SCREEN/>
		<LIGHTEN/>
		<DARKEN/>
		<DIFFERENCE/>
		<ADD/>
		<SUBTRACT/>
		<INVERT/>
		<ALPHA/>
		<ERASE/>
		<OVERLAY/>
		<HARDLIGHT/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/CapsStyle.hx">
		<ROUND/>
		<NONE/>
		<SQUARE/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.display.InteractiveObject" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/InteractiveObject.hx">
		<extends path="flash.display.DisplayObject"/>
		<nme_display_object_set_mouse_enabled line="96" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_display_object_set_mouse_enabled>
		<nme_display_object_set_needs_soft_keyboard line="97" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_display_object_set_needs_soft_keyboard>
		<nme_display_object_get_needs_soft_keyboard line="98" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_display_object_get_needs_soft_keyboard>
		<nme_display_object_set_moves_for_soft_keyboard line="99" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_display_object_set_moves_for_soft_keyboard>
		<nme_display_object_get_moves_for_soft_keyboard line="100" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_display_object_get_moves_for_soft_keyboard>
		<nme_display_object_request_soft_keyboard line="101" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_display_object_request_soft_keyboard>
		<get_needsSoftKeyboard set="method" line="82"><f a=""><x path="Bool"/></f></get_needsSoftKeyboard>
		<set_needsSoftKeyboard set="method" line="74"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_needsSoftKeyboard>
		<get_moveForSoftKeyboard set="method" line="67"><f a=""><x path="Bool"/></f></get_moveForSoftKeyboard>
		<set_moveForSoftKeyboard set="method" line="59"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_moveForSoftKeyboard>
		<set_mouseEnabled set="method" line="50"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseEnabled>
		<get_mouseEnabled set="method" line="49"><f a=""><x path="Bool"/></f></get_mouseEnabled>
		<__asInteractiveObject set="method" line="35" override="1">
			<f a=""><c path="flash.display.InteractiveObject"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__asInteractiveObject>
		<requestSoftKeyboard public="1" set="method" line="28"><f a=""><x path="Bool"/></f></requestSoftKeyboard>
		<__mouseEnabled>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__mouseEnabled>
		<needsSoftKeyboard public="1" get="accessor" set="accessor"><x path="Bool"/></needsSoftKeyboard>
		<moveForSoftKeyboard public="1" get="accessor" set="accessor"><x path="Bool"/></moveForSoftKeyboard>
		<mouseEnabled public="1" get="accessor" set="accessor"><x path="Bool"/></mouseEnabled>
		<doubleClickEnabled public="1"><x path="Bool"/></doubleClickEnabled>
		<new public="1" set="method" line="18"><f a="handle:type">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/DisplayObjectContainer.hx">
		<extends path="flash.display.InteractiveObject"/>
		<nme_create_display_object_container line="502" static="1"><f a=""><unknown/></f></nme_create_display_object_container>
		<nme_doc_add_child line="503" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_doc_add_child>
		<nme_doc_remove_child line="504" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_doc_remove_child>
		<nme_doc_set_child_index line="505" static="1"><f a="::">
	<d/>
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_doc_set_child_index>
		<nme_doc_get_mouse_children line="506" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_doc_get_mouse_children>
		<nme_doc_set_mouse_children line="507" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_doc_set_mouse_children>
		<nme_doc_swap_children line="508" static="1"><f a="::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_doc_swap_children>
		<set_tabChildren set="method" line="492"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_tabChildren>
		<get_tabChildren set="method" line="491"><f a=""><x path="Bool"/></f></get_tabChildren>
		<get_numChildren set="method" line="490"><f a=""><x path="Int"/></f></get_numChildren>
		<set_mouseChildren set="method" line="482"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseChildren>
		<get_mouseChildren set="method" line="481"><f a=""><x path="Bool"/></f></get_mouseChildren>
		<__swapChildrenAt get="inline" set="null" line="454">
			<f a="index1:index2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__swapChildrenAt>
		<__setChildIndex get="inline" set="null" line="376">
			<f a="child:index">
				<c path="flash.display.DisplayObject"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__setChildIndex>
		<__removeChildFromArray public="1" set="method" line="362">
			<f a="child">
				<c path="flash.display.DisplayObject"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__removeChildFromArray>
		<__onRemoved set="method" line="349" override="1">
			<f a="object:wasOnStage">
				<c path="flash.display.DisplayObject"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onRemoved>
		<__onAdded set="method" line="336" override="1">
			<f a="object:isOnStage">
				<c path="flash.display.DisplayObject"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onAdded>
		<__getObjectsUnderPoint public="1" set="method" line="323" override="1">
			<f a="point:result">
				<c path="flash.geom.Point"/>
				<c path="Array"><c path="flash.display.DisplayObject"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__getObjectsUnderPoint>
		<__getChildIndex set="method" line="306">
			<f a="child">
				<c path="flash.display.DisplayObject"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__getChildIndex>
		<__findByID set="method" line="279" override="1">
			<f a="id">
				<x path="Int"/>
				<c path="flash.display.DisplayObject"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__findByID>
		<__contains public="1" set="method" line="250" override="1">
			<f a="child">
				<c path="flash.display.DisplayObject"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__contains>
		<__broadcast public="1" set="method" line="210" override="1">
			<f a="event">
				<c path="flash.events.Event"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__broadcast>
		<__addChild get="inline" set="null" line="187">
			<f a="child">
				<c path="flash.display.DisplayObject"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__addChild>
		<swapChildrenAt public="1" set="method" line="180"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<swapChildren public="1" set="method" line="164"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<setChildIndex public="1" set="method" line="157"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<removeChildAt public="1" set="method" line="142"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChild public="1" set="method" line="126"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<getObjectsUnderPoint public="1" set="method" line="98"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<getChildIndex public="1" set="method" line="91"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getChildByName public="1" set="method" line="74"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildAt public="1" set="method" line="60"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<contains public="1" set="method" line="53"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<areInaccessibleObjectsUnderPoint public="1" set="method" line="46"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<addChildAt public="1" set="method" line="37"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<addChild public="1" set="method" line="29"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<__children>
			<c path="Array"><c path="flash.display.DisplayObject"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__children>
		<tabChildren public="1" get="accessor" set="accessor"><x path="Bool"/></tabChildren>
		<numChildren public="1" get="accessor" set="null"><x path="Int"/></numChildren>
		<mouseChildren public="1" get="accessor" set="accessor"><x path="Bool"/></mouseChildren>
		<new set="method" line="21"><f a="handle:type">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.GradientType" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/GradientType.hx">
		<RADIAL/>
		<LINEAR/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/Graphics.hx">
		<TILE_SCALE public="1" get="inline" set="null" line="12" static="1"><x path="Int"/></TILE_SCALE>
		<TILE_ROTATION public="1" get="inline" set="null" line="13" static="1"><x path="Int"/></TILE_ROTATION>
		<TILE_RGB public="1" get="inline" set="null" line="14" static="1"><x path="Int"/></TILE_RGB>
		<TILE_ALPHA public="1" get="inline" set="null" line="15" static="1"><x path="Int"/></TILE_ALPHA>
		<TILE_TRANS_2x2 public="1" get="inline" set="null" line="16" static="1"><x path="Int"/></TILE_TRANS_2x2>
		<TILE_SMOOTH get="inline" set="null" line="17" static="1"><x path="Int"/></TILE_SMOOTH>
		<TILE_BLEND_NORMAL public="1" get="inline" set="null" line="18" static="1"><x path="Int"/></TILE_BLEND_NORMAL>
		<TILE_BLEND_ADD public="1" get="inline" set="null" line="19" static="1"><x path="Int"/></TILE_BLEND_ADD>
		<RGBA public="1" get="inline" set="null" line="216" static="1">
			<f a="rgb:?alpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"/>
			</meta>
		</RGBA>
		<nme_gfx_clear line="230" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_gfx_clear>
		<nme_gfx_begin_fill line="231" static="1"><f a="::">
	<d/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_begin_fill>
		<nme_gfx_begin_bitmap_fill line="232" static="1"><f a="::::">
	<d/>
	<d/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_gfx_begin_bitmap_fill>
		<nme_gfx_line_bitmap_fill line="233" static="1"><f a="::::">
	<d/>
	<d/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_gfx_line_bitmap_fill>
		<nme_gfx_begin_gradient_fill line="234" static="1"><f a="::::::::">
	<d/>
	<x path="Int"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_begin_gradient_fill>
		<nme_gfx_line_gradient_fill line="235" static="1"><f a="::::::::">
	<d/>
	<x path="Int"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_line_gradient_fill>
		<nme_gfx_end_fill line="236" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_gfx_end_fill>
		<nme_gfx_line_style line="237" static="1"><f a="::::::::">
	<d/>
	<t path="Null"><x path="Float"/></t>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_line_style>
		<nme_gfx_move_to line="238" static="1"><f a="::">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_move_to>
		<nme_gfx_line_to line="239" static="1"><f a="::">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_line_to>
		<nme_gfx_curve_to line="240" static="1"><f a="::::">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_curve_to>
		<nme_gfx_arc_to line="241" static="1"><f a="::::">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_arc_to>
		<nme_gfx_draw_ellipse line="242" static="1"><f a="::::">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_draw_ellipse>
		<nme_gfx_draw_data line="243" static="1"><f a=":">
	<d/>
	<c path="Array"><d/></c>
	<unknown/>
</f></nme_gfx_draw_data>
		<nme_gfx_draw_datum line="244" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_gfx_draw_datum>
		<nme_gfx_draw_rect line="245" static="1"><f a="::::">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_draw_rect>
		<nme_gfx_draw_path line="246" static="1"><f a=":::">
	<d/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
	<unknown/>
</f></nme_gfx_draw_path>
		<nme_gfx_draw_tiles line="247" static="1"><f a=":::">
	<d/>
	<d/>
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<unknown/>
</f></nme_gfx_draw_tiles>
		<nme_gfx_draw_points line="248" static="1"><f a=":::::">
	<d/>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
	<unknown/>
</f></nme_gfx_draw_points>
		<nme_gfx_draw_round_rect line="249" static="1"><f a="::::::">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<t path="Null"><x path="Float"/></t>
	<unknown/>
</f></nme_gfx_draw_round_rect>
		<nme_gfx_draw_triangles line="250" static="1"><f a=":::::::">
	<d/>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<unknown/>
</f></nme_gfx_draw_triangles>
		<moveTo public="1" set="method" line="209"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method" line="202"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<lineStyle public="1" set="method" line="195"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<e path="flash.display.LineScaleMode"/>
	<e path="flash.display.CapsStyle"/>
	<e path="flash.display.JointStyle"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineStyle>
		<lineGradientStyle public="1" set="method" line="181"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineGradientStyle>
		<lineBitmapStyle public="1" set="method" line="174"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></lineBitmapStyle>
		<endFill public="1" set="method" line="167"><f a=""><x path="Void"/></f></endFill>
		<drawTriangles public="1" set="method" line="159"><f a="vertices:?indices:?uvtData:?culling:?colors:?blendMode:?viewport">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Float"/></c>
	<e path="flash.display.TriangleCulling"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></drawTriangles>
		<drawTiles public="1" set="method" line="144"><f a="sheet:data:?smooth:?flags">
	<c path="openfl.display.Tilesheet"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawTiles>
		<drawPath public="1" set="method" line="137"><f a="commands:data:?winding">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Float"/></c>
	<c path="String"/>
	<x path="Void"/>
</f></drawPath>
		<drawRoundRect public="1" set="method" line="130"><f a="x:y:width:height:radiusX:?radiusY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRect>
		<drawRect public="1" set="method" line="123"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawPoints public="1" set="method" line="116"><f a="xy:?pointRGBA:?defaultRGBA:?size">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawPoints>
		<drawGraphicsDatum public="1" set="method" line="109"><f a="graphicsDatum">
	<c path="flash.display.IGraphicsData"/>
	<x path="Void"/>
</f></drawGraphicsDatum>
		<drawGraphicsData public="1" set="method" line="94"><f a="graphicsData">
	<c path="Array"><c path="flash.display.IGraphicsData"/></c>
	<x path="Void"/>
</f></drawGraphicsData>
		<drawEllipse public="1" set="method" line="87"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawCircle public="1" set="method" line="80"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<curveTo public="1" set="method" line="73"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<clear public="1" set="method" line="66"><f a=""><x path="Void"/></f></clear>
		<beginGradientFill public="1" set="method" line="52"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginGradientFill>
		<beginFill public="1" set="method" line="45"><f a="color:?alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<beginBitmapFill public="1" set="method" line="38"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></beginBitmapFill>
		<arcTo public="1" set="method" line="31"><f a="controlX:controlY:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></arcTo>
		<__handle>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__handle>
		<new public="1" set="method" line="24"><f a="handle">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.GraphicsPathWinding" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/GraphicsPathWinding.hx">
		<EVEN_ODD public="1" get="inline" set="null" line="6" static="1"><c path="String"/></EVEN_ODD>
		<NON_ZERO public="1" get="inline" set="null" line="7" static="1"><c path="String"/></NON_ZERO>
	</class>
	<class path="flash.display.IGraphicsData" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/IGraphicsData.hx">
		<__handle public="1">
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__handle>
		<new public="1" set="method" line="10"><f a="handle">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.InterpolationMethod" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/InterpolationMethod.hx">
		<RGB/>
		<LINEAR_RGB/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/JointStyle.hx">
		<ROUND/>
		<MITER/>
		<BEVEL/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/LineScaleMode.hx">
		<NORMAL/>
		<NONE/>
		<VERTICAL/>
		<HORIZONTAL/>
		<OPENGL/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.display.Sprite" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/Sprite.hx">
		<extends path="flash.display.DisplayObjectContainer"/>
		<__getType set="method" line="43"><f a=""><c path="String"/></f></__getType>
		<stopDrag public="1" set="method" line="32"><f a=""><x path="Void"/></f></stopDrag>
		<startDrag public="1" set="method" line="21"><f a="?lockCenter:?bounds">
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></startDrag>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<buttonMode public="1"><x path="Bool"/></buttonMode>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.Loader" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/Loader.hx">
		<extends path="flash.display.Sprite"/>
		<contentLoaderInfo_onData set="method" line="130"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></contentLoaderInfo_onData>
		<__onComplete set="method" line="90">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onComplete>
		<unload public="1" set="method" line="60"><f a=""><x path="Void"/></f></unload>
		<loadBytes public="1" set="method" line="43"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<load public="1" set="method" line="36"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<__image>
			<c path="flash.display.BitmapData"/>
			<meta><m n=":noCompletion"/></meta>
		</__image>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.URLLoader" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/net/URLLoader.hx">
		<extends path="flash.events.EventDispatcher"/>
		<activeLoaders line="23" static="1">
			<c path="List"><c path="flash.net.URLLoader"/></c>
			<meta><m n=":noCompletion"/></meta>
		</activeLoaders>
		<urlInvalid get="inline" set="null" line="24" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</urlInvalid>
		<urlInit get="inline" set="null" line="25" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</urlInit>
		<urlLoading get="inline" set="null" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</urlLoading>
		<urlComplete get="inline" set="null" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</urlComplete>
		<urlError get="inline" set="null" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</urlError>
		<hasActive public="1" set="method" line="68" static="1"><f a=""><x path="Bool"/></f></hasActive>
		<initialize public="1" set="method" line="75" static="1"><f a="caCertFilePath">
	<c path="String"/>
	<x path="Void"/>
</f></initialize>
		<__loadPending public="1" set="method" line="240" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__loadPending>
		<__pollData public="1" set="method" line="247" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__pollData>
		<nme_curl_create line="278" static="1"><f a="">
	<c path="flash.net.URLRequest"/>
	<unknown/>
</f></nme_curl_create>
		<nme_curl_process_loaders line="279" static="1"><f a=""><unknown/></f></nme_curl_process_loaders>
		<nme_curl_update_loader line="280" static="1"><f a=":">
	<d/>
	<c path="flash.net.URLLoader"/>
	<unknown/>
</f></nme_curl_update_loader>
		<nme_curl_get_code line="281" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_curl_get_code>
		<nme_curl_get_error_message line="282" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_curl_get_error_message>
		<nme_curl_get_data line="283" static="1"><f a="">
	<d/>
	<c path="flash.utils.ByteArray"/>
</f></nme_curl_get_data>
		<nme_curl_get_cookies line="284" static="1"><f a="">
	<d/>
	<c path="Array"><c path="String"/></c>
</f></nme_curl_get_cookies>
		<nme_curl_initialize line="285" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></nme_curl_initialize>
		<__dataComplete set="method" line="215">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__dataComplete>
		<update set="method" line="151"><f a=""><x path="Void"/></f></update>
		<dispatchHTTPStatus set="method" line="144"><f a="code">
	<x path="Int"/>
	<x path="Void"/>
</f></dispatchHTTPStatus>
		<onError set="method" line="136"><f a="msg">
	<c path="String"/>
	<x path="Void"/>
</f></onError>
		<load public="1" set="method" line="82"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<getCookies public="1" set="method" line="61"><f a=""><c path="Array"><c path="String"/></c></f></getCookies>
		<close public="1" set="method" line="54"><f a=""><x path="Void"/></f></close>
		<__onComplete public="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onComplete>
		<__handle>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__handle>
		<state>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</state>
		<dataFormat public="1"><e path="flash.net.URLLoaderDataFormat"/></dataFormat>
		<data public="1"><d/></data>
		<bytesTotal public="1" set="null"><x path="Int"/></bytesTotal>
		<bytesLoaded public="1" set="null"><x path="Int"/></bytesLoaded>
		<new public="1" set="method" line="35"><f a="?request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/LoaderInfo.hx">
		<extends path="flash.net.URLLoader"/>
		<create public="1" set="method" line="49" static="1"><f a="loader">
	<c path="flash.display.Loader"/>
	<c path="flash.display.LoaderInfo"/>
</f></create>
		<get_bytes set="method" line="110"><f a=""><c path="flash.utils.ByteArray"/></f></get_bytes>
		<this_onComplete set="method" line="96"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></this_onComplete>
		<load public="1" set="method" line="65" override="1"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<__pendingURL>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__pendingURL>
		<width public="1" set="null"><x path="Int"/></width>
		<url public="1" set="null"><c path="String"/></url>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<sameDomain public="1" set="null"><x path="Bool"/></sameDomain>
		<parentAllowsChild public="1" set="null"><x path="Bool"/></parentAllowsChild>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<height public="1" set="null"><x path="Int"/></height>
		<frameRate public="1" set="null"><x path="Float"/></frameRate>
		<contentType public="1"><c path="String"/></contentType>
		<content public="1"><c path="flash.display.DisplayObject"/></content>
		<childAllowsParent public="1" set="null"><x path="Bool"/></childAllowsParent>
		<bytes public="1" get="accessor" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<new set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.MovieClip" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/MovieClip.hx">
		<extends path="flash.display.Sprite"/>
		<get_totalFrames set="method" line="84"><f a=""><x path="Int"/></f></get_totalFrames>
		<get_framesLoaded set="method" line="83"><f a=""><x path="Int"/></f></get_framesLoaded>
		<get_currentFrame set="method" line="82"><f a=""><x path="Int"/></f></get_currentFrame>
		<stop public="1" set="method" line="68"><f a=""><x path="Void"/></f></stop>
		<prevFrame public="1" set="method" line="61"><f a=""><x path="Void"/></f></prevFrame>
		<play public="1" set="method" line="54"><f a=""><x path="Void"/></f></play>
		<__getType set="method" line="47" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__getType>
		<nextFrame public="1" set="method" line="40"><f a=""><x path="Void"/></f></nextFrame>
		<gotoAndStop public="1" set="method" line="33"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<gotoAndPlay public="1" set="method" line="26"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<__totalFrames>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__totalFrames>
		<__currentFrame>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__currentFrame>
		<totalFrames public="1" get="accessor" set="null"><x path="Int"/></totalFrames>
		<framesLoaded public="1" get="accessor" set="null"><x path="Int"/></framesLoaded>
		<enabled public="1"><x path="Bool"/></enabled>
		<currentFrame public="1" get="accessor" set="null"><x path="Int"/></currentFrame>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.PixelSnapping" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/PixelSnapping.hx">
		<NEVER/>
		<AUTO/>
		<ALWAYS/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.display.Shape" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/Shape.hx">
		<extends path="flash.display.DisplayObject"/>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.SpreadMethod" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/SpreadMethod.hx">
		<PAD/>
		<REPEAT/>
		<REFLECT/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.events.Event" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/Event.hx">
		<ACTIVATE public="1" line="7" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" line="8" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" line="9" static="1"><c path="String"/></ADDED_TO_STAGE>
		<CANCEL public="1" line="10" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" line="11" static="1"><c path="String"/></CHANGE>
		<CLOSE public="1" line="12" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" line="13" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" line="14" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE public="1" line="15" static="1"><c path="String"/></CONTEXT3D_CREATE>
		<DEACTIVATE public="1" line="16" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" line="17" static="1"><c path="String"/></ENTER_FRAME>
		<ID3 public="1" line="18" static="1"><c path="String"/></ID3>
		<INIT public="1" line="19" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" line="20" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" line="21" static="1"><c path="String"/></OPEN>
		<REMOVED public="1" line="22" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" line="23" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" line="24" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" line="25" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" line="26" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" line="27" static="1"><c path="String"/></SELECT>
		<SOUND_COMPLETE public="1" line="28" static="1"><c path="String"/></SOUND_COMPLETE>
		<TAB_CHILDREN_CHANGE public="1" line="29" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" line="30" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" line="31" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<UNLOAD public="1" line="32" static="1"><c path="String"/></UNLOAD>
		<get_type set="method" line="137"><f a=""><c path="String"/></f></get_type>
		<set_target set="method" line="136"><f a="value">
	<d/>
	<d/>
</f></set_target>
		<get_target set="method" line="135"><f a=""><d/></f></get_target>
		<get_eventPhase set="method" line="134"><f a=""><e path="flash.events.EventPhase"/></f></get_eventPhase>
		<set_currentTarget set="method" line="133"><f a="value">
	<d/>
	<d/>
</f></set_currentTarget>
		<get_currentTarget set="method" line="132"><f a=""><d/></f></get_currentTarget>
		<get_cancelable set="method" line="131"><f a=""><x path="Bool"/></f></get_cancelable>
		<get_bubbles set="method" line="130"><f a=""><x path="Bool"/></f></get_bubbles>
		<__setPhase public="1" set="method" line="116">
			<f a="value">
				<e path="flash.events.EventPhase"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__setPhase>
		<__getIsCancelledNow public="1" set="method" line="109">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__getIsCancelledNow>
		<__getIsCancelled public="1" set="method" line="102">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__getIsCancelled>
		<toString public="1" set="method" line="95"><f a=""><c path="String"/></f></toString>
		<stopPropagation public="1" set="method" line="84"><f a=""><x path="Void"/></f></stopPropagation>
		<stopImmediatePropagation public="1" set="method" line="72"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<clone public="1" set="method" line="65"><f a=""><c path="flash.events.Event"/></f></clone>
		<__type>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__type>
		<__target>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__target>
		<__isCancelledNow>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__isCancelledNow>
		<__isCancelled>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__isCancelled>
		<__eventPhase>
			<e path="flash.events.EventPhase"/>
			<meta><m n=":noCompletion"/></meta>
		</__eventPhase>
		<__currentTarget>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__currentTarget>
		<__cancelable>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__cancelable>
		<__bubbles>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__bubbles>
		<type public="1" get="accessor" set="null"><c path="String"/></type>
		<target public="1" get="accessor" set="accessor"><d/></target>
		<eventPhase public="1" get="accessor" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<currentTarget public="1" get="accessor" set="accessor"><d/></currentTarget>
		<cancelable public="1" get="accessor" set="null"><x path="Bool"/></cancelable>
		<bubbles public="1" get="accessor" set="null"><x path="Bool"/></bubbles>
		<new public="1" set="method" line="51"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.MouseEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/MouseEvent.hx">
		<extends path="flash.events.Event"/>
		<DOUBLE_CLICK public="1" line="11" static="1"><c path="String"/></DOUBLE_CLICK>
		<CLICK public="1" line="12" static="1"><c path="String"/></CLICK>
		<MIDDLE_CLICK public="1" line="13" static="1"><c path="String"/></MIDDLE_CLICK>
		<MIDDLE_MOUSE_DOWN public="1" line="14" static="1"><c path="String"/></MIDDLE_MOUSE_DOWN>
		<MIDDLE_MOUSE_UP public="1" line="15" static="1"><c path="String"/></MIDDLE_MOUSE_UP>
		<MOUSE_DOWN public="1" line="16" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" line="17" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_OUT public="1" line="18" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_OVER public="1" line="19" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_UP public="1" line="20" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL public="1" line="21" static="1"><c path="String"/></MOUSE_WHEEL>
		<RIGHT_CLICK public="1" line="22" static="1"><c path="String"/></RIGHT_CLICK>
		<RIGHT_MOUSE_DOWN public="1" line="23" static="1"><c path="String"/></RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP public="1" line="24" static="1"><c path="String"/></RIGHT_MOUSE_UP>
		<ROLL_OUT public="1" line="25" static="1"><c path="String"/></ROLL_OUT>
		<ROLL_OVER public="1" line="26" static="1"><c path="String"/></ROLL_OVER>
		<efLeftDown line="41" static="1"><x path="Int"/></efLeftDown>
		<efShiftDown line="42" static="1"><x path="Int"/></efShiftDown>
		<efCtrlDown line="43" static="1"><x path="Int"/></efCtrlDown>
		<efAltDown line="44" static="1"><x path="Int"/></efAltDown>
		<efCommandDown line="45" static="1"><x path="Int"/></efCommandDown>
		<__create public="1" set="method" line="86" static="1">
			<f a="type:event:local:target">
				<c path="String"/>
				<d/>
				<c path="flash.geom.Point"/>
				<c path="flash.display.InteractiveObject"/>
				<c path="flash.events.MouseEvent"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__create>
		<__createSimilar public="1" set="method" line="98">
			<f a="type:?related:?target">
				<c path="String"/>
				<c path="flash.display.InteractiveObject"/>
				<c path="flash.display.InteractiveObject"/>
				<c path="flash.events.MouseEvent"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__createSimilar>
		<updateAfterEvent public="1" set="method" line="79"><f a=""><x path="Void"/></f></updateAfterEvent>
		<toString public="1" set="method" line="72" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="65" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<stageY public="1"><x path="Float"/></stageY>
		<stageX public="1"><x path="Float"/></stageX>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<localY public="1"><x path="Float"/></localY>
		<localX public="1"><x path="Float"/></localX>
		<delta public="1"><x path="Int"/></delta>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<commandKey public="1"><x path="Bool"/></commandKey>
		<clickCount public="1"><x path="Int"/></clickCount>
		<buttonDown public="1"><x path="Bool"/></buttonDown>
		<altKey public="1"><x path="Bool"/></altKey>
		<new public="1" set="method" line="47"><f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta:?commandKey:?clickCount">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.display.InteractiveObject"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.TouchEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/TouchEvent.hx">
		<extends path="flash.events.MouseEvent"/>
		<TOUCH_BEGIN public="1" line="11" static="1"><c path="String"/></TOUCH_BEGIN>
		<TOUCH_END public="1" line="12" static="1"><c path="String"/></TOUCH_END>
		<TOUCH_MOVE public="1" line="13" static="1"><c path="String"/></TOUCH_MOVE>
		<TOUCH_OUT public="1" line="14" static="1"><c path="String"/></TOUCH_OUT>
		<TOUCH_OVER public="1" line="15" static="1"><c path="String"/></TOUCH_OVER>
		<TOUCH_ROLL_OUT public="1" line="16" static="1"><c path="String"/></TOUCH_ROLL_OUT>
		<TOUCH_ROLL_OVER public="1" line="17" static="1"><c path="String"/></TOUCH_ROLL_OVER>
		<TOUCH_TAP public="1" line="18" static="1"><c path="String"/></TOUCH_TAP>
		<__create public="1" set="method" line="38" static="1">
			<f a="type:event:local:target:sizeX:sizeY">
				<c path="String"/>
				<d/>
				<c path="flash.geom.Point"/>
				<c path="flash.display.InteractiveObject"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="flash.events.TouchEvent"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__create>
		<__createSimilar public="1" set="method" line="50" override="1">
			<f a="type:?related:?target">
				<c path="String"/>
				<c path="flash.display.InteractiveObject"/>
				<c path="flash.display.InteractiveObject"/>
				<c path="flash.events.MouseEvent"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__createSimilar>
		<touchPointID public="1"><x path="Int"/></touchPointID>
		<sizeY public="1"><x path="Float"/></sizeY>
		<sizeX public="1"><x path="Float"/></sizeX>
		<isPrimaryTouchPoint public="1"><x path="Bool"/></isPrimaryTouchPoint>
		<new public="1" set="method" line="26"><f a="type:?bubbles:?cancelable:?localX:?localY:?sizeX:?sizeY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta:?commandKey:?clickCount">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.display.InteractiveObject"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.Stage" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/Stage.hx">
		<extends path="flash.display.DisplayObjectContainer"/>
		<__earlyWakeup public="1" line="25" static="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</__earlyWakeup>
		<OrientationPortrait public="1" line="27" static="1"><x path="Int"/></OrientationPortrait>
		<OrientationPortraitUpsideDown public="1" line="28" static="1"><x path="Int"/></OrientationPortraitUpsideDown>
		<OrientationLandscapeRight public="1" line="29" static="1"><x path="Int"/></OrientationLandscapeRight>
		<OrientationLandscapeLeft public="1" line="30" static="1"><x path="Int"/></OrientationLandscapeLeft>
		<OrientationFaceUp public="1" line="31" static="1"><x path="Int"/></OrientationFaceUp>
		<OrientationFaceDown public="1" line="32" static="1"><x path="Int"/></OrientationFaceDown>
		<efLeftDown line="51" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</efLeftDown>
		<efShiftDown line="52" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</efShiftDown>
		<efCtrlDown line="53" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</efCtrlDown>
		<efAltDown line="54" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</efAltDown>
		<efCommandDown line="55" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</efCommandDown>
		<efLocationRight line="56" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</efLocationRight>
		<efNoNativeClick line="57" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</efNoNativeClick>
		<sClickEvents line="58" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</sClickEvents>
		<sDownEvents line="59" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</sDownEvents>
		<sUpEvents line="60" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</sUpEvents>
		<__mouseChanges line="62" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__mouseChanges>
		<__touchChanges line="63" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__touchChanges>
		<getOrientation public="1" set="dynamic" line="113" static="1"><f a=""><x path="Int"/></f></getOrientation>
		<getNormalOrientation public="1" set="dynamic" line="120" static="1"><f a=""><x path="Int"/></f></getNormalOrientation>
		<setFixedOrientation public="1" set="method" line="134" static="1"><f a="orientation">
	<x path="Int"/>
	<x path="Void"/>
</f></setFixedOrientation>
		<shouldRotateInterface public="1" set="dynamic" line="142" static="1"><f a="orientation">
	<x path="Int"/>
	<x path="Bool"/>
</f></shouldRotateInterface>
		<nme_set_stage_handler line="1198" static="1"><f a=":::">
	<d/>
	<f a="event">
		<d/>
		<d/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_set_stage_handler>
		<nme_render_stage line="1199" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_render_stage>
		<nme_stage_get_focus_id line="1200" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_stage_get_focus_id>
		<nme_stage_set_focus line="1201" static="1"><f a="::">
	<d/>
	<unknown/>
	<x path="Int"/>
	<unknown/>
</f></nme_stage_set_focus>
		<nme_stage_get_focus_rect line="1202" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_stage_get_focus_rect>
		<nme_stage_set_focus_rect line="1203" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_stage_set_focus_rect>
		<nme_stage_is_opengl line="1204" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_stage_is_opengl>
		<nme_stage_get_stage_width line="1205" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_stage_get_stage_width>
		<nme_stage_get_stage_height line="1206" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_stage_get_stage_height>
		<nme_stage_get_dpi_scale line="1207" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_stage_get_dpi_scale>
		<nme_stage_get_scale_mode line="1208" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_stage_get_scale_mode>
		<nme_stage_set_scale_mode line="1209" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_stage_set_scale_mode>
		<nme_stage_get_align line="1210" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_stage_get_align>
		<nme_stage_set_align line="1211" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_stage_set_align>
		<nme_stage_get_quality line="1212" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_stage_get_quality>
		<nme_stage_set_quality line="1213" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_stage_set_quality>
		<nme_stage_get_display_state line="1214" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_stage_get_display_state>
		<nme_stage_set_display_state line="1215" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_stage_set_display_state>
		<nme_stage_set_next_wake line="1216" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<unknown/>
</f></nme_stage_set_next_wake>
		<nme_stage_request_render line="1217" static="1"><unknown/></nme_stage_request_render>
		<nme_stage_show_cursor line="1218" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_stage_show_cursor>
		<nme_stage_set_fixed_orientation line="1219" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></nme_stage_set_fixed_orientation>
		<nme_stage_get_orientation line="1220" static="1"><f a=""><x path="Int"/></f></nme_stage_get_orientation>
		<nme_stage_get_normal_orientation line="1221" static="1"><f a=""><x path="Int"/></f></nme_stage_get_normal_orientation>
		<get_stageWidth set="method" line="1184"><f a=""><x path="Int"/></f></get_stageWidth>
		<get_stageHeight set="method" line="1177"><f a=""><x path="Int"/></f></get_stageHeight>
		<set_stageFocusRect set="method" line="1169"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_stageFocusRect>
		<get_stageFocusRect set="method" line="1168"><f a=""><x path="Bool"/></f></get_stageFocusRect>
		<get_stage set="method" line="1161" override="1"><f a=""><c path="flash.display.Stage"/></f></get_stage>
		<set_scaleMode set="method" line="1153"><f a="value">
	<e path="flash.display.StageScaleMode"/>
	<e path="flash.display.StageScaleMode"/>
</f></set_scaleMode>
		<get_scaleMode set="method" line="1145"><f a=""><e path="flash.display.StageScaleMode"/></f></get_scaleMode>
		<set_quality set="method" line="1137"><f a="value">
	<e path="flash.display.StageQuality"/>
	<e path="flash.display.StageQuality"/>
</f></set_quality>
		<get_quality set="method" line="1129"><f a=""><e path="flash.display.StageQuality"/></f></get_quality>
		<get_isOpenGL set="method" line="1122"><f a=""><x path="Bool"/></f></get_isOpenGL>
		<set_frameRate set="method" line="1112"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_frameRate>
		<set_focus set="method" line="1095"><f a="value">
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
</f></set_focus>
		<get_focus set="method" line="1086"><f a=""><c path="flash.display.InteractiveObject"/></f></get_focus>
		<get_dpiScale set="method" line="1079"><f a=""><x path="Float"/></f></get_dpiScale>
		<set_displayState set="method" line="1071"><f a="value">
	<e path="flash.display.StageDisplayState"/>
	<e path="flash.display.StageDisplayState"/>
</f></set_displayState>
		<get_displayState set="method" line="1063"><f a=""><e path="flash.display.StageDisplayState"/></f></get_displayState>
		<set_align set="method" line="1055"><f a="value">
	<e path="flash.display.StageAlign"/>
	<e path="flash.display.StageAlign"/>
</f></set_align>
		<get_align set="method" line="1047"><f a=""><e path="flash.display.StageAlign"/></f></get_align>
		<__updateNextWake public="1" set="method" line="1017">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__updateNextWake>
		<__stopDrag public="1" set="method" line="1009">
			<f a="sprite">
				<c path="flash.display.Sprite"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__stopDrag>
		<__startDrag public="1" set="method" line="976">
			<f a="sprite:lockCenter:bounds">
				<c path="flash.display.Sprite"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__startDrag>
		<__setActive public="1" set="method" line="949">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__setActive>
		<__render public="1" set="method" line="923">
			<f a="sendEnterFrame">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__render>
		<__pollTimers public="1" set="method" line="913">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__pollTimers>
		<__onTouch set="method" line="866">
			<f a="event:type:touchInfo">
				<d/>
				<c path="String"/>
				<c path="flash.display.TouchInfo"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onTouch>
		<__onSysWM set="method" line="858">
			<f a="event">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onSysWM>
		<__onResize set="method" line="850">
			<f a="width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onResize>
		<__onMouse set="method" line="733">
			<f a="event:type:fromMouse">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onMouse>
		<__onKey set="method" line="684">
			<f a="event:type">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onKey>
		<__onJoystick set="method" line="573">
			<f a="event:type">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onJoystick>
		<__onFocus set="method" line="541">
			<f a="event">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onFocus>
		<__onChange set="method" line="528">
			<f a="event">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onChange>
		<__nextFrameDue set="method" line="504">
			<f a="otherTimers">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__nextFrameDue>
		<__drag set="method" line="462">
			<f a="mouse">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__drag>
		<__processStageEvent set="method" line="454">
			<f a="event">
				<d/>
				<d/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__processStageEvent>
		<__doProcessStageEvent set="method" line="300">
			<f a="event">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__doProcessStageEvent>
		<__checkRender set="method" line="258">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__checkRender>
		<__checkInOuts set="method" line="188">
			<f a="event:stack:?touchInfo">
				<c path="flash.events.MouseEvent"/>
				<c path="Array"><c path="flash.display.InteractiveObject"/></c>
				<c path="flash.display.TouchInfo"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__checkInOuts>
		<__checkFocusInOuts set="method" line="156">
			<f a="event:stack">
				<d/>
				<c path="Array"><c path="flash.display.InteractiveObject"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__checkFocusInOuts>
		<showCursor public="1" set="method" line="149"><f a="show">
	<x path="Bool"/>
	<x path="Void"/>
</f></showCursor>
		<invalidate public="1" set="method" line="127"><f a=""><x path="Void"/></f></invalidate>
		<__touchInfo>
			<x path="Map">
				<x path="Int"/>
				<c path="flash.display.TouchInfo"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</__touchInfo>
		<__nextRender>
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</__nextRender>
		<__mouseOverObjects>
			<c path="Array"><c path="flash.display.InteractiveObject"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__mouseOverObjects>
		<__lastRender>
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</__lastRender>
		<__lastDown>
			<c path="Array"><c path="flash.display.InteractiveObject"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__lastDown>
		<__lastClickTime>
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</__lastClickTime>
		<__invalid>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__invalid>
		<__framePeriod>
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</__framePeriod>
		<__focusOverObjects>
			<c path="Array"><c path="flash.display.InteractiveObject"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__focusOverObjects>
		<__dragOffsetY>
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</__dragOffsetY>
		<__dragOffsetX>
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</__dragOffsetX>
		<__dragObject>
			<c path="flash.display.Sprite"/>
			<meta><m n=":noCompletion"/></meta>
		</__dragObject>
		<__dragBounds>
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":noCompletion"/></meta>
		</__dragBounds>
		<__joyAxisData>
			<x path="Map">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</__joyAxisData>
		<stageWidth public="1" get="accessor" set="null"><x path="Int"/></stageWidth>
		<stageHeight public="1" get="accessor" set="null"><x path="Int"/></stageHeight>
		<stageFocusRect public="1" get="accessor" set="accessor"><x path="Bool"/></stageFocusRect>
		<scaleMode public="1" get="accessor" set="accessor"><e path="flash.display.StageScaleMode"/></scaleMode>
		<renderRequest public="1"><f a=""><x path="Void"/></f></renderRequest>
		<quality public="1" get="accessor" set="accessor"><e path="flash.display.StageQuality"/></quality>
		<pauseWhenDeactivated public="1"><x path="Bool"/></pauseWhenDeactivated>
		<onQuit public="1"><f a=""><x path="Void"/></f></onQuit>
		<onKey public="1"><f a=":::">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onKey>
		<isOpenGL public="1" get="accessor" set="null"><x path="Bool"/></isOpenGL>
		<frameRate public="1" set="accessor"><x path="Float"/></frameRate>
		<focus public="1" get="accessor" set="accessor"><c path="flash.display.InteractiveObject"/></focus>
		<dpiScale public="1" get="accessor" set="null"><x path="Float"/></dpiScale>
		<displayState public="1" get="accessor" set="accessor"><e path="flash.display.StageDisplayState"/></displayState>
		<align public="1" get="accessor" set="accessor"><e path="flash.display.StageAlign"/></align>
		<active public="1" set="null"><x path="Bool"/></active>
		<new public="1" set="method" line="84"><f a="handle:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.TouchInfo" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/Stage.hx" module="flash.display.Stage">
		<touchOverObjects public="1"><c path="Array"><c path="flash.display.InteractiveObject"/></c></touchOverObjects>
		<new public="1" set="method" line="1233"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.StageAlign" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/StageAlign.hx">
		<TOP_RIGHT/>
		<TOP_LEFT/>
		<TOP/>
		<RIGHT/>
		<LEFT/>
		<BOTTOM_RIGHT/>
		<BOTTOM_LEFT/>
		<BOTTOM/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/StageDisplayState.hx">
		<NORMAL/>
		<FULL_SCREEN/>
		<FULL_SCREEN_INTERACTIVE/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/StageQuality.hx">
		<LOW/>
		<MEDIUM/>
		<HIGH/>
		<BEST/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/StageScaleMode.hx">
		<SHOW_ALL/>
		<NO_SCALE/>
		<NO_BORDER/>
		<EXACT_FIT/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="flash.display.TriangleCulling" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/display/TriangleCulling.hx">
		<POSITIVE/>
		<NONE/>
		<NEGATIVE/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.errors.Error" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/errors/Error.hx">
		<toString public="1" set="method" line="27"><f a=""><c path="String"/></f></toString>
		<getStackTrace set="method" line="20"><f a=""><c path="String"/></f></getStackTrace>
		<name public="1"><d/></name>
		<message public="1"><d/></message>
		<errorID public="1"><x path="Int"/></errorID>
		<new public="1" set="method" line="12"><f a="?message:?id">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.errors.ArgumentError" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/errors/ArgumentError.hx">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method" line="4"><f a="?message:?id">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.errors.EOFError" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/errors/EOFError.hx">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.errors.RangeError" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/errors/RangeError.hx">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method" line="7"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.TextEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/TextEvent.hx">
		<extends path="flash.events.Event"/>
		<LINK public="1" line="7" static="1"><c path="String"/></LINK>
		<TEXT_INPUT public="1" line="8" static="1"><c path="String"/></TEXT_INPUT>
		<toString public="1" set="method" line="29" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="22" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<text public="1" set="null"><c path="String"/></text>
		<new public="1" set="method" line="13"><f a="type:?bubbles:?cancelable:?text">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.ErrorEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/ErrorEvent.hx">
		<extends path="flash.events.TextEvent"/>
		<ERROR public="1" line="7" static="1"><c path="String"/></ERROR>
		<toString public="1" set="method" line="27" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="20" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<errorID public="1" set="null"><x path="Int"/></errorID>
		<new public="1" set="method" line="12"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.Listener" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/EventDispatcher.hx" module="flash.events.EventDispatcher">
		<__id line="244" static="1"><x path="Int"/></__id>
		<is public="1" set="method" line="264"><f a="listener:useCapture">
	<t path="flash.events.Function"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></is>
		<dispatchEvent public="1" set="method" line="257"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></dispatchEvent>
		<useCapture public="1"><x path="Bool"/></useCapture>
		<priority public="1"><x path="Int"/></priority>
		<listener public="1"><t path="flash.events.Function"/></listener>
		<id public="1"><x path="Int"/></id>
		<new public="1" set="method" line="247"><f a="listener:useCapture:priority">
	<t path="flash.events.Function"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="flash.events.ListenerList" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/EventDispatcher.hx" module="flash.events.EventDispatcher"><c path="Array"><c path="openfl.utils.WeakRef"><c path="flash.events.Listener"/></c></c></typedef>
	<typedef path="flash.events.EventMap" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/EventDispatcher.hx" module="flash.events.EventDispatcher"><c path="haxe.ds.StringMap"><t path="flash.events.ListenerList"/></c></typedef>
	<enum path="flash.events.EventPhase" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/EventPhase.hx">
		<CAPTURING_PHASE/>
		<AT_TARGET/>
		<BUBBLING_PHASE/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.events.FocusEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/FocusEvent.hx">
		<extends path="flash.events.Event"/>
		<FOCUS_IN public="1" line="10" static="1"><c path="String"/></FOCUS_IN>
		<FOCUS_OUT public="1" line="11" static="1"><c path="String"/></FOCUS_OUT>
		<KEY_FOCUS_CHANGE public="1" line="12" static="1"><c path="String"/></KEY_FOCUS_CHANGE>
		<MOUSE_FOCUS_CHANGE public="1" line="13" static="1"><c path="String"/></MOUSE_FOCUS_CHANGE>
		<toString public="1" set="method" line="38" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="31" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<shiftKey public="1" set="null"><x path="Bool"/></shiftKey>
		<relatedObject public="1" set="null"><c path="flash.display.InteractiveObject"/></relatedObject>
		<keyCode public="1" set="null"><x path="Int"/></keyCode>
		<new public="1" set="method" line="20"><f a="type:?bubbles:?cancelable:?relatedObject:?shiftKey:?keyCode:?direction">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="flash.display.InteractiveObject"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.HTTPStatusEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/HTTPStatusEvent.hx">
		<extends path="flash.events.Event"/>
		<HTTP_STATUS public="1" line="7" static="1"><c path="String"/></HTTP_STATUS>
		<toString public="1" set="method" line="28" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="21" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<status public="1"><x path="Int"/></status>
		<new public="1" set="method" line="12"><f a="type:?bubbles:?cancelable:?status">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="flash.events.Function" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/IEventDispatcher.hx" module="flash.events.IEventDispatcher"><f a="">
	<d/>
	<x path="Void"/>
</f></typedef>
	<class path="flash.events.IOErrorEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/IOErrorEvent.hx">
		<extends path="flash.events.ErrorEvent"/>
		<IO_ERROR public="1" line="7" static="1"><c path="String"/></IO_ERROR>
		<toString public="1" set="method" line="24" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="17" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<new public="1" set="method" line="10"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.KeyboardEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/KeyboardEvent.hx">
		<extends path="flash.events.Event"/>
		<KEY_DOWN public="1" line="7" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" line="8" static="1"><c path="String"/></KEY_UP>
		<toString public="1" set="method" line="43" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="36" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<keyLocation public="1"><x path="Int"/></keyLocation>
		<keyCode public="1"><x path="Int"/></keyCode>
		<commandKey public="1"><x path="Bool"/></commandKey>
		<controlKey public="1"><x path="Bool"/></controlKey>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<charCode public="1"><x path="Int"/></charCode>
		<altKey public="1"><x path="Bool"/></altKey>
		<new public="1" set="method" line="19"><f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue:?controlKeyValue:?commandKeyValue">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.ProgressEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/ProgressEvent.hx">
		<extends path="flash.events.Event"/>
		<PROGRESS public="1" get="inline" set="null" line="7" static="1"><c path="String"/></PROGRESS>
		<SOCKET_DATA public="1" get="inline" set="null" line="8" static="1"><c path="String"/></SOCKET_DATA>
		<toString public="1" set="method" line="31" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="24" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<bytesTotal public="1" set="null"><x path="Int"/></bytesTotal>
		<bytesLoaded public="1" set="null"><x path="Int"/></bytesLoaded>
		<new public="1" set="method" line="14"><f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.SampleDataEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/SampleDataEvent.hx">
		<extends path="flash.events.Event"/>
		<SAMPLE_DATA public="1" line="10" static="1"><c path="String"/></SAMPLE_DATA>
		<toString public="1" set="method" line="34" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="27" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<position public="1"><x path="Float"/></position>
		<data public="1"><c path="flash.utils.ByteArray"/></data>
		<new public="1" set="method" line="16"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.TimerEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/events/TimerEvent.hx">
		<extends path="flash.events.Event"/>
		<TIMER public="1" line="7" static="1"><c path="String"/></TIMER>
		<TIMER_COMPLETE public="1" line="8" static="1"><c path="String"/></TIMER_COMPLETE>
		<updateAfterEvent public="1" set="method" line="32"><f a=""><x path="Void"/></f></updateAfterEvent>
		<toString public="1" set="method" line="25" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="18" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<new public="1" set="method" line="11"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/filters/BitmapFilter.hx">
		<clone public="1" set="method" line="17"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<type><c path="String"/></type>
		<new public="1" set="method" line="10"><f a="type">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.BlurFilter" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/filters/BlurFilter.hx">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method" line="23" override="1"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<quality public="1"><x path="Int"/></quality>
		<blurY public="1"><x path="Float"/></blurY>
		<blurX public="1"><x path="Float"/></blurX>
		<new public="1" set="method" line="12"><f a="?blurX:?blurY:?quality">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.DropShadowFilter" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/filters/DropShadowFilter.hx">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method" line="39" override="1"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<strength><x path="Float"/></strength>
		<quality><x path="Int"/></quality>
		<knockout><x path="Bool"/></knockout>
		<inner><x path="Bool"/></inner>
		<hideObject><x path="Bool"/></hideObject>
		<distance><x path="Float"/></distance>
		<color><x path="Int"/></color>
		<blurY><x path="Float"/></blurY>
		<blurX><x path="Float"/></blurX>
		<angle><x path="Float"/></angle>
		<alpha><x path="Float"/></alpha>
		<new public="1" set="method" line="20"><f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/filters/GlowFilter.hx">
		<extends path="flash.filters.DropShadowFilter"/>
		<new public="1" set="method" line="7"><f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/geom/ColorTransform.hx">
		<set_color set="method" line="56"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_color>
		<get_color set="method" line="49"><f a=""><x path="Int"/></f></get_color>
		<concat public="1" set="method" line="32"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<redOffset public="1"><x path="Float"/></redOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<color public="1" get="accessor" set="accessor"><x path="Int"/></color>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<new public="1" set="method" line="18"><f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/geom/Matrix.hx">
		<implements path="cpp.rtti.FieldNumericIntegerLookup"/>
		<translate public="1" set="method" line="345"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<transformPoint public="1" set="method" line="338"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<toString public="1" set="method" line="331"><f a=""><c path="String"/></f></toString>
		<setTo public="1" set="method" line="319"><f a="a:b:c:d:tx:ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setTo>
		<setRotation public="1" set="method" line="309"><f a="angle:?scale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setRotation>
		<scale public="1" set="method" line="295"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<rotate public="1" set="method" line="275"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<mult public="1" set="method" line="258"><f a="m">
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.Matrix"/>
</f></mult>
		<invert public="1" set="method" line="228"><f a=""><c path="flash.geom.Matrix"/></f></invert>
		<identity public="1" set="method" line="216"><f a=""><x path="Void"/></f></identity>
		<deltaTransformPoint public="1" set="method" line="209"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<createGradientBox public="1" set="method" line="183"><f a="width:height:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createGradientBox>
		<createBox public="1" set="method" line="172"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createBox>
		<copyRowTo public="1" set="method" line="145"><f a="row:vector3D">
	<x path="Int"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></copyRowTo>
		<copyRowFrom public="1" set="method" line="119"><f a="row:vector3D">
	<x path="Int"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></copyRowFrom>
		<copyFrom public="1" set="method" line="107"><f a="other">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></copyFrom>
		<copyColumnTo public="1" set="method" line="78"><f a="column:vector3D">
	<x path="Int"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></copyColumnTo>
		<copyColumnFrom public="1" set="method" line="52"><f a="column:vector3D">
	<x path="Int"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></copyColumnFrom>
		<concat public="1" set="method" line="34"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<clone public="1" set="method" line="27"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<ty public="1"><x path="Float"/></ty>
		<tx public="1"><x path="Float"/></tx>
		<d public="1"><x path="Float"/></d>
		<c public="1"><x path="Float"/></c>
		<b public="1"><x path="Float"/></b>
		<a public="1"><x path="Float"/></a>
		<new public="1" set="method" line="15"><f a="?a:?b:?c:?d:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Point" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/geom/Point.hx">
		<distance public="1" set="method" line="42" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" line="58" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" line="90" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<get_length set="method" line="126"><f a=""><x path="Float"/></f></get_length>
		<toString public="1" set="method" line="112"><f a=""><c path="String"/></f></toString>
		<subtract public="1" set="method" line="105"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<setTo public="1" set="method" line="97"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setTo>
		<offset public="1" set="method" line="82"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<normalize public="1" set="method" line="65"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<equals public="1" set="method" line="51"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<copyFrom public="1" set="method" line="34"><f a="sourcePoint">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></copyFrom>
		<clone public="1" set="method" line="27"><f a=""><c path="flash.geom.Point"/></f></clone>
		<add public="1" set="method" line="20"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<length public="1" get="accessor" set="null"><x path="Float"/></length>
		<new public="1" set="method" line="12"><f a="?x:?y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/geom/Rectangle.hx">
		<set_topLeft set="method" line="277"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_topLeft>
		<get_topLeft set="method" line="276"><f a=""><c path="flash.geom.Point"/></f></get_topLeft>
		<set_top set="method" line="275"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_top>
		<get_top set="method" line="274"><f a=""><x path="Float"/></f></get_top>
		<set_size set="method" line="273"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_size>
		<get_size set="method" line="272"><f a=""><c path="flash.geom.Point"/></f></get_size>
		<set_right set="method" line="271"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_right>
		<get_right set="method" line="270"><f a=""><x path="Float"/></f></get_right>
		<set_left set="method" line="269"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_left>
		<get_left set="method" line="268"><f a=""><x path="Float"/></f></get_left>
		<set_bottomRight set="method" line="267"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_bottomRight>
		<get_bottomRight set="method" line="266"><f a=""><c path="flash.geom.Point"/></f></get_bottomRight>
		<set_bottom set="method" line="265"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bottom>
		<get_bottom set="method" line="264"><f a=""><x path="Float"/></f></get_bottom>
		<union public="1" set="method" line="246"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<transform public="1" set="method" line="213"><f a="m">
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.Rectangle"/>
</f></transform>
		<toString public="1" set="method" line="206"><f a=""><c path="String"/></f></toString>
		<setEmpty public="1" set="method" line="196"><f a=""><x path="Void"/></f></setEmpty>
		<offsetPoint public="1" set="method" line="188"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<offset public="1" set="method" line="180"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<isEmpty public="1" set="method" line="173"><f a=""><x path="Bool"/></f></isEmpty>
		<intersects public="1" set="method" line="156"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<intersection public="1" set="method" line="133"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<inflatePoint public="1" set="method" line="126"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<inflate public="1" set="method" line="116"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<extendBounds public="1" set="method" line="83"><f a="r">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></extendBounds>
		<equals public="1" set="method" line="76"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<copyFrom public="1" set="method" line="66"><f a="sourceRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></copyFrom>
		<containsRect public="1" set="method" line="51"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<containsPoint public="1" set="method" line="44"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<contains public="1" set="method" line="37"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<clone public="1" set="method" line="30"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<width public="1"><x path="Float"/></width>
		<topLeft public="1" get="accessor" set="accessor"><c path="flash.geom.Point"/></topLeft>
		<top public="1" get="accessor" set="accessor"><x path="Float"/></top>
		<size public="1" get="accessor" set="accessor"><c path="flash.geom.Point"/></size>
		<right public="1" get="accessor" set="accessor"><x path="Float"/></right>
		<left public="1" get="accessor" set="accessor"><x path="Float"/></left>
		<height public="1"><x path="Float"/></height>
		<bottomRight public="1" get="accessor" set="accessor"><c path="flash.geom.Point"/></bottomRight>
		<bottom public="1" get="accessor" set="accessor"><x path="Float"/></bottom>
		<new public="1" set="method" line="20"><f a="?x:?y:?width:?height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Transform" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/geom/Transform.hx">
		<get_pixelBounds set="method" line="39"><f a=""><c path="flash.geom.Rectangle"/></f></get_pixelBounds>
		<set_matrix set="method" line="38"><f a="value">
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.Matrix"/>
</f></set_matrix>
		<get_matrix set="method" line="37"><f a=""><c path="flash.geom.Matrix"/></f></get_matrix>
		<get_concatenatedMatrix set="method" line="36"><f a=""><c path="flash.geom.Matrix"/></f></get_concatenatedMatrix>
		<get_concatenatedColorTransform set="method" line="35"><f a=""><c path="flash.geom.ColorTransform"/></f></get_concatenatedColorTransform>
		<set_colorTransform set="method" line="34"><f a="value">
	<c path="flash.geom.ColorTransform"/>
	<c path="flash.geom.ColorTransform"/>
</f></set_colorTransform>
		<get_colorTransform set="method" line="33"><f a=""><c path="flash.geom.ColorTransform"/></f></get_colorTransform>
		<__parent>
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":noCompletion"/></meta>
		</__parent>
		<pixelBounds public="1" get="accessor" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<matrix public="1" get="accessor" set="accessor"><c path="flash.geom.Matrix"/></matrix>
		<concatenatedMatrix public="1" get="accessor" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<concatenatedColorTransform public="1" get="accessor" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<colorTransform public="1" get="accessor" set="accessor"><c path="flash.geom.ColorTransform"/></colorTransform>
		<new public="1" set="method" line="19"><f a="parent">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/geom/Vector3D.hx">
		<X_AXIS public="1" get="accessor" set="null" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" get="accessor" set="null" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" get="accessor" set="null" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" get="inline" set="null" line="36" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" get="inline" set="null" line="79" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<get_X_AXIS get="inline" set="null" line="196" static="1"><f a=""><c path="flash.geom.Vector3D"/></f></get_X_AXIS>
		<get_Y_AXIS get="inline" set="null" line="197" static="1"><f a=""><c path="flash.geom.Vector3D"/></f></get_Y_AXIS>
		<get_Z_AXIS get="inline" set="null" line="198" static="1"><f a=""><c path="flash.geom.Vector3D"/></f></get_Z_AXIS>
		<get_lengthSquared get="inline" set="null" line="195"><f a=""><x path="Float"/></f></get_lengthSquared>
		<get_length get="inline" set="null" line="194"><f a=""><x path="Float"/></f></get_length>
		<toString public="1" get="inline" set="null" line="180"><f a=""><c path="String"/></f></toString>
		<subtract public="1" get="inline" set="null" line="173"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<scaleBy public="1" get="inline" set="null" line="164"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<setTo public="1" get="inline" set="null" line="155"><f a="xa:ya:za">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setTo>
		<project public="1" get="inline" set="null" line="146"><f a=""><x path="Void"/></f></project>
		<normalize public="1" get="inline" set="null" line="129"><f a=""><x path="Float"/></f></normalize>
		<negate public="1" get="inline" set="null" line="120"><f a=""><x path="Void"/></f></negate>
		<nearEquals public="1" get="inline" set="null" line="113"><f a="toCompare:tolerance:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></nearEquals>
		<incrementBy public="1" get="inline" set="null" line="104"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<equals public="1" get="inline" set="null" line="97"><f a="toCompare:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></equals>
		<dotProduct public="1" get="inline" set="null" line="90"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<decrementBy public="1" get="inline" set="null" line="70"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<crossProduct public="1" get="inline" set="null" line="63"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<copyFrom public="1" get="inline" set="null" line="54"><f a="sourceVector3D">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></copyFrom>
		<clone public="1" get="inline" set="null" line="47"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<add public="1" get="inline" set="null" line="29"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<z public="1"><x path="Float"/></z>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<w public="1"><x path="Float"/></w>
		<lengthSquared public="1" get="accessor" set="null"><x path="Float"/></lengthSquared>
		<length public="1" get="accessor" set="null"><x path="Float"/></length>
		<new public="1" set="method" line="19"><f a="?x:?y:?z:?w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.ID3Info" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/media/ID3Info.hx">
		<year public="1"><c path="String"/></year>
		<track public="1"><c path="String"/></track>
		<songName public="1"><c path="String"/></songName>
		<genre public="1"><c path="String"/></genre>
		<comment public="1"><c path="String"/></comment>
		<artist public="1"><c path="String"/></artist>
		<album public="1"><c path="String"/></album>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.Sound" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/media/Sound.hx">
		<extends path="flash.events.EventDispatcher"/>
		<nme_sound_from_file line="298" static="1"><f a=":">
	<c path="String"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_sound_from_file>
		<nme_sound_from_data line="299" static="1"><f a="::">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Bool"/>
	<unknown/>
</f></nme_sound_from_data>
		<nme_sound_get_id3 line="300" static="1"><f a=":">
	<d/>
	<c path="flash.media.ID3Info"/>
	<unknown/>
</f></nme_sound_get_id3>
		<nme_sound_get_length line="301" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_sound_get_length>
		<nme_sound_close line="302" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_sound_close>
		<nme_sound_get_status line="303" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_sound_get_status>
		<nme_sound_channel_create_dynamic line="304" static="1"><f a=":">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.media.SoundTransform"/>
	<unknown/>
</f></nme_sound_channel_create_dynamic>
		<get_length set="method" line="278"><f a=""><x path="Float"/></f></get_length>
		<get_isBuffering set="method" line="270"><f a=""><x path="Bool"/></f></get_isBuffering>
		<get_id3 set="method" line="253"><f a=""><c path="flash.media.ID3Info"/></f></get_id3>
		<__onError set="method" line="237">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onError>
		<__checkLoading set="method" line="210">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__checkLoading>
		<play public="1" set="method" line="170"><f a="?startTime:?loops:?soundTransform">
	<x path="Float"/>
	<x path="Int"/>
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundChannel"/>
</f></play>
		<loadPCMFromByteArray public="1" set="method" line="122"><f a="bytes:samples:?format:?stereo:?sampleRate">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></loadPCMFromByteArray>
		<loadCompressedDataFromByteArray public="1" set="method" line="106"><f a="bytes:length:?forcePlayAsMusic">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></loadCompressedDataFromByteArray>
		<load public="1" set="method" line="83"><f a="stream:?context:?forcePlayAsMusic">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></load>
		<close public="1" set="method" line="69"><f a=""><x path="Void"/></f></close>
		<addEventListener public="1" set="method" line="49" override="1"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="flash.events.Function"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<__dynamicSound>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__dynamicSound>
		<__loading>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__loading>
		<__handle>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__handle>
		<url public="1" set="null"><c path="String"/></url>
		<length public="1" get="accessor" set="null"><x path="Float"/></length>
		<isBuffering public="1" get="accessor" set="null"><x path="Bool"/></isBuffering>
		<id3 public="1" get="accessor" set="null"><c path="flash.media.ID3Info"/></id3>
		<bytesTotal public="1" set="null"><x path="Int"/></bytesTotal>
		<bytesLoaded public="1" set="null"><x path="Int"/></bytesLoaded>
		<new public="1" set="method" line="31"><f a="?stream:?context:?forcePlayAsMusic">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":autoBuild"><e>'???'</e></m></meta>
	</class>
	<class path="flash.media.SoundChannel" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/media/SoundChannel.hx">
		<extends path="flash.events.EventDispatcher"/>
		<__dynamicSoundCount public="1" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__dynamicSoundCount>
		<__incompleteList line="19" static="1">
			<c path="Array"><c path="flash.media.SoundChannel"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__incompleteList>
		<createDynamic public="1" set="method" line="51" static="1"><f a="handle:soundTransform:dataProvider">
	<d/>
	<c path="flash.media.SoundTransform"/>
	<c path="flash.events.EventDispatcher"/>
	<c path="flash.media.SoundChannel"/>
</f></createDynamic>
		<__completePending public="1" set="method" line="115" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__completePending>
		<__pollComplete public="1" set="method" line="122" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__pollComplete>
		<nme_sound_channel_is_complete line="188" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_sound_channel_is_complete>
		<nme_sound_channel_get_left line="189" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_sound_channel_get_left>
		<nme_sound_channel_get_right line="190" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_sound_channel_get_right>
		<nme_sound_channel_get_position line="191" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_sound_channel_get_position>
		<nme_sound_channel_set_position line="192" static="1"><f a=":">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
</f></nme_sound_channel_set_position>
		<nme_sound_channel_get_data_position line="193" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_sound_channel_get_data_position>
		<nme_sound_channel_stop line="194" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_sound_channel_stop>
		<nme_sound_channel_create line="195" static="1"><f a=":::">
	<d/>
	<x path="Float"/>
	<x path="Int"/>
	<c path="flash.media.SoundTransform"/>
	<unknown/>
</f></nme_sound_channel_create>
		<nme_sound_channel_set_transform line="196" static="1"><f a=":">
	<d/>
	<c path="flash.media.SoundTransform"/>
	<unknown/>
</f></nme_sound_channel_set_transform>
		<nme_sound_channel_needs_data line="197" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_sound_channel_needs_data>
		<nme_sound_channel_add_data line="198" static="1"><f a=":">
	<d/>
	<c path="flash.utils.ByteArray"/>
	<unknown/>
</f></nme_sound_channel_add_data>
		<set_soundTransform set="method" line="171"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<get_soundTransform set="method" line="158"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<set_position set="method" line="155"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<get_position set="method" line="154"><f a=""><x path="Float"/></f></get_position>
		<get_rightPeak set="method" line="153"><f a=""><x path="Float"/></f></get_rightPeak>
		<get_leftPeak set="method" line="152"><f a=""><x path="Float"/></f></get_leftPeak>
		<__checkComplete set="method" line="74">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__checkComplete>
		<stop public="1" set="method" line="66"><f a=""><x path="Void"/></f></stop>
		<__dataProvider public="1">
			<c path="flash.events.EventDispatcher"/>
			<meta><m n=":noCompletion"/></meta>
		</__dataProvider>
		<__transform>
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":noCompletion"/></meta>
		</__transform>
		<__handle>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__handle>
		<soundTransform public="1" get="accessor" set="accessor"><c path="flash.media.SoundTransform"/></soundTransform>
		<position public="1" get="accessor" set="accessor"><x path="Float"/></position>
		<rightPeak public="1" get="accessor" set="null"><x path="Float"/></rightPeak>
		<leftPeak public="1" get="accessor" set="null"><x path="Float"/></leftPeak>
		<new public="1" set="method" line="26"><f a="handle:startTime:loops:soundTransform">
	<d/>
	<x path="Float"/>
	<x path="Int"/>
	<c path="flash.media.SoundTransform"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.SoundLoaderContext" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/media/SoundLoaderContext.hx"><new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new></class>
	<class path="flash.media.SoundTransform" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/media/SoundTransform.hx">
		<clone public="1" set="method" line="19"><f a=""><c path="flash.media.SoundTransform"/></f></clone>
		<volume public="1"><x path="Float"/></volume>
		<pan public="1"><x path="Float"/></pan>
		<new public="1" set="method" line="11"><f a="?volume:?pan">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.net.URLLoaderDataFormat" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/net/URLLoaderDataFormat.hx">
		<BINARY/>
		<TEXT/>
		<VARIABLES/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.net.URLRequest" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/net/URLRequest.hx">
		<AUTH_BASIC public="1" get="inline" set="null" line="10" static="1"><x path="Int"/></AUTH_BASIC>
		<AUTH_DIGEST public="1" get="inline" set="null" line="11" static="1"><x path="Int"/></AUTH_DIGEST>
		<AUTH_GSSNEGOTIATE public="1" get="inline" set="null" line="12" static="1"><x path="Int"/></AUTH_GSSNEGOTIATE>
		<AUTH_NTLM public="1" get="inline" set="null" line="13" static="1"><x path="Int"/></AUTH_NTLM>
		<AUTH_DIGEST_IE public="1" get="inline" set="null" line="14" static="1"><x path="Int"/></AUTH_DIGEST_IE>
		<AUTH_DIGEST_ANY public="1" get="inline" set="null" line="15" static="1"><x path="Int"/></AUTH_DIGEST_ANY>
		<__prepare public="1" set="method" line="66">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__prepare>
		<digestAuth public="1" set="method" line="58"><f a="user:password">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></digestAuth>
		<basicAuth public="1" set="method" line="50"><f a="user:password">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></basicAuth>
		<__bytes public="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":noCompletion"/></meta>
		</__bytes>
		<verbose public="1"><x path="Bool"/></verbose>
		<url public="1"><c path="String"/></url>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<method public="1"><c path="String"/></method>
		<data public="1"><d/></data>
		<credentials public="1"><c path="String"/></credentials>
		<cookieString public="1"><c path="String"/></cookieString>
		<contentType public="1"><c path="String"/></contentType>
		<authType public="1"><x path="Int"/></authType>
		<new public="1" set="method" line="30"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/net/URLRequestHeader.hx">
		<value public="1"><c path="String"/></value>
		<name public="1"><c path="String"/></name>
		<new public="1" set="method" line="11"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.URLRequestMethod" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/net/URLRequestMethod.hx">
		<DELETE public="1" get="inline" set="null" line="7" static="1"><c path="String"/></DELETE>
		<GET public="1" get="inline" set="null" line="8" static="1"><c path="String"/></GET>
		<HEAD public="1" get="inline" set="null" line="9" static="1"><c path="String"/></HEAD>
		<OPTIONS public="1" get="inline" set="null" line="10" static="1"><c path="String"/></OPTIONS>
		<POST public="1" get="inline" set="null" line="11" static="1"><c path="String"/></POST>
		<PUT public="1" get="inline" set="null" line="12" static="1"><c path="String"/></PUT>
	</class>
	<class path="flash.net.URLVariables" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/net/URLVariables.hx">
		<toString public="1" set="method" line="49"><f a=""><c path="String"/></f></toString>
		<decode public="1" set="method" line="18"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></decode>
		<new public="1" set="method" line="7"><f a="?encoded">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/system/ApplicationDomain.hx">
		<currentDomain public="1" set="null" line="7" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<hasDefinition public="1" set="method" line="34"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<getDefinition public="1" set="method" line="27"><f a="name">
	<c path="String"/>
	<d/>
</f></getDefinition>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<new public="1" set="method" line="12"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.system.Capabilities" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/system/Capabilities.hx">
		<language public="1" get="accessor" set="null" static="1"><c path="String"/></language>
		<pixelAspectRatio public="1" get="accessor" set="null" static="1"><x path="Float"/></pixelAspectRatio>
		<screenDPI public="1" get="accessor" set="null" static="1"><x path="Float"/></screenDPI>
		<screenResolutions public="1" get="accessor" set="null" static="1"><c path="Array"><c path="Array"><x path="Int"/></c></c></screenResolutions>
		<screenResolutionX public="1" get="accessor" set="null" static="1"><x path="Float"/></screenResolutionX>
		<screenResolutionY public="1" get="accessor" set="null" static="1"><x path="Float"/></screenResolutionY>
		<get_language set="method" line="25" static="1"><f a=""><c path="String"/></f></get_language>
		<get_pixelAspectRatio set="method" line="71" static="1"><f a=""><x path="Float"/></f></get_pixelAspectRatio>
		<get_screenDPI set="method" line="72" static="1"><f a=""><x path="Float"/></f></get_screenDPI>
		<get_screenResolutions set="method" line="75" static="1"><f a=""><c path="Array"><c path="Array"><x path="Int"/></c></c></f></get_screenResolutions>
		<get_screenResolutionX set="method" line="98" static="1"><f a=""><x path="Float"/></f></get_screenResolutionX>
		<get_screenResolutionY set="method" line="99" static="1"><f a=""><x path="Float"/></f></get_screenResolutionY>
		<nme_capabilities_get_pixel_aspect_ratio line="109" static="1"><f a=""><x path="Float"/></f></nme_capabilities_get_pixel_aspect_ratio>
		<nme_capabilities_get_screen_dpi line="110" static="1"><f a=""><x path="Float"/></f></nme_capabilities_get_screen_dpi>
		<nme_capabilities_get_screen_resolution_x line="111" static="1"><f a=""><x path="Float"/></f></nme_capabilities_get_screen_resolution_x>
		<nme_capabilities_get_screen_resolution_y line="112" static="1"><f a=""><x path="Float"/></f></nme_capabilities_get_screen_resolution_y>
		<nme_capabilities_get_screen_resolutions line="113" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></nme_capabilities_get_screen_resolutions>
		<nme_capabilities_get_language line="114" static="1"><f a=""><c path="String"/></f></nme_capabilities_get_language>
	</class>
	<class path="flash.system.LoaderContext" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/system/LoaderContext.hx">
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<allowLoadBytesCodeExecution public="1"><x path="Bool"/></allowLoadBytesCodeExecution>
		<allowCodeImport public="1"><x path="Bool"/></allowCodeImport>
		<new public="1" set="method" line="14"><f a="?checkPolicyFile:?applicationDomain:?securityDomain">
	<x path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/system/SecurityDomain.hx">
		<currentDomain public="1" set="null" line="7" static="1"><c path="flash.system.SecurityDomain"/></currentDomain>
		<new set="method" line="10"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.AntiAliasType" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/AntiAliasType.hx">
		<ADVANCED/>
		<NORMAL/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.text.Font" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/Font.hx">
		<__registeredFonts line="18" static="1">
			<c path="Array"><c path="flash.text.Font"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__registeredFonts>
		<__deviceFonts static="1">
			<c path="Array"><c path="flash.text.Font"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__deviceFonts>
		<enumerateFonts public="1" set="method" line="74" static="1"><f a="?enumerateDeviceFonts">
	<x path="Bool"/>
	<c path="Array"><c path="flash.text.Font"/></c>
</f></enumerateFonts>
		<load public="1" set="method" line="97" static="1"><f a="filename">
	<c path="String"/>
	<t path="flash.text.NativeFontData"/>
</f></load>
		<loadBytes public="1" set="method" line="105" static="1"><f a="bytes">
	<c path="flash.utils.ByteArray"/>
	<t path="flash.text.NativeFontData"/>
</f></loadBytes>
		<registerFont public="1" set="method" line="113" static="1"><f a="font">
	<x path="Class"><c path="flash.text.Font"/></x>
	<x path="Void"/>
</f></registerFont>
		<freetype_import_font line="146" static="1"><f a=":::">
	<c path="String"/>
	<unknown/>
	<x path="Int"/>
	<c path="flash.utils.ByteArray"/>
	<t path="flash.text.NativeFontData"/>
</f></freetype_import_font>
		<nme_font_register_font line="147" static="1"><f a=":">
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
	<unknown/>
</f></nme_font_register_font>
		<nme_font_iterate_device_fonts line="148" static="1"><f a="">
	<f a="name:style">
		<c path="String"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<unknown/>
</f></nme_font_iterate_device_fonts>
		<toString public="1" set="method" line="132"><f a=""><c path="String"/></f></toString>
		<fontType public="1" set="null"><e path="flash.text.FontType"/></fontType>
		<fontStyle public="1" set="null"><e path="flash.text.FontStyle"/></fontStyle>
		<fontName public="1" set="null"><c path="String"/></fontName>
		<new public="1" set="method" line="22"><f a="?filename:?style:?type">
	<c path="String"/>
	<e path="flash.text.FontStyle"/>
	<e path="flash.text.FontType"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":autoBuild"><e>'???'</e></m></meta>
	</class>
	<typedef path="flash.text.NativeFontData" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/Font.hx" module="flash.text.Font"><a>
	<style_name><c path="String"/></style_name>
	<num_glyphs><x path="Int"/></num_glyphs>
	<kerning><c path="Array"><t path="flash.text.NativeKerningData"/></c></kerning>
	<is_italic><x path="Bool"/></is_italic>
	<is_fixed_width><x path="Bool"/></is_fixed_width>
	<is_bold><x path="Bool"/></is_bold>
	<height><x path="Int"/></height>
	<has_kerning><x path="Bool"/></has_kerning>
	<has_glyph_names><x path="Bool"/></has_glyph_names>
	<glyphs><c path="Array"><t path="flash.text.NativeGlyphData"/></c></glyphs>
	<family_name><c path="String"/></family_name>
	<em_size><x path="Int"/></em_size>
	<descend><x path="Int"/></descend>
	<ascend><x path="Int"/></ascend>
</a></typedef>
	<typedef path="flash.text.NativeGlyphData" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/Font.hx" module="flash.text.Font"><a>
	<points><c path="Array"><x path="Int"/></c></points>
	<min_y><x path="Int"/></min_y>
	<min_x><x path="Int"/></min_x>
	<max_y><x path="Int"/></max_y>
	<max_x><x path="Int"/></max_x>
	<char_code><x path="Int"/></char_code>
	<advance><x path="Int"/></advance>
</a></typedef>
	<typedef path="flash.text.NativeKerningData" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/Font.hx" module="flash.text.Font"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<right_glyph><x path="Int"/></right_glyph>
	<left_glyph><x path="Int"/></left_glyph>
</a></typedef>
	<enum path="flash.text.FontStyle" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/FontStyle.hx">
		<BOLD/>
		<BOLD_ITALIC/>
		<ITALIC/>
		<REGULAR/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.FontType" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/FontType.hx">
		<DEVICE/>
		<EMBEDDED/>
		<EMBEDDED_CFF/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/GridFitType.hx">
		<NONE/>
		<PIXEL/>
		<SUBPIXEL/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.text.TextField" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/TextField.hx">
		<extends path="flash.display.InteractiveObject"/>
		<nme_text_field_create line="160" static="1"><f a=""><unknown/></f></nme_text_field_create>
		<nme_text_field_get_text line="161" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_text_field_get_text>
		<nme_text_field_set_text line="162" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></nme_text_field_set_text>
		<nme_text_field_get_html_text line="163" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_text_field_get_html_text>
		<nme_text_field_set_html_text line="164" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></nme_text_field_set_html_text>
		<nme_text_field_get_text_color line="165" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_text_color>
		<nme_text_field_set_text_color line="166" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_text_field_set_text_color>
		<nme_text_field_get_selectable line="167" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_text_field_get_selectable>
		<nme_text_field_set_selectable line="168" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_text_field_set_selectable>
		<nme_text_field_get_display_as_password line="169" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_text_field_get_display_as_password>
		<nme_text_field_set_display_as_password line="170" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_text_field_set_display_as_password>
		<nme_text_field_get_def_text_format line="171" static="1"><f a=":">
	<d/>
	<c path="flash.text.TextFormat"/>
	<unknown/>
</f></nme_text_field_get_def_text_format>
		<nme_text_field_set_def_text_format line="172" static="1"><f a=":">
	<d/>
	<c path="flash.text.TextFormat"/>
	<unknown/>
</f></nme_text_field_set_def_text_format>
		<nme_text_field_get_auto_size line="173" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_auto_size>
		<nme_text_field_set_auto_size line="174" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_text_field_set_auto_size>
		<nme_text_field_get_type line="175" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_text_field_get_type>
		<nme_text_field_set_type line="176" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_text_field_set_type>
		<nme_text_field_get_multiline line="177" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_text_field_get_multiline>
		<nme_text_field_set_multiline line="178" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_text_field_set_multiline>
		<nme_text_field_get_word_wrap line="179" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_text_field_get_word_wrap>
		<nme_text_field_set_word_wrap line="180" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_text_field_set_word_wrap>
		<nme_text_field_get_border line="181" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_text_field_get_border>
		<nme_text_field_set_border line="182" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_text_field_set_border>
		<nme_text_field_get_border_color line="183" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_border_color>
		<nme_text_field_set_border_color line="184" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_text_field_set_border_color>
		<nme_text_field_get_background line="185" static="1"><f a="">
	<d/>
	<x path="Bool"/>
</f></nme_text_field_get_background>
		<nme_text_field_set_background line="186" static="1"><f a=":">
	<d/>
	<x path="Bool"/>
	<unknown/>
</f></nme_text_field_set_background>
		<nme_text_field_get_background_color line="187" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_background_color>
		<nme_text_field_set_background_color line="188" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_text_field_set_background_color>
		<nme_text_field_get_text_width line="189" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_text_field_get_text_width>
		<nme_text_field_get_text_height line="190" static="1"><f a="">
	<d/>
	<x path="Float"/>
</f></nme_text_field_get_text_height>
		<nme_text_field_get_text_format line="191" static="1"><f a=":::">
	<d/>
	<c path="flash.text.TextFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_text_field_get_text_format>
		<nme_text_field_set_text_format line="192" static="1"><f a=":::">
	<d/>
	<c path="flash.text.TextFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_text_field_set_text_format>
		<nme_text_field_get_max_scroll_v line="193" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_max_scroll_v>
		<nme_text_field_get_max_scroll_h line="194" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_max_scroll_h>
		<nme_text_field_get_bottom_scroll_v line="195" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_bottom_scroll_v>
		<nme_text_field_get_scroll_h line="196" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_scroll_h>
		<nme_text_field_set_scroll_h line="197" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_text_field_set_scroll_h>
		<nme_text_field_get_scroll_v line="198" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_scroll_v>
		<nme_text_field_set_scroll_v line="199" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_text_field_set_scroll_v>
		<nme_text_field_get_num_lines line="200" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_num_lines>
		<nme_text_field_get_max_chars line="201" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></nme_text_field_get_max_chars>
		<nme_text_field_set_max_chars line="202" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<unknown/>
</f></nme_text_field_set_max_chars>
		<nme_text_field_get_line_text line="203" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<c path="String"/>
</f></nme_text_field_get_line_text>
		<nme_text_field_get_line_metrics line="204" static="1"><f a="::">
	<d/>
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
	<unknown/>
</f></nme_text_field_get_line_metrics>
		<nme_text_field_get_line_offset line="205" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></nme_text_field_get_line_offset>
		<set_wordWrap set="method" line="150"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_wordWrap>
		<get_wordWrap set="method" line="149"><f a=""><x path="Bool"/></f></get_wordWrap>
		<set_type set="method" line="148"><f a="value">
	<e path="flash.text.TextFieldType"/>
	<e path="flash.text.TextFieldType"/>
</f></set_type>
		<get_type set="method" line="147"><f a=""><e path="flash.text.TextFieldType"/></f></get_type>
		<get_textHeight set="method" line="146"><f a=""><x path="Float"/></f></get_textHeight>
		<get_textWidth set="method" line="145"><f a=""><x path="Float"/></f></get_textWidth>
		<set_textColor set="method" line="144"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_textColor>
		<get_textColor set="method" line="143"><f a=""><x path="Int"/></f></get_textColor>
		<set_text set="method" line="142"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_text set="method" line="141"><f a=""><c path="String"/></f></get_text>
		<set_selectable set="method" line="140"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selectable>
		<get_selectable set="method" line="139"><f a=""><x path="Bool"/></f></get_selectable>
		<set_scrollV set="method" line="138"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_scrollV>
		<get_scrollV set="method" line="137"><f a=""><x path="Int"/></f></get_scrollV>
		<set_scrollH set="method" line="136"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_scrollH>
		<get_scrollH set="method" line="135"><f a=""><x path="Int"/></f></get_scrollH>
		<get_numLines set="method" line="134"><f a=""><x path="Int"/></f></get_numLines>
		<set_multiline set="method" line="133"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multiline>
		<get_multiline set="method" line="132"><f a=""><x path="Bool"/></f></get_multiline>
		<get_maxScrollV set="method" line="131"><f a=""><x path="Int"/></f></get_maxScrollV>
		<get_maxScrollH set="method" line="130"><f a=""><x path="Int"/></f></get_maxScrollH>
		<set_maxChars set="method" line="129"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxChars>
		<get_maxChars set="method" line="128"><f a=""><x path="Int"/></f></get_maxChars>
		<set_htmlText set="method" line="127"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_htmlText>
		<get_htmlText set="method" line="126"><f a=""><c path="String"/></f></get_htmlText>
		<set_embedFonts set="method" line="125"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_embedFonts>
		<get_embedFonts set="method" line="124"><f a=""><x path="Bool"/></f></get_embedFonts>
		<set_displayAsPassword set="method" line="123"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_displayAsPassword>
		<get_displayAsPassword set="method" line="122"><f a=""><x path="Bool"/></f></get_displayAsPassword>
		<set_defaultTextFormat set="method" line="121"><f a="value">
	<c path="flash.text.TextFormat"/>
	<c path="flash.text.TextFormat"/>
</f></set_defaultTextFormat>
		<get_defaultTextFormat set="method" line="120"><f a=""><c path="flash.text.TextFormat"/></f></get_defaultTextFormat>
		<get_bottomScrollV set="method" line="119"><f a=""><x path="Int"/></f></get_bottomScrollV>
		<set_borderColor set="method" line="118"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_borderColor>
		<get_borderColor set="method" line="117"><f a=""><x path="Int"/></f></get_borderColor>
		<set_border set="method" line="116"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_border>
		<get_border set="method" line="115"><f a=""><x path="Bool"/></f></get_border>
		<set_backgroundColor set="method" line="114"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_backgroundColor>
		<get_backgroundColor set="method" line="113"><f a=""><x path="Int"/></f></get_backgroundColor>
		<set_background set="method" line="112"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_background>
		<get_background set="method" line="111"><f a=""><x path="Bool"/></f></get_background>
		<set_autoSize set="method" line="110"><f a="value">
	<e path="flash.text.TextFieldAutoSize"/>
	<e path="flash.text.TextFieldAutoSize"/>
</f></set_autoSize>
		<get_autoSize set="method" line="109"><f a=""><e path="flash.text.TextFieldAutoSize"/></f></get_autoSize>
		<setTextFormat public="1" set="method" line="96"><f a="format:?beginIndex:?endIndex">
	<c path="flash.text.TextFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setTextFormat>
		<setSelection public="1" set="method" line="89"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<getTextFormat public="1" set="method" line="80"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.TextFormat"/>
</f></getTextFormat>
		<getLineMetrics public="1" set="method" line="71"><f a="lineIndex">
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineText public="1" set="method" line="64"><f a="lineIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getLineOffset public="1" set="method" line="57"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineOffset>
		<appendText public="1" set="method" line="50"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></appendText>
		<wordWrap public="1" get="accessor" set="accessor"><x path="Bool"/></wordWrap>
		<type public="1" get="accessor" set="accessor"><e path="flash.text.TextFieldType"/></type>
		<textWidth public="1" get="accessor" set="null"><x path="Float"/></textWidth>
		<textHeight public="1" get="accessor" set="null"><x path="Float"/></textHeight>
		<textColor public="1" get="accessor" set="accessor"><x path="Int"/></textColor>
		<text public="1" get="accessor" set="accessor"><c path="String"/></text>
		<sharpness public="1"><x path="Float"/></sharpness>
		<selectable public="1" get="accessor" set="accessor"><x path="Bool"/></selectable>
		<scrollV public="1" get="accessor" set="accessor"><x path="Int"/></scrollV>
		<scrollH public="1" get="accessor" set="accessor"><x path="Int"/></scrollH>
		<numLines public="1" get="accessor" set="null"><x path="Int"/></numLines>
		<multiline public="1" get="accessor" set="accessor"><x path="Bool"/></multiline>
		<maxScrollV public="1" get="accessor" set="null"><x path="Int"/></maxScrollV>
		<maxScrollH public="1" get="accessor" set="null"><x path="Int"/></maxScrollH>
		<maxChars public="1" get="accessor" set="accessor"><x path="Int"/></maxChars>
		<htmlText public="1" get="accessor" set="accessor"><c path="String"/></htmlText>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<embedFonts public="1" get="accessor" set="accessor"><x path="Bool"/></embedFonts>
		<displayAsPassword public="1" get="accessor" set="accessor"><x path="Bool"/></displayAsPassword>
		<defaultTextFormat public="1" get="accessor" set="accessor"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<bottomScrollV public="1" get="accessor" set="null"><x path="Int"/></bottomScrollV>
		<borderColor public="1" get="accessor" set="accessor"><x path="Int"/></borderColor>
		<border public="1" get="accessor" set="accessor"><x path="Bool"/></border>
		<backgroundColor public="1" get="accessor" set="accessor"><x path="Int"/></backgroundColor>
		<background public="1" get="accessor" set="accessor"><x path="Bool"/></background>
		<autoSize public="1" get="accessor" set="accessor"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<new public="1" set="method" line="40"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/TextFieldAutoSize.hx">
		<CENTER/>
		<LEFT/>
		<NONE/>
		<RIGHT/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/TextFieldType.hx">
		<DYNAMIC/>
		<INPUT/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/TextFormat.hx">
		<url public="1"><c path="String"/></url>
		<underline public="1"><t path="Null"><x path="Bool"/></t></underline>
		<target public="1"><c path="String"/></target>
		<tabStops public="1"><c path="Array"><x path="Int"/></c></tabStops>
		<size public="1"><t path="Null"><x path="Float"/></t></size>
		<rightMargin public="1"><t path="Null"><x path="Float"/></t></rightMargin>
		<letterSpacing public="1"><t path="Null"><x path="Float"/></t></letterSpacing>
		<leftMargin public="1"><t path="Null"><x path="Float"/></t></leftMargin>
		<leading public="1"><t path="Null"><x path="Float"/></t></leading>
		<kerning public="1"><t path="Null"><x path="Float"/></t></kerning>
		<italic public="1"><t path="Null"><x path="Bool"/></t></italic>
		<indent public="1"><t path="Null"><x path="Float"/></t></indent>
		<font public="1"><c path="String"/></font>
		<display public="1"><c path="String"/></display>
		<color public="1"><t path="Null"><x path="Int"/></t></color>
		<bullet public="1"><t path="Null"><x path="Bool"/></t></bullet>
		<bold public="1"><t path="Null"><x path="Bool"/></t></bold>
		<blockIndent public="1"><t path="Null"><x path="Float"/></t></blockIndent>
		<align public="1"><c path="String"/></align>
		<new public="1" set="method" line="28"><f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextFormatAlign" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/TextFormatAlign.hx">
		<LEFT public="1" line="6" static="1"><c path="String"/></LEFT>
		<RIGHT public="1" line="7" static="1"><c path="String"/></RIGHT>
		<CENTER public="1" line="8" static="1"><c path="String"/></CENTER>
		<JUSTIFY public="1" line="9" static="1"><c path="String"/></JUSTIFY>
	</class>
	<class path="flash.text.TextLineMetrics" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/text/TextLineMetrics.hx">
		<x public="1"><x path="Float"/></x>
		<width public="1"><x path="Float"/></width>
		<leading public="1"><x path="Float"/></leading>
		<height public="1"><x path="Float"/></height>
		<descent public="1"><x path="Float"/></descent>
		<ascent public="1"><x path="Float"/></ascent>
		<new public="1" set="method" line="15"><f a="?x:?width:?height:?ascent:?descent:?leading">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.ui.Keyboard" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/ui/Keyboard.hx">
		<A public="1" line="7" static="1"><x path="Int"/></A>
		<B public="1" line="8" static="1"><x path="Int"/></B>
		<C public="1" line="9" static="1"><x path="Int"/></C>
		<D public="1" line="10" static="1"><x path="Int"/></D>
		<E public="1" line="11" static="1"><x path="Int"/></E>
		<F public="1" line="12" static="1"><x path="Int"/></F>
		<G public="1" line="13" static="1"><x path="Int"/></G>
		<H public="1" line="14" static="1"><x path="Int"/></H>
		<I public="1" line="15" static="1"><x path="Int"/></I>
		<J public="1" line="16" static="1"><x path="Int"/></J>
		<K public="1" line="17" static="1"><x path="Int"/></K>
		<L public="1" line="18" static="1"><x path="Int"/></L>
		<M public="1" line="19" static="1"><x path="Int"/></M>
		<N public="1" line="20" static="1"><x path="Int"/></N>
		<O public="1" line="21" static="1"><x path="Int"/></O>
		<P public="1" line="22" static="1"><x path="Int"/></P>
		<Q public="1" line="23" static="1"><x path="Int"/></Q>
		<R public="1" line="24" static="1"><x path="Int"/></R>
		<S public="1" line="25" static="1"><x path="Int"/></S>
		<T public="1" line="26" static="1"><x path="Int"/></T>
		<U public="1" line="27" static="1"><x path="Int"/></U>
		<V public="1" line="28" static="1"><x path="Int"/></V>
		<W public="1" line="29" static="1"><x path="Int"/></W>
		<X public="1" line="30" static="1"><x path="Int"/></X>
		<Y public="1" line="31" static="1"><x path="Int"/></Y>
		<Z public="1" line="32" static="1"><x path="Int"/></Z>
		<ALTERNATE public="1" line="34" static="1"><x path="Int"/></ALTERNATE>
		<BACKQUOTE public="1" line="35" static="1"><x path="Int"/></BACKQUOTE>
		<BACKSLASH public="1" line="36" static="1"><x path="Int"/></BACKSLASH>
		<BACKSPACE public="1" line="37" static="1"><x path="Int"/></BACKSPACE>
		<CAPS_LOCK public="1" line="38" static="1"><x path="Int"/></CAPS_LOCK>
		<COMMA public="1" line="39" static="1"><x path="Int"/></COMMA>
		<COMMAND public="1" line="40" static="1"><x path="Int"/></COMMAND>
		<CONTROL public="1" line="41" static="1"><x path="Int"/></CONTROL>
		<DELETE public="1" line="42" static="1"><x path="Int"/></DELETE>
		<DOWN public="1" line="43" static="1"><x path="Int"/></DOWN>
		<END public="1" line="44" static="1"><x path="Int"/></END>
		<ENTER public="1" line="45" static="1"><x path="Int"/></ENTER>
		<EQUAL public="1" line="46" static="1"><x path="Int"/></EQUAL>
		<ESCAPE public="1" line="47" static="1"><x path="Int"/></ESCAPE>
		<F1 public="1" line="48" static="1"><x path="Int"/></F1>
		<F2 public="1" line="49" static="1"><x path="Int"/></F2>
		<F3 public="1" line="50" static="1"><x path="Int"/></F3>
		<F4 public="1" line="51" static="1"><x path="Int"/></F4>
		<F5 public="1" line="52" static="1"><x path="Int"/></F5>
		<F6 public="1" line="53" static="1"><x path="Int"/></F6>
		<F7 public="1" line="54" static="1"><x path="Int"/></F7>
		<F8 public="1" line="55" static="1"><x path="Int"/></F8>
		<F9 public="1" line="56" static="1"><x path="Int"/></F9>
		<F10 public="1" line="57" static="1"><x path="Int"/></F10>
		<F11 public="1" line="58" static="1"><x path="Int"/></F11>
		<F12 public="1" line="59" static="1"><x path="Int"/></F12>
		<F13 public="1" line="60" static="1"><x path="Int"/></F13>
		<F14 public="1" line="61" static="1"><x path="Int"/></F14>
		<F15 public="1" line="62" static="1"><x path="Int"/></F15>
		<HOME public="1" line="63" static="1"><x path="Int"/></HOME>
		<INSERT public="1" line="64" static="1"><x path="Int"/></INSERT>
		<LEFT public="1" line="65" static="1"><x path="Int"/></LEFT>
		<LEFTBRACKET public="1" line="66" static="1"><x path="Int"/></LEFTBRACKET>
		<MINUS public="1" line="67" static="1"><x path="Int"/></MINUS>
		<NUMBER_0 public="1" line="68" static="1"><x path="Int"/></NUMBER_0>
		<NUMBER_1 public="1" line="69" static="1"><x path="Int"/></NUMBER_1>
		<NUMBER_2 public="1" line="70" static="1"><x path="Int"/></NUMBER_2>
		<NUMBER_3 public="1" line="71" static="1"><x path="Int"/></NUMBER_3>
		<NUMBER_4 public="1" line="72" static="1"><x path="Int"/></NUMBER_4>
		<NUMBER_5 public="1" line="73" static="1"><x path="Int"/></NUMBER_5>
		<NUMBER_6 public="1" line="74" static="1"><x path="Int"/></NUMBER_6>
		<NUMBER_7 public="1" line="75" static="1"><x path="Int"/></NUMBER_7>
		<NUMBER_8 public="1" line="76" static="1"><x path="Int"/></NUMBER_8>
		<NUMBER_9 public="1" line="77" static="1"><x path="Int"/></NUMBER_9>
		<NUMPAD public="1" line="78" static="1"><x path="Int"/></NUMPAD>
		<NUMPAD_0 public="1" line="79" static="1"><x path="Int"/></NUMPAD_0>
		<NUMPAD_1 public="1" line="80" static="1"><x path="Int"/></NUMPAD_1>
		<NUMPAD_2 public="1" line="81" static="1"><x path="Int"/></NUMPAD_2>
		<NUMPAD_3 public="1" line="82" static="1"><x path="Int"/></NUMPAD_3>
		<NUMPAD_4 public="1" line="83" static="1"><x path="Int"/></NUMPAD_4>
		<NUMPAD_5 public="1" line="84" static="1"><x path="Int"/></NUMPAD_5>
		<NUMPAD_6 public="1" line="85" static="1"><x path="Int"/></NUMPAD_6>
		<NUMPAD_7 public="1" line="86" static="1"><x path="Int"/></NUMPAD_7>
		<NUMPAD_8 public="1" line="87" static="1"><x path="Int"/></NUMPAD_8>
		<NUMPAD_9 public="1" line="88" static="1"><x path="Int"/></NUMPAD_9>
		<NUMPAD_ADD public="1" line="89" static="1"><x path="Int"/></NUMPAD_ADD>
		<NUMPAD_DECIMAL public="1" line="90" static="1"><x path="Int"/></NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE public="1" line="91" static="1"><x path="Int"/></NUMPAD_DIVIDE>
		<NUMPAD_ENTER public="1" line="92" static="1"><x path="Int"/></NUMPAD_ENTER>
		<NUMPAD_MULTIPLY public="1" line="93" static="1"><x path="Int"/></NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT public="1" line="94" static="1"><x path="Int"/></NUMPAD_SUBTRACT>
		<PAGE_DOWN public="1" line="95" static="1"><x path="Int"/></PAGE_DOWN>
		<PAGE_UP public="1" line="96" static="1"><x path="Int"/></PAGE_UP>
		<PERIOD public="1" line="97" static="1"><x path="Int"/></PERIOD>
		<QUOTE public="1" line="98" static="1"><x path="Int"/></QUOTE>
		<RIGHT public="1" line="99" static="1"><x path="Int"/></RIGHT>
		<RIGHTBRACKET public="1" line="100" static="1"><x path="Int"/></RIGHTBRACKET>
		<SEMICOLON public="1" line="101" static="1"><x path="Int"/></SEMICOLON>
		<SHIFT public="1" line="102" static="1"><x path="Int"/></SHIFT>
		<SLASH public="1" line="103" static="1"><x path="Int"/></SLASH>
		<SPACE public="1" line="104" static="1"><x path="Int"/></SPACE>
		<TAB public="1" line="105" static="1"><x path="Int"/></TAB>
		<UP public="1" line="106" static="1"><x path="Int"/></UP>
	</class>
	<class path="flash.ui.Mouse" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/ui/Mouse.hx">
		<hide public="1" set="method" line="10" static="1"><f a=""><x path="Void"/></f></hide>
		<show public="1" set="method" line="21" static="1"><f a=""><x path="Void"/></f></show>
	</class>
	<class path="flash.utils.IDataOutput" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/utils/IDataOutput.hx" interface="1">
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeBytes>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<endian public="1" get="null" set="null"><c path="String"/></endian>
	</class>
	<class path="openfl.utils.IMemoryRange" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/openfl/utils/IMemoryRange.hx" interface="1">
		<getLength public="1" set="method"><f a=""><x path="Int"/></f></getLength>
		<getStart public="1" set="method"><f a=""><x path="Int"/></f></getStart>
		<getByteBuffer public="1" set="method"><f a=""><c path="flash.utils.ByteArray"/></f></getByteBuffer>
	</class>
	<class path="flash.utils.IDataInput" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/utils/IDataInput.hx" interface="1">
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUnsignedShort public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readUnsignedInt public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedInt>
		<readUnsignedByte public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readBytes public="1" set="method"><f a="data:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBytes>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<endian public="1" get="null" set="null"><c path="String"/></endian>
		<bytesAvailable public="1" get="null" set="null"><x path="Int"/></bytesAvailable>
	</class>
	<class path="flash.utils.ByteArray" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/utils/ByteArray.hx">
		<extends path="haxe.io.Bytes"/>
		<implements path="flash.utils.IDataOutput"/>
		<implements path="openfl.utils.IMemoryRange"/>
		<implements path="flash.utils.IDataInput"/>
		<fromBytes public="1" set="method" line="179" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="flash.utils.ByteArray"/>
</f></fromBytes>
		<readFile public="1" set="method" line="291" static="1"><f a="path">
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
</f></readFile>
		<_double_bytes line="760" static="1"><f a=":">
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_double_bytes>
		<_double_of_bytes line="761" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></_double_of_bytes>
		<_float_bytes line="762" static="1"><f a=":">
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_float_bytes>
		<_float_of_bytes line="763" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></_float_of_bytes>
		<nme_byte_array_overwrite_file line="765" static="1"><f a=":">
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
	<unknown/>
</f></nme_byte_array_overwrite_file>
		<nme_byte_array_read_file line="766" static="1"><f a="">
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
</f></nme_byte_array_read_file>
		<nme_lzma_encode line="768" static="1"><f a="">
	<t path="haxe.io.BytesData"/>
	<t path="haxe.io.BytesData"/>
</f></nme_lzma_encode>
		<nme_lzma_decode line="769" static="1"><f a="">
	<t path="haxe.io.BytesData"/>
	<t path="haxe.io.BytesData"/>
</f></nme_lzma_decode>
		<set_endian set="method" line="750"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_endian>
		<get_endian set="method" line="749"><f a=""><c path="String"/></f></get_endian>
		<get_byteLength set="method" line="748"><f a=""><x path="Int"/></f></get_byteLength>
		<get_bytesAvailable set="method" line="747"><f a=""><x path="Int"/></f></get_bytesAvailable>
		<__throwEOFi set="method" line="732">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__throwEOFi>
		<__set public="1" get="inline" set="null" line="721">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<__get public="1" get="inline" set="null" line="682">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__fromBytes get="inline" set="null" line="670">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__fromBytes>
		<writeUTFBytes public="1" set="method" line="657"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUTF public="1" set="method" line="643"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUnsignedInt public="1" set="method" line="636"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<writeShort public="1" set="method" line="617"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeInt public="1" set="method" line="594"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeFloat public="1" set="method" line="581"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeFile public="1" set="method" line="572"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></writeFile>
		<writeDouble public="1" set="method" line="557"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method" line="546"><f a="bytes:?offset:?length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeBytes>
		<writeByte public="1" get="inline" set="null" line="533"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBoolean public="1" set="method" line="526"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<write_uncheck get="inline" set="null" line="515"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></write_uncheck>
		<uncompress public="1" set="method" line="471"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<slice public="1" set="method" line="423"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.utils.ByteArray"/>
</f></slice>
		<setLength public="1" set="method" line="410"><f a="length">
	<x path="Int"/>
	<x path="Void"/>
</f></setLength>
		<readUTFBytes public="1" set="method" line="388"><f a="length">
	<x path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUTF public="1" set="method" line="380"><f a=""><c path="String"/></f></readUTF>
		<readUnsignedShort public="1" set="method" line="370"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readUnsignedInt public="1" set="method" line="358"><f a=""><x path="Int"/></f></readUnsignedInt>
		<readUnsignedByte public="1" get="inline" set="null" line="351"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readShort public="1" set="method" line="339"><f a=""><x path="Int"/></f></readShort>
		<readMultiByte public="1" get="inline" set="null" line="332"><f a="length:charSet">
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readInt public="1" set="method" line="320"><f a=""><x path="Int"/></f></readInt>
		<readFloat public="1" set="method" line="300"><f a=""><x path="Float"/></f></readFloat>
		<readDouble public="1" set="method" line="269"><f a=""><x path="Float"/></f></readDouble>
		<readBytes public="1" set="method" line="231"><f a="data:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBytes>
		<readByte public="1" get="inline" set="null" line="223"><f a=""><x path="Int"/></f></readByte>
		<readBoolean public="1" get="inline" set="null" line="216"><f a=""><x path="Bool"/></f></readBoolean>
		<inflate public="1" set="method" line="209"><f a=""><x path="Void"/></f></inflate>
		<getStart public="1" set="method" line="202"><f a=""><x path="Int"/></f></getStart>
		<getLength public="1" set="method" line="195"><f a=""><x path="Int"/></f></getLength>
		<getByteBuffer public="1" set="method" line="188"><f a=""><c path="flash.utils.ByteArray"/></f></getByteBuffer>
		<ensureElem set="method" line="150"><f a="size:updateLength">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></ensureElem>
		<deflate public="1" set="method" line="143"><f a=""><x path="Void"/></f></deflate>
		<compress public="1" set="method" line="95"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<clear public="1" set="method" line="87"><f a=""><x path="Void"/></f></clear>
		<checkData public="1" set="method" line="76"><f a="length">
	<x path="Int"/>
	<x path="Void"/>
</f></checkData>
		<asString public="1" set="method" line="69"><f a=""><c path="String"/></f></asString>
		<byteLength public="1" get="accessor" set="null"><x path="Int"/></byteLength>
		<position public="1"><x path="Int"/></position>
		<endian public="1" get="accessor" set="accessor"><c path="String"/></endian>
		<bytesAvailable public="1" get="accessor" set="null"><x path="Int"/></bytesAvailable>
		<bigEndian public="1"><x path="Bool"/></bigEndian>
		<new public="1" set="method" line="37"><f a="?size">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":autoBuild"><e>'???'</e></m></meta>
	</class>
	<enum path="flash.utils.CompressionAlgorithm" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/utils/CompressionAlgorithm.hx">
		<DEFLATE/>
		<ZLIB/>
		<LZMA/>
		<GZIP/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.utils.Endian" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/utils/Endian.hx">
		<BIG_ENDIAN public="1" get="inline" set="null" line="6" static="1"><c path="String"/></BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" get="inline" set="null" line="7" static="1"><c path="String"/></LITTLE_ENDIAN>
	</class>
	<typedef path="flash.utils.Function" params="" file="C:\Tools\Haxe\haxe/std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.Namespace" params="" file="C:\Tools\Haxe\haxe/std/flash/utils/Namespace.hx" extern="1">
		<uri public="1" set="null"><c path="String"/></uri>
		<prefix public="1" set="null"><d/></prefix>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="flash.utils.Object" params="" file="C:\Tools\Haxe\haxe/std/flash/utils/Object.hx"><d/></typedef>
	<class path="flash.utils.Timer" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/flash/utils/Timer.hx">
		<extends path="flash.events.EventDispatcher"/>
		<timer_onTimer set="method" line="115"><f a=""><x path="Void"/></f></timer_onTimer>
		<set_delay set="method" line="92"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_delay>
		<get_delay set="method" line="85"><f a=""><x path="Float"/></f></get_delay>
		<stop public="1" set="method" line="64"><f a=""><x path="Void"/></f></stop>
		<start public="1" set="method" line="51"><f a=""><x path="Void"/></f></start>
		<reset public="1" set="method" line="38"><f a=""><x path="Void"/></f></reset>
		<__timer>
			<c path="haxe.Timer"/>
			<meta><m n=":noCompletion"/></meta>
		</__timer>
		<__delay>
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</__delay>
		<running public="1"><x path="Bool"/></running>
		<repeatCount public="1"><x path="Int"/></repeatCount>
		<delay public="1" get="accessor" set="accessor"><x path="Float"/></delay>
		<currentCount public="1"><x path="Int"/></currentCount>
		<new public="1" set="method" line="21"><f a="delay:?repeatCount">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XML" params="" file="C:\Tools\Haxe\haxe/std/flash/xml/XML.hx" extern="1">
		<ignoreComments public="1" static="1"><x path="Bool"/></ignoreComments>
		<ignoreProcessingInstructions public="1" static="1"><x path="Bool"/></ignoreProcessingInstructions>
		<ignoreWhitespace public="1" static="1"><x path="Bool"/></ignoreWhitespace>
		<prettyIndent public="1" static="1"><x path="Int"/></prettyIndent>
		<prettyPrinting public="1" static="1"><x path="Bool"/></prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><c path="flash.xml.XMLList"/></haxe_dynamic>
	</class>
	<class path="flash.xml.XMLList" params="" file="C:\Tools\Haxe\haxe/std/flash/xml/XMLList.hx" extern="1">
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="haxe.Function" params="" file="C:\Tools\Haxe\haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.
	
	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\Tools\Haxe\haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="C:\Tools\Haxe\haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.
	
	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\Tools\Haxe\haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Or" params="L:R" file="C:\Tools\Haxe\haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<from>
			<icast><c path="haxe.Or.L"/></icast>
			<icast><c path="haxe.Or.R"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.Or.L"/></icast>
			<icast><c path="haxe.Or.R"/></icast>
		</to>
		<haxe_doc>This type is compatible with both its type parameters.
	
	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.Or_Impl_" params="" file="C:\Tools\Haxe\haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.ObjectMapKey" params="" file="C:\Tools\Haxe\haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<x path="haxe.Or">
			<x path="Class"><d/></x>
			<a/>
		</x>
		<haxe_doc>The types allowed as key to `haxe.ds.ObjectMap`.</haxe_doc>
	</typedef>
	<class path="haxe.EnumTools" params="" file="C:\Tools\Haxe\haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.
		
		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `e` has no package, the enum name is returned.
		
		If `e` is null, the result is unspecified.
		
		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.
		
		This may return the empty Array [] if all constructors of `e` require
		arguments.
		
		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\Tools\Haxe\haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.
		
		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.
		
		The result String does not contain any constructor arguments.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.
		
		If `e` has no arguments, the result is [].
		
		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.
		
		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Json" params="" file="C:\Tools\Haxe\haxe/std/haxe/Json.hx">
		<parse public="1" set="method" line="398" static="1"><f a="text">
	<c path="String"/>
	<d/>
</f></parse>
		<invalidNumber set="method" line="354"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<parseString set="method" line="293"><f a=""><c path="String"/></f></parseString>
		<parseRec set="method" line="211"><f a=""><d/></f></parseRec>
		<invalidChar set="method" line="202"><f a=""><x path="Void"/></f></invalidChar>
		<doParse set="method" line="196"><f a="str">
	<c path="String"/>
	<unknown/>
</f></doParse>
		<pos><x path="Int"/></pos>
		<str><c path="String"/></str>
		<new set="method" line="39"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Crossplatform JSON API : it will automatically use the optimized native API if available.
	Use -D haxeJSON to force usage of the Haxe implementation even if a native API is found : this will provide
	extra encoding features such as enums (replaced by their index), Hashs and Iterable.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.Log" params="" file="C:\Tools\Haxe\haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Tools\Haxe\haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.
	
	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.
	
	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/haxe/Resource.hx">
		<getBytes public="1" set="method" line="33" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.TimerList" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/haxe/Timer.hx" module="haxe.Timer"><c path="Array"><c path="haxe.Timer"/></c></typedef>
	<class path="haxe.Timer" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/haxe/Timer.hx">
		<sRunningTimers line="106" static="1"><t path="haxe.TimerList"/></sRunningTimers>
		<measure public="1" params="T" set="method" line="123" static="1"><f a="f:?pos">
	<f a=""><c path="measure.T"/></f>
	<t path="haxe.PosInfos"/>
	<c path="measure.T"/>
</f></measure>
		<__nextWake public="1" set="method" line="154" static="1">
			<f a="limit">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* @private</haxe_doc>
		</__nextWake>
		<__checkTimers public="1" set="method" line="197" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* @private</haxe_doc>
		</__checkTimers>
		<GetMS set="method" line="210" static="1"><f a=""><x path="Float"/></f></GetMS>
		<delay public="1" set="method" line="218" static="1"><f a="f:time">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<c path="haxe.Timer"/>
</f></delay>
		<stamp public="1" set="method" line="232" static="1"><f a=""><x path="Float"/></f></stamp>
		<nme_time_stamp line="239" static="1"><f a=""><x path="Float"/></f></nme_time_stamp>
		<__check set="method" line="182">
			<f a="inTime">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__check>
		<stop public="1" set="method" line="139"><f a=""><x path="Void"/></f></stop>
		<run public="1" set="dynamic" line="132"><f a=""><x path="Void"/></f></run>
		<mRunning><x path="Bool"/></mRunning>
		<mFireAt><x path="Float"/></mFireAt>
		<mTime><x path="Float"/></mTime>
		<new public="1" set="method" line="113"><f a="time">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.GenericCell_hscript_Token" params="" file="C:\Tools\Haxe\haxe/std/haxe/ds/GenericStack.hx">
		<next public="1"><c path="haxe.ds.GenericCell_hscript_Token"/></next>
		<elt public="1"><e path="hscript.Token"/></elt>
		<new public="1" set="method" line="30"><f a="elt:next">
	<e path="hscript.Token"/>
	<c path="haxe.ds.GenericCell_hscript_Token"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.GenericStack_hscript_Token" params="" file="C:\Tools\Haxe\haxe/std/haxe/ds/GenericStack.hx">
		<toString public="1" set="method" line="166">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="139">
			<f a=""><t path="Iterator"><e path="hscript.Token"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="117">
			<f a="v">
				<e path="hscript.Token"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.
		
		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.
		
		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<isEmpty public="1" get="inline" set="null" line="104">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<pop public="1" get="inline" set="null" line="91">
			<f a=""><t path="Null"><e path="hscript.Token"/></t></f>
			<haxe_doc>Returns the topmost stack element and removes it.
		
		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<first public="1" get="inline" set="null" line="82">
			<f a=""><t path="Null"><e path="hscript.Token"/></t></f>
			<haxe_doc>Returns the topmost stack element without removing it.
		
		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<add public="1" get="inline" set="null" line="73">
			<f a="item">
				<e path="hscript.Token"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<head public="1"><c path="haxe.ds.GenericCell_hscript_Token"/></head>
		<new public="1" set="method" line="67">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\Tools\Haxe\haxe/std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\Tools\Haxe\haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="C:\Tools\Haxe\haxe/std/cpp/_std/haxe/ds/IntMap.hx">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<iterator public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<exists public="1" set="method" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<get public="1" set="method" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<h><d/></h>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.
	
	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\Tools\Haxe\haxe/std/cpp/_std/haxe/ds/ObjectMap.hx">
		<implements path="IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<iterator public="1" set="method" line="58">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="48">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<get public="1" set="method" line="40">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<__KeyRefs><c path="haxe.ds.IntMap"><c path="haxe.ds.ObjectMap.K"/></c></__KeyRefs>
		<__Internal><c path="haxe.ds.IntMap"><c path="haxe.ds.ObjectMap.V"/></c></__Internal>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.
	
	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.
	
	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="C:\Tools\Haxe\haxe/std/cpp/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<iterator public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="47">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<exists public="1" set="method" line="39">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<get public="1" set="method" line="35">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" set="method" line="31">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<__Internal><d/></__Internal>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.
	
	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds._GenericStack.GenericStackIterator_hscript_Token" params="" file="C:\Tools\Haxe\haxe/std/haxe/ds/GenericStack.hx">
		<extends path="cpp.FastIterator"><e path="hscript.Token"/></extends>
		<next public="1" set="method" line="38" override="1"><f a=""><e path="hscript.Token"/></f></next>
		<hasNext public="1" set="method" line="37" override="1"><f a=""><x path="Bool"/></f></hasNext>
		<current public="1"><c path="haxe.ds.GenericCell_hscript_Token"/></current>
		<new public="1" set="method" line="40"><f a="head">
	<c path="haxe.ds.GenericCell_hscript_Token"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/BytesBuffer.hx">
		<getBytes public="1" set="method" line="138">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<b><t path="haxe.io.BytesData"/></b>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Unsigned_char__" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/BytesData.hx" module="haxe.io.BytesData" extern="1"/>
	<typedef path="haxe.io.BytesData" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/BytesData.hx"><c path="Array"><c path="haxe.io.Unsigned_char__"/></c></typedef>
	<class path="haxe.io.BytesInput" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<readBytes public="1" set="method" line="105" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<readByte public="1" set="method" line="84" override="1"><f a=""><x path="Int"/></f></readByte>
		<totlen><x path="Int"/></totlen>
		<len><x path="Int"/></len>
		<pos><x path="Int"/></pos>
		<b><t path="haxe.io.BytesData"/></b>
		<new public="1" set="method" line="38"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<getBytes public="1" set="method" line="118"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<writeByte public="1" set="method" line="48"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Eof" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.Path" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/Path.hx">
		<directory public="1" set="method" line="141" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.
		
		If the directory is null, the empty String "" is returned.
		
		If `path` is null, the result is unspecified.</haxe_doc>
		</directory>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>True if the last directory separator is a backslash, false otherwise.</haxe_doc>
		</backslash>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.
		
		It is separated from the file name by a dot. This dot is not part of
		the extension.
		
		If the path has no extension, the value is null.</haxe_doc>
		</ext>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.
		
		This is the part of the part between the directory and the extension.
		
		If there is no file name, e.g. for ".htaccess" or "/dir/", the value
		is the empty String "".</haxe_doc>
		</file>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.
		
		This is the leading part of the path that is not part of the file name
		and the extension.
		
		Does not end with a `/` or `\` separator.
		
		If the path has no directory, the value is null.</haxe_doc>
		</dir>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Path instance by parsing `path`.
		
		Path information can be retrieved by accessing the dir, file and ext
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:
		
	- directory1/directory2/filename.extension
	- directory1\directory2\filename.excention</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.StringInput" params="" file="C:\Tools\Haxe\haxe/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.macro.Expr" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<typedef path="haxe.macro.TypePath" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern><x path="Bool"/></isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx">
		<TMono a="t"><t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t></TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
		</TFun>
		<TAnonymous a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t></TAnonymous>
		<TDynamic a="t"><t path="Null"><e path="haxe.macro.Type"/></t></TDynamic>
		<TLazy a="f"><f a=""><e path="haxe.macro.Type"/></f></TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TAbstract>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a><fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields></a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><e path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><e path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="haxe.ds.StringMap"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.
		
		This method might clear several metadata entries of the same name.
		
		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.
		
		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.
		
		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.
		
		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.
		
		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.
		
		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.
		
		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypedExpr" params="" file="C:\Tools\Haxe\haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><meta><m n=":flatEnum"/></meta></enum>
	<class path="haxe.ui.toolkit.core.Controller" params="" file="src/haxe/ui/toolkit/core/Controller.hx">
		<get_root set="method" line="61"><f a=""><c path="haxe.ui.toolkit.core.Root"/></f></get_root>
		<get_view set="method" line="57"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></f></get_view>
		<addNamedComponentsFrom set="method" line="43"><f a="parent">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<x path="Void"/>
</f></addNamedComponentsFrom>
		<refereshNamedComponents set="method" line="38"><f a=""><x path="Void"/></f></refereshNamedComponents>
		<getComponentAs public="1" params="T" set="method" line="29"><f a="id:type">
	<c path="String"/>
	<x path="Class"><c path="getComponentAs.T"/></x>
	<t path="Null"><c path="getComponentAs.T"/></t>
</f></getComponentAs>
		<getComponent public="1" set="method" line="25"><f a="id">
	<c path="String"/>
	<c path="haxe.ui.toolkit.core.Component"/>
</f></getComponent>
		<attachEvent public="1" set="method" line="18"><f a="id:type:listener">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></attachEvent>
		<root public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.core.Root"/></root>
		<view public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></view>
		<_namedComponents><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></c></_namedComponents>
		<_view><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></_view>
		<new public="1" set="method" line="13"><f a="view">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.core.XMLController" params="" file="src/haxe/ui/toolkit/core/XMLController.hx">
		<extends path="haxe.ui.toolkit.core.Controller"/>
		<new public="1" set="method" line="7"><f a="xmlResourceId">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.test.TestController" params="" file="src/haxe/ui/test/TestController.hx">
		<extends path="haxe.ui.toolkit.core.XMLController"/>
		<new public="1" set="method" line="27"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDrawable" params="" file="src/haxe/ui/toolkit/core/interfaces/IDrawable.hx" interface="1">
		<paint set="method"><f a=""><x path="Void"/></f></paint>
		<graphics public="1" get="null" set="null"><c path="flash.display.Graphics"/></graphics>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDisplayObject" params="" file="src/haxe/ui/toolkit/core/interfaces/IDisplayObject.hx" interface="1">
		<verticalAlign public="1" get="null" set="null"><c path="String"/></verticalAlign>
		<horizontalAlign public="1" get="null" set="null"><c path="String"/></horizontalAlign>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<invalidate public="1" set="method"><f a="?type">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidate>
		<hitTest public="1" set="method"><f a="stageX:stageY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitTest>
		<visible public="1" get="null" set="null"><x path="Bool"/></visible>
		<stageY public="1" get="null" set="null"><x path="Float"/></stageY>
		<stageX public="1" get="null" set="null"><x path="Float"/></stageX>
		<sprite public="1" get="null" set="null"><c path="flash.display.Sprite"/></sprite>
		<ready public="1" get="null" set="null"><x path="Bool"/></ready>
		<percentHeight public="1" get="null" set="null"><x path="Float"/></percentHeight>
		<percentWidth public="1" get="null" set="null"><x path="Float"/></percentWidth>
		<height public="1" get="null" set="null"><x path="Float"/></height>
		<width public="1" get="null" set="null"><x path="Float"/></width>
		<y public="1" get="null" set="null"><x path="Float"/></y>
		<x public="1" get="null" set="null"><x path="Float"/></x>
		<id public="1" get="null" set="null"><c path="String"/></id>
		<root public="1" get="null" set="null"><c path="haxe.ui.toolkit.core.Root"/></root>
		<parent public="1" get="null" set="null"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></parent>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IEventDispatcher" params="" file="src/haxe/ui/toolkit/core/interfaces/IEventDispatcher.hx" interface="1">
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
	</class>
	<class path="haxe.ui.toolkit.core.DisplayObject" params="" file="src/haxe/ui/toolkit/core/DisplayObject.hx">
		<implements path="haxe.ui.toolkit.core.interfaces.IDrawable"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IEventDispatcher"/>
		<invalidationCount line="267" static="1"><x path="Int"/></invalidationCount>
		<removeAllEventListeners set="method" line="355"><f a=""><x path="Void"/></f></removeAllEventListeners>
		<removeEventListenerType public="1" set="method" line="344"><f a="eventType">
	<c path="String"/>
	<x path="Void"/>
</f></removeEventListenerType>
		<paint set="method" line="332"><f a=""><x path="Void"/></f></paint>
		<get_graphics set="method" line="328"><f a=""><c path="flash.display.Graphics"/></f></get_graphics>
		<graphics public="1" get="accessor" set="null"><c path="flash.display.Graphics"/></graphics>
		<willTrigger public="1" set="method" line="319"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<removeEventListener public="1" set="method" line="309"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method" line="305"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method" line="301"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method" line="288"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispose public="1" set="method" line="280"><f a=""><x path="Void"/></f></dispose>
		<invalidate public="1" set="method" line="268"><f a="?type">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidate>
		<hitTest public="1" set="method" line="256"><f a="xpos:ypos">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitTest>
		<set_verticalAlign set="method" line="251"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_verticalAlign>
		<get_verticalAlign set="method" line="247"><f a=""><c path="String"/></f></get_verticalAlign>
		<set_horizontalAlign set="method" line="242"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_horizontalAlign>
		<get_horizontalAlign set="method" line="238"><f a=""><c path="String"/></f></get_horizontalAlign>
		<set_visible set="method" line="233"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<get_visible set="method" line="229"><f a=""><x path="Bool"/></f></get_visible>
		<get_stageY set="method" line="215"><f a=""><x path="Float"/></f></get_stageY>
		<get_stageX set="method" line="201"><f a=""><x path="Float"/></f></get_stageX>
		<get_sprite set="method" line="196"><f a=""><c path="flash.display.Sprite"/></f></get_sprite>
		<get_ready set="method" line="192"><f a=""><x path="Bool"/></f></get_ready>
		<set_percentHeight set="method" line="182"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_percentHeight>
		<get_percentHeight set="method" line="178"><f a=""><x path="Float"/></f></get_percentHeight>
		<set_percentWidth set="method" line="168"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_percentWidth>
		<get_percentWidth set="method" line="164"><f a=""><x path="Float"/></f></get_percentWidth>
		<set_height set="method" line="150"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<get_height set="method" line="146"><f a=""><x path="Float"/></f></get_height>
		<set_width set="method" line="132"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<get_width set="method" line="128"><f a=""><x path="Float"/></f></get_width>
		<set_y set="method" line="122"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<get_y set="method" line="118"><f a=""><x path="Float"/></f></get_y>
		<set_x set="method" line="112"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<get_x set="method" line="108"><f a=""><x path="Float"/></f></get_x>
		<set_id set="method" line="103"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_id>
		<get_id set="method" line="99"><f a=""><c path="String"/></f></get_id>
		<set_root set="method" line="94"><f a="value">
	<c path="haxe.ui.toolkit.core.Root"/>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></set_root>
		<get_root set="method" line="90"><f a=""><c path="haxe.ui.toolkit.core.Root"/></f></get_root>
		<set_parent set="method" line="85"><f a="value">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
</f></set_parent>
		<get_parent set="method" line="81"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></f></get_parent>
		<verticalAlign public="1" get="accessor" set="accessor"><c path="String"/></verticalAlign>
		<horizontalAlign public="1" get="accessor" set="accessor"><c path="String"/></horizontalAlign>
		<visible public="1" get="accessor" set="accessor"><x path="Bool"/></visible>
		<stageY public="1" get="accessor" set="null"><x path="Float"/></stageY>
		<stageX public="1" get="accessor" set="null"><x path="Float"/></stageX>
		<sprite public="1" get="accessor" set="null"><c path="flash.display.Sprite"/></sprite>
		<ready public="1" get="accessor" set="null"><x path="Bool"/></ready>
		<percentHeight public="1" get="accessor" set="accessor"><x path="Float"/></percentHeight>
		<percentWidth public="1" get="accessor" set="accessor"><x path="Float"/></percentWidth>
		<height public="1" get="accessor" set="accessor"><x path="Float"/></height>
		<width public="1" get="accessor" set="accessor"><x path="Float"/></width>
		<y public="1" get="accessor" set="accessor"><x path="Float"/></y>
		<x public="1" get="accessor" set="accessor"><x path="Float"/></x>
		<id public="1" get="accessor" set="accessor"><c path="String"/></id>
		<root public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.core.Root"/></root>
		<parent public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></parent>
		<_onAddedToStage set="method" line="49"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onAddedToStage>
		<initialize set="method" line="43"><f a=""><x path="Void"/></f></initialize>
		<preInitialize set="method" line="40"><f a=""><x path="Void"/></f></preInitialize>
		<_eventListeners><c path="haxe.ds.StringMap"><c path="List"><f a="">
	<d/>
	<x path="Void"/>
</f></c></c></_eventListeners>
		<_valign><c path="String"/></_valign>
		<_halign><c path="String"/></_halign>
		<_sprite><c path="flash.display.Sprite"/></_sprite>
		<_ready><x path="Bool"/></_ready>
		<_percentHeight><x path="Float"/></_percentHeight>
		<_percentWidth><x path="Float"/></_percentWidth>
		<_height><x path="Float"/></_height>
		<_width><x path="Float"/></_width>
		<_y><x path="Float"/></_y>
		<_x><x path="Float"/></_x>
		<_id><c path="String"/></_id>
		<_root><c path="haxe.ui.toolkit.core.Root"/></_root>
		<_parent><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></_parent>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer" params="" file="src/haxe/ui/toolkit/core/interfaces/IDisplayObjectContainer.hx" interface="1">
		<extends path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
		<autoSize public="1" get="null" set="null"><x path="Bool"/></autoSize>
		<layout public="1" get="null" set="null"><c path="haxe.ui.toolkit.core.interfaces.ILayout"/></layout>
		<findChildAs public="1" params="T" set="method"><f a="type">
	<x path="Class"><c path="findChildAs.T"/></x>
	<t path="Null"><c path="findChildAs.T"/></t>
</f></findChildAs>
		<findChild public="1" params="T" set="method"><f a="id:?type">
	<c path="String"/>
	<x path="Class"><c path="findChild.T"/></x>
	<t path="Null"><c path="findChild.T"/></t>
</f></findChild>
		<removeChild public="1" set="method"><f a="child:?dispose">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></removeChild>
		<addChild public="1" set="method"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChildAt>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></getChildAt>
		<indexOfChild public="1" set="method"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
</f></indexOfChild>
		<children public="1" get="null" set="null"><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></children>
		<numChildren public="1" get="null" set="null"><x path="Int"/></numChildren>
	</class>
	<class path="haxe.ui.toolkit.core.DisplayObjectContainer" params="" file="src/haxe/ui/toolkit/core/DisplayObjectContainer.hx">
		<extends path="haxe.ui.toolkit.core.DisplayObject"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
		<set_root set="method" line="211" override="1"><f a="value">
	<c path="haxe.ui.toolkit.core.Root"/>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></set_root>
		<dispose public="1" set="method" line="200" override="1"><f a=""><x path="Void"/></f></dispose>
		<set_autoSize set="method" line="192"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoSize>
		<get_autoSize set="method" line="188"><f a=""><x path="Bool"/></f></get_autoSize>
		<set_layout set="method" line="181"><f a="value">
	<c path="haxe.ui.toolkit.core.interfaces.ILayout"/>
	<c path="haxe.ui.toolkit.core.interfaces.ILayout"/>
</f></set_layout>
		<get_layout set="method" line="177"><f a=""><c path="haxe.ui.toolkit.core.interfaces.ILayout"/></f></get_layout>
		<findChild public="1" params="T" set="method" line="166"><f a="id:?type">
	<c path="String"/>
	<x path="Class"><c path="findChild.T"/></x>
	<t path="Null"><c path="findChild.T"/></t>
</f></findChild>
		<findChildAs public="1" params="T" set="method" line="155"><f a="type">
	<x path="Class"><c path="findChildAs.T"/></x>
	<t path="Null"><c path="findChildAs.T"/></t>
</f></findChildAs>
		<removeChild public="1" set="method" line="138"><f a="child:?dispose">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></removeChild>
		<addChild public="1" set="method" line="110"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method" line="82"><f a="child:index">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChildAt>
		<getChildAt public="1" set="method" line="74"><f a="index">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></getChildAt>
		<indexOfChild public="1" set="method" line="69"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
</f></indexOfChild>
		<get_children set="method" line="65"><f a=""><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></f></get_children>
		<get_numChildren set="method" line="61"><f a=""><x path="Int"/></f></get_numChildren>
		<autoSize public="1" get="accessor" set="accessor"><x path="Bool"/></autoSize>
		<children public="1" get="accessor" set="null"><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></children>
		<layout public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.core.interfaces.ILayout"/></layout>
		<numChildren public="1" get="accessor" set="null"><x path="Int"/></numChildren>
		<invalidate public="1" set="method" line="41" override="1"><f a="?type">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidate>
		<initialize set="method" line="26" override="1"><f a=""><x path="Void"/></f></initialize>
		<_autoSize><x path="Bool"/></_autoSize>
		<_layout><c path="haxe.ui.toolkit.core.interfaces.ILayout"/></_layout>
		<_children><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></_children>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IStyleable" params="" file="src/haxe/ui/toolkit/core/interfaces/IStyleable.hx" interface="1">
		<buildStyles set="method"><f a=""><x path="Void"/></f></buildStyles>
		<applyStyle set="method"><f a=""><x path="Void"/></f></applyStyle>
		<retrieveStyle set="method"><f a="id">
	<c path="String"/>
	<d/>
</f></retrieveStyle>
		<storeStyle set="method"><f a="id:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></storeStyle>
		<style public="1" get="null" set="null"><d/></style>
		<id public="1" get="null" set="null"><c path="String"/></id>
	</class>
	<class path="haxe.ui.toolkit.core.StyleableDisplayObject" params="" file="src/haxe/ui/toolkit/core/StyleableDisplayObject.hx">
		<extends path="haxe.ui.toolkit.core.DisplayObjectContainer"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IStyleable"/>
		<buildStyles public="1" set="method" line="163"><f a=""><x path="Void"/></f></buildStyles>
		<applyStyle set="method" line="138"><f a=""><x path="Void"/></f></applyStyle>
		<retrieveStyle public="1" set="method" line="131"><f a="id">
	<c path="String"/>
	<d/>
</f></retrieveStyle>
		<storeStyle public="1" set="method" line="124"><f a="id:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></storeStyle>
		<set_style set="method" line="118"><f a="value">
	<d/>
	<d/>
</f></set_style>
		<get_style set="method" line="114"><f a=""><d/></f></get_style>
		<style public="1" get="accessor" set="accessor"><d/></style>
		<set_id set="method" line="96" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_id>
		<paint public="1" set="method" line="85" override="1"><f a=""><x path="Void"/></f></paint>
		<preInitialize set="method" line="26" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_currentFilterString><c path="String"/></_currentFilterString>
		<_storedStyles><c path="haxe.ds.StringMap"><d/></c></_storedStyles>
		<_style><d/></_style>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Component" params="" file="src/haxe/ui/toolkit/core/Component.hx">
		<extends path="haxe.ui.toolkit.core.StyleableDisplayObject"/>
		<_onComponentMouseMove set="method" line="121"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onComponentMouseMove>
		<_onComponentMouseUp set="method" line="116"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onComponentMouseUp>
		<_onComponentMouseDown set="method" line="104"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onComponentMouseDown>
		<mouseDownPos><c path="flash.geom.Point"/></mouseDownPos>
		<clearClip public="1" set="method" line="97"><f a=""><x path="Void"/></f></clearClip>
		<set_clipContent set="method" line="91"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_clipContent>
		<get_clipContent set="method" line="87"><f a=""><x path="Bool"/></f></get_clipContent>
		<set_clipHeight set="method" line="82"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_clipHeight>
		<get_clipHeight set="method" line="75"><f a=""><x path="Float"/></f></get_clipHeight>
		<set_clipWidth set="method" line="70"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_clipWidth>
		<get_clipWidth set="method" line="63"><f a=""><x path="Float"/></f></get_clipWidth>
		<set_text set="method" line="50"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_text set="method" line="46"><f a=""><c path="String"/></f></get_text>
		<clipContent public="1" get="accessor" set="accessor"><x path="Bool"/></clipContent>
		<clipHeight public="1" get="accessor" set="accessor"><x path="Float"/></clipHeight>
		<clipWidth public="1" get="accessor" set="accessor"><x path="Float"/></clipWidth>
		<text public="1" get="accessor" set="accessor"><c path="String"/></text>
		<invalidate public="1" set="method" line="30" override="1"><f a="?type">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidate>
		<initialize set="method" line="22" override="1"><f a=""><x path="Void"/></f></initialize>
		<_clipContent><x path="Bool"/></_clipContent>
		<_text><c path="String"/></_text>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.VBox" params="" file="src/haxe/ui/toolkit/containers/VBox.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Vertical layout container</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.containers.Accordion" params="" file="src/haxe/ui/toolkit/containers/Accordion.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<findPanelFromSprite set="method" line="191"><f a="s">
	<c path="flash.display.Sprite"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></findPanelFromSprite>
		<_onPanelAdded set="method" line="130"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onPanelAdded>
		<hidePanel set="method" line="103"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></hidePanel>
		<showPanel set="method" line="86"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></showPanel>
		<mouseClickButton set="method" line="73"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></mouseClickButton>
		<buildMouseClickFunction set="method" line="69"><f a="index">
	<x path="Int"/>
	<f a="event">
		<c path="flash.events.MouseEvent"/>
		<x path="Void"/>
	</f>
</f></buildMouseClickFunction>
		<addChild public="1" set="method" line="39" override="1">
			<f a="child">
				<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
				<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
			</f>
			<haxe_doc>Adds a panel to the accordion, the childs `text` property will be used as the title</haxe_doc>
		</addChild>
		<_buttons><c path="Array"><c path="haxe.ui.toolkit.containers._Accordion.AccordionButton"/></c></_buttons>
		<_panels><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></_panels>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Basic, animated accordion container</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IStateComponent" params="" file="src/haxe/ui/toolkit/core/interfaces/IStateComponent.hx" interface="1">
		<states public="1" get="null" set="null"><c path="Array"><c path="String"/></c></states>
		<state public="1" get="null" set="null"><c path="String"/></state>
	</class>
	<class path="haxe.ui.toolkit.core.StateComponent" params="" file="src/haxe/ui/toolkit/core/StateComponent.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IStateComponent"/>
		<get_states set="method" line="59"><f a=""><c path="Array"><c path="String"/></c></f></get_states>
		<set_state set="method" line="47"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_state>
		<get_state set="method" line="43"><f a=""><c path="String"/></f></get_state>
		<states public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></states>
		<state public="1" get="accessor" set="accessor"><c path="String"/></state>
		<addStates public="1" set="method" line="28"><f a="stateNames">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></addStates>
		<buildStyles public="1" set="method" line="19" override="1"><f a=""><x path="Void"/></f></buildStyles>
		<_states><c path="Array"><c path="String"/></c></_states>
		<_state><c path="String"/></_state>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IFocusable" params="" file="src/haxe/ui/toolkit/core/interfaces/IFocusable.hx" interface="1"><allowFocus public="1" get="null" set="null"><x path="Bool"/></allowFocus></class>
	<class path="haxe.ui.toolkit.controls.Button" params="" file="src/haxe/ui/toolkit/controls/Button.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IFocusable"/>
		<STATE_NORMAL public="1" get="inline" set="null" line="21" static="1">
			<c path="String"/>
			<haxe_doc>Button state is "normal" (default state)</haxe_doc>
		</STATE_NORMAL>
		<STATE_OVER public="1" get="inline" set="null" line="25" static="1">
			<c path="String"/>
			<haxe_doc>Button state is "over"</haxe_doc>
		</STATE_OVER>
		<STATE_DOWN public="1" get="inline" set="null" line="29" static="1">
			<c path="String"/>
			<haxe_doc>Button state is "down"</haxe_doc>
		</STATE_DOWN>
		<applyStyle set="method" line="299" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<set_allowSelection set="method" line="291"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allowSelection>
		<get_allowSelection set="method" line="287"><f a=""><x path="Bool"/></f></get_allowSelection>
		<set_selected set="method" line="269"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selected>
		<get_selected set="method" line="265"><f a=""><x path="Bool"/></f></get_selected>
		<set_toggle set="method" line="260"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_toggle>
		<get_toggle set="method" line="256"><f a=""><x path="Bool"/></f></get_toggle>
		<set_iconPosition set="method" line="251"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_iconPosition>
		<get_iconPosition set="method" line="247"><f a=""><c path="String"/></f></get_iconPosition>
		<allowSelection public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Defines whether this buttons selected state can be modified by the user. Only applicable for toggle buttons.</haxe_doc>
		</allowSelection>
		<selected public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Gets or sets the buttons selected state. Only applicable if the button is a toggle button.</haxe_doc>
		</selected>
		<toggle public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Defines whether this button should behave as a toggle button. Toggle buttons maintain thier selection, ie, one click to select, another to deselect</haxe_doc>
		</toggle>
		<iconPosition public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Defines where the icon (if available) should be positioned, valid values are:
		 
		 - `farLeft` - furthest left position possible (honours padding)
		 - `left` - left of the label
		 - `center` or `top` - centered in the button, if button has a label icon will be positioned ontop of the label
		 - `right` - right of the label
		 - `farRight` - furthest right position possible (honours padding)</haxe_doc>
		</iconPosition>
		<set_allowFocus set="method" line="217"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allowFocus>
		<get_allowFocus set="method" line="213"><f a=""><x path="Bool"/></f></get_allowFocus>
		<allowFocus public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Defines whether or not the button can receive focus by tabbing to it (not yet implemented)</haxe_doc>
		</allowFocus>
		<get_states set="method" line="201" override="1"><f a=""><c path="Array"><c path="String"/></c></f></get_states>
		<_onMouseClick set="method" line="187"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<_onMouseUp set="method" line="168"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseUp>
		<_onMouseDown set="method" line="160"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<_onMouseOut set="method" line="150"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseOut>
		<_onMouseOver set="method" line="140"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseOver>
		<set_text set="method" line="131" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_text set="method" line="127" override="1"><f a=""><c path="String"/></f></get_text>
		<initialize set="method" line="112" override="1"><f a=""><x path="Void"/></f></initialize>
		<preInitialize set="method" line="92" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<set_icon set="method" line="80"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_icon>
		<get_icon set="method" line="73"><f a=""><c path="String"/></f></get_icon>
		<set_remainPressed set="method" line="68"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_remainPressed>
		<get_remainPressed set="method" line="64"><f a=""><x path="Bool"/></f></get_remainPressed>
		<icon public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Sets the icon asset. Eg: `assets/myicon.png`</haxe_doc>
		</icon>
		<remainPressed public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Defines whether this button should remain pressed even when the mouse cursor goes out of the control (and the left mouse button is pressed)</haxe_doc>
		</remainPressed>
		<_allowSelection><x path="Bool"/></_allowSelection>
		<_selected><x path="Bool"/></_selected>
		<_toggle><x path="Bool"/></_toggle>
		<_down><x path="Bool"/></_down>
		<_icon><c path="haxe.ui.toolkit.controls.Image"/></_icon>
		<_label><c path="haxe.ui.toolkit.controls.Text"/></_label>
		<_remainPressed><x path="Bool"/></_remainPressed>
		<_allowFocus><x path="Bool"/></_allowFocus>
		<new public="1" set="method" line="42"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[General purpose multi-state button control with icon and toggle support (plus icon positioning)
 
 <b>Events:</b>
 
 * `MouseEvent.CLICK` - Dispatched when button is clicked]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.containers._Accordion.AccordionButton" params="" file="src/haxe/ui/toolkit/containers/Accordion.hx" private="1" module="haxe.ui.toolkit.containers.Accordion">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<new public="1" set="method" line="204"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.CalendarView" params="" file="src/haxe/ui/toolkit/containers/CalendarView.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<MONTH_NAMES line="11" static="1"><c path="Array"><c path="String"/></c></MONTH_NAMES>
		<displayMonthYear set="method" line="116"><f a=""><x path="Void"/></f></displayMonthYear>
		<_onDateChanged set="method" line="109"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onDateChanged>
		<_onNextClicked set="method" line="104"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onNextClicked>
		<_onPrevClicked set="method" line="99"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onPrevClicked>
		<set_selectedDate set="method" line="91"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_selectedDate>
		<get_selectedDate set="method" line="87"><f a=""><c path="Date"/></f></get_selectedDate>
		<set_date set="method" line="82"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_date>
		<get_date set="method" line="78"><f a=""><c path="Date"/></f></get_date>
		<selectedDate public="1" get="accessor" set="accessor"><c path="Date"/></selectedDate>
		<date public="1" get="accessor" set="accessor"><c path="Date"/></date>
		<initialize set="method" line="30" override="1"><f a=""><x path="Void"/></f></initialize>
		<_currentMonthYear><c path="haxe.ui.toolkit.controls.Text"/></_currentMonthYear>
		<_nextMonthButton><c path="haxe.ui.toolkit.controls.Button"/></_nextMonthButton>
		<_prevMonthButton><c path="haxe.ui.toolkit.controls.Button"/></_prevMonthButton>
		<_calendar><c path="haxe.ui.toolkit.controls.Calendar"/></_calendar>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.Grid" params="" file="src/haxe/ui/toolkit/containers/Grid.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<set_columns set="method" line="29"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_columns>
		<get_columns set="method" line="25"><f a=""><x path="Int"/></f></get_columns>
		<columns public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>Number of columns for the grid</haxe_doc>
		</columns>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Grid style layout container</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.containers.HBox" params="" file="src/haxe/ui/toolkit/containers/HBox.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Horizontal layout container</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.containers.ScrollView" params="" file="src/haxe/ui/toolkit/containers/ScrollView.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<resizeEventTarget set="method" line="378"><f a=""><x path="Void"/></f></resizeEventTarget>
		<updateScrollRect set="method" line="361"><f a=""><x path="Void"/></f></updateScrollRect>
		<checkScrolls set="method" line="275"><f a=""><x path="Void"/></f></checkScrolls>
		<_onMouseUp set="method" line="258"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseUp>
		<_onMouseMove set="method" line="226"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseMove>
		<_onMouseDown set="method" line="207"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<_onMouseWheel set="method" line="182"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseWheel>
		<_onVScrollChange set="method" line="178"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onVScrollChange>
		<_onHScrollChange set="method" line="174"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onHScrollChange>
		<invalidate public="1" set="method" line="158" override="1"><f a="?type">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidate>
		<get_vscrollPageSize set="method" line="148"><f a=""><x path="Float"/></f></get_vscrollPageSize>
		<get_vscrollMax set="method" line="141"><f a=""><x path="Float"/></f></get_vscrollMax>
		<get_vscrollMin set="method" line="134"><f a=""><x path="Float"/></f></get_vscrollMin>
		<set_vscrollPos set="method" line="127"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_vscrollPos>
		<get_vscrollPos set="method" line="120"><f a=""><x path="Float"/></f></get_vscrollPos>
		<vscrollPageSize public="1" get="accessor" set="null"><x path="Float"/></vscrollPageSize>
		<vscrollMax public="1" get="accessor" set="null"><x path="Float"/></vscrollMax>
		<vscrollMin public="1" get="accessor" set="null"><x path="Float"/></vscrollMin>
		<vscrollPos public="1" get="accessor" set="accessor"><x path="Float"/></vscrollPos>
		<get_hscrollPageSize set="method" line="108"><f a=""><x path="Float"/></f></get_hscrollPageSize>
		<get_hscrollMax set="method" line="101"><f a=""><x path="Float"/></f></get_hscrollMax>
		<get_hscrollMin set="method" line="94"><f a=""><x path="Float"/></f></get_hscrollMin>
		<set_hscrollPos set="method" line="87"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_hscrollPos>
		<get_hscrollPos set="method" line="80"><f a=""><x path="Float"/></f></get_hscrollPos>
		<hscrollPageSize public="1" get="accessor" set="null"><x path="Float"/></hscrollPageSize>
		<hscrollMax public="1" get="accessor" set="null"><x path="Float"/></hscrollMax>
		<hscrollMin public="1" get="accessor" set="null"><x path="Float"/></hscrollMin>
		<hscrollPos public="1" get="accessor" set="accessor"><x path="Float"/></hscrollPos>
		<dispose public="1" set="method" line="67" override="1"><f a=""><x path="Void"/></f></dispose>
		<initialize set="method" line="51" override="1"><f a=""><x path="Void"/></f></initialize>
		<preInitialize set="method" line="41" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_autoHideScrolls><x path="Bool"/></_autoHideScrolls>
		<_scrollSensitivity><x path="Int"/></_scrollSensitivity>
		<_downPos><c path="flash.geom.Point"/></_downPos>
		<_eventTarget><c path="flash.display.Sprite"/></_eventTarget>
		<_showVScroll><x path="Bool"/></_showVScroll>
		<_showHScroll><x path="Bool"/></_showHScroll>
		<_vscroll><c path="haxe.ui.toolkit.controls.VScroll"/></_vscroll>
		<_hscroll><c path="haxe.ui.toolkit.controls.HScroll"/></_hscroll>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDataComponent" params="" file="src/haxe/ui/toolkit/core/interfaces/IDataComponent.hx" interface="1"><dataSource public="1" get="null" set="null"><c path="haxe.ui.toolkit.data.IDataSource"/></dataSource></class>
	<class path="haxe.ui.toolkit.containers.ListView" params="" file="src/haxe/ui/toolkit/containers/ListView.hx">
		<extends path="haxe.ui.toolkit.containers.ScrollView"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDataComponent"/>
		<isSelected public="1" set="method" line="252"><f a="item">
	<c path="haxe.ui.toolkit.containers.ListViewItem"/>
	<x path="Bool"/>
</f></isSelected>
		<handleListSelection public="1" set="method" line="217"><f a="item:event">
	<c path="haxe.ui.toolkit.containers.ListViewItem"/>
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></handleListSelection>
		<removeListViewItem set="method" line="213"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></removeListViewItem>
		<addListViewItem set="method" line="174"><f a="dataHash:data:?index">
	<c path="String"/>
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></addListViewItem>
		<syncUI set="method" line="131"><f a=""><x path="Void"/></f></syncUI>
		<_onDataSourceChanged set="method" line="124"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onDataSourceChanged>
		<set_dataSource set="method" line="105"><f a="value">
	<c path="haxe.ui.toolkit.data.IDataSource"/>
	<c path="haxe.ui.toolkit.data.IDataSource"/>
</f></set_dataSource>
		<get_dataSource set="method" line="101"><f a=""><c path="haxe.ui.toolkit.data.IDataSource"/></f></get_dataSource>
		<dataSource public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.data.IDataSource"/></dataSource>
		<get_selectedItems set="method" line="92"><f a=""><c path="Array"><c path="haxe.ui.toolkit.containers.ListViewItem"/></c></f></get_selectedItems>
		<getItem public="1" set="method" line="88"><f a="index">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.containers.ListViewItem"/>
</f></getItem>
		<get_itemHeight set="method" line="72"><f a=""><x path="Float"/></f></get_itemHeight>
		<get_listSize set="method" line="68"><f a=""><x path="Int"/></f></get_listSize>
		<selectedItems public="1" get="accessor" set="null"><c path="Array"><c path="haxe.ui.toolkit.containers.ListViewItem"/></c></selectedItems>
		<itemHeight public="1" get="accessor" set="null"><x path="Float"/></itemHeight>
		<listSize public="1" get="accessor" set="null"><x path="Int"/></listSize>
		<dispose public="1" set="method" line="54" override="1"><f a=""><x path="Void"/></f></dispose>
		<initialize set="method" line="42" override="1"><f a=""><x path="Void"/></f></initialize>
		<_selectedItems><c path="Array"><c path="haxe.ui.toolkit.containers.ListViewItem"/></c></_selectedItems>
		<_content><c path="haxe.ui.toolkit.containers.VBox"/></_content>
		<_dataSource><c path="haxe.ui.toolkit.data.IDataSource"/></_dataSource>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.ListViewItem" params="" file="src/haxe/ui/toolkit/containers/ListView.hx" module="haxe.ui.toolkit.containers.ListView">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<STATE_NORMAL public="1" get="inline" set="null" line="258" static="1"><c path="String"/></STATE_NORMAL>
		<STATE_OVER public="1" get="inline" set="null" line="259" static="1"><c path="String"/></STATE_OVER>
		<STATE_SELECTED public="1" get="inline" set="null" line="260" static="1"><c path="String"/></STATE_SELECTED>
		<set_controlDataSource set="method" line="511"><f a="value">
	<d/>
	<d/>
</f></set_controlDataSource>
		<get_controlDataSource set="method" line="507"><f a=""><d/></f></get_controlDataSource>
		<set_value set="method" line="490"><f a="value">
	<d/>
	<d/>
</f></set_value>
		<get_value set="method" line="473"><f a=""><d/></f></get_value>
		<set_type set="method" line="433"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_type>
		<set_controlId set="method" line="428"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_controlId>
		<get_controlId set="method" line="424"><f a=""><c path="String"/></f></get_controlId>
		<set_icon set="method" line="409"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_icon>
		<get_icon set="method" line="401"><f a=""><c path="String"/></f></get_icon>
		<set_subtext set="method" line="383"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_subtext>
		<get_subtext set="method" line="376"><f a=""><c path="String"/></f></get_subtext>
		<set_hash set="method" line="371"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_hash>
		<get_hash set="method" line="367"><f a=""><c path="String"/></f></get_hash>
		<controlDataSource public="1" get="accessor" set="accessor"><d/></controlDataSource>
		<value public="1" get="accessor" set="accessor"><d/></value>
		<type public="1" get="null" set="accessor"><c path="String"/></type>
		<controlId public="1" get="accessor" set="accessor"><c path="String"/></controlId>
		<icon public="1" get="accessor" set="accessor"><c path="String"/></icon>
		<subtext public="1" get="accessor" set="accessor"><c path="String"/></subtext>
		<hash public="1" get="accessor" set="accessor"><c path="String"/></hash>
		<set_text set="method" line="341" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_text set="method" line="334" override="1"><f a=""><c path="String"/></f></get_text>
		<set_state set="method" line="320" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_state>
		<get_states set="method" line="316" override="1"><f a=""><c path="Array"><c path="String"/></c></f></get_states>
		<_onMouseClick set="method" line="305"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<_onMouseOut set="method" line="297"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseOut>
		<_onMouseOver set="method" line="293"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseOver>
		<initialize set="method" line="282" override="1"><f a=""><x path="Void"/></f></initialize>
		<_parentList><c path="haxe.ui.toolkit.containers.ListView"/></_parentList>
		<_subControl><c path="haxe.ui.toolkit.core.Component"/></_subControl>
		<_iconControl><c path="haxe.ui.toolkit.controls.Image"/></_iconControl>
		<_subtextControl><c path="haxe.ui.toolkit.controls.Text"/></_subtextControl>
		<_textControl><c path="haxe.ui.toolkit.controls.Text"/></_textControl>
		<_controlDataSource><d/></_controlDataSource>
		<_controlId><c path="String"/></_controlId>
		<_hash><c path="String"/></_hash>
		<new public="1" set="method" line="273"><f a="parentList">
	<c path="haxe.ui.toolkit.containers.ListView"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.ILayout" params="" file="src/haxe/ui/toolkit/core/interfaces/ILayout.hx" interface="1">
		<repositionChildren set="method"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren set="method"><f a=""><x path="Void"/></f></resizeChildren>
		<refresh public="1" set="method"><f a=""><x path="Void"/></f></refresh>
		<usableHeight public="1" get="null" set="null"><x path="Float"/></usableHeight>
		<usableWidth public="1" get="null" set="null"><x path="Float"/></usableWidth>
		<innerHeight public="1" get="null" set="null"><x path="Float"/></innerHeight>
		<innerWidth public="1" get="null" set="null"><x path="Float"/></innerWidth>
		<spacingY public="1" get="null" set="null"><x path="Int"/></spacingY>
		<spacingX public="1" get="null" set="null"><x path="Int"/></spacingX>
		<padding public="1" get="null" set="null"><c path="flash.geom.Rectangle"/></padding>
		<container public="1" get="null" set="null"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></container>
	</class>
	<class path="haxe.ui.toolkit.layout.Layout" params="" file="src/haxe/ui/toolkit/layout/Layout.hx">
		<implements path="haxe.ui.toolkit.core.interfaces.ILayout"/>
		<get_usableHeight set="method" line="105"><f a=""><x path="Float"/></f></get_usableHeight>
		<get_usableWidth set="method" line="99"><f a=""><x path="Float"/></f></get_usableWidth>
		<get_innerHeight set="method" line="93"><f a=""><x path="Float"/></f></get_innerHeight>
		<get_innerWidth set="method" line="87"><f a=""><x path="Float"/></f></get_innerWidth>
		<usableHeight public="1" get="accessor" set="null"><x path="Float"/></usableHeight>
		<usableWidth public="1" get="accessor" set="null"><x path="Float"/></usableWidth>
		<innerHeight public="1" get="accessor" set="null"><x path="Float"/></innerHeight>
		<innerWidth public="1" get="accessor" set="null"><x path="Float"/></innerWidth>
		<repositionChildren set="method" line="75"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren set="method" line="72"><f a=""><x path="Void"/></f></resizeChildren>
		<refresh public="1" set="method" line="65"><f a=""><x path="Void"/></f></refresh>
		<set_spacingY set="method" line="59"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_spacingY>
		<get_spacingY set="method" line="55"><f a=""><x path="Int"/></f></get_spacingY>
		<set_spacingX set="method" line="49"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_spacingX>
		<get_spacingX set="method" line="45"><f a=""><x path="Int"/></f></get_spacingX>
		<set_padding set="method" line="39"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_padding>
		<get_padding set="method" line="35"><f a=""><c path="flash.geom.Rectangle"/></f></get_padding>
		<set_container set="method" line="29"><f a="value">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
</f></set_container>
		<get_container set="method" line="25"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></f></get_container>
		<spacingY public="1" get="accessor" set="accessor"><x path="Int"/></spacingY>
		<spacingX public="1" get="accessor" set="accessor"><x path="Int"/></spacingX>
		<padding public="1" get="accessor" set="accessor"><c path="flash.geom.Rectangle"/></padding>
		<container public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></container>
		<_spacingY><x path="Int"/></_spacingY>
		<_spacingX><x path="Int"/></_spacingX>
		<_padding><c path="flash.geom.Rectangle"/></_padding>
		<_container><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></_container>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.layout.DefaultLayout" params="" file="src/haxe/ui/toolkit/layout/DefaultLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<repositionChildren set="method" line="26" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren set="method" line="11" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers._ListView.ListViewItemLayout" params="" file="src/haxe/ui/toolkit/containers/ListView.hx" private="1" module="haxe.ui.toolkit.containers.ListView">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<repositionChildren set="method" line="569" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren set="method" line="522" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="518"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.ListViewEvent" params="" file="src/haxe/ui/toolkit/containers/ListView.hx" module="haxe.ui.toolkit.containers.ListView">
		<extends path="flash.events.Event"/>
		<COMPONENT_EVENT public="1" line="622" static="1"><c path="String"/></COMPONENT_EVENT>
		<get_component public="1" set="method" line="640"><f a=""><c path="haxe.ui.toolkit.core.Component"/></f></get_component>
		<get_item public="1" set="method" line="636"><f a=""><c path="haxe.ui.toolkit.containers.ListViewItem"/></f></get_item>
		<component public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.core.Component"/></component>
		<item public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.containers.ListViewItem"/></item>
		<c><c path="haxe.ui.toolkit.core.Component"/></c>
		<li><c path="haxe.ui.toolkit.containers.ListViewItem"/></li>
		<new public="1" set="method" line="630"><f a="type:listItem:component">
	<c path="String"/>
	<c path="haxe.ui.toolkit.containers.ListViewItem"/>
	<c path="haxe.ui.toolkit.core.Component"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.MenuBar" params="" file="src/haxe/ui/toolkit/containers/MenuBar.hx">
		<extends path="haxe.ui.toolkit.containers.HBox"/>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Simple menu bar container</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.containers.RTFView" params="" file="src/haxe/ui/toolkit/containers/RTFView.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<_onJustifyAlignClick set="method" line="228"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onJustifyAlignClick>
		<_onRightAlignClick set="method" line="224"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onRightAlignClick>
		<_onCenterAlignClick set="method" line="220"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onCenterAlignClick>
		<_onLeftAlignClick set="method" line="216"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onLeftAlignClick>
		<_onFontSizeChange set="method" line="210"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onFontSizeChange>
		<_onFontNameChange set="method" line="205"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onFontNameChange>
		<_onBulletClick set="method" line="201"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onBulletClick>
		<_onUnderlineClick set="method" line="197"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onUnderlineClick>
		<_onItalicClick set="method" line="193"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onItalicClick>
		<_onBoldClick set="method" line="189"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onBoldClick>
		<set_text set="method" line="181" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<set_htmlText set="method" line="176"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_htmlText>
		<get_htmlText set="method" line="172"><f a=""><c path="String"/></f></get_htmlText>
		<htmlText public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Gets or sets the rich text of the editor from a html string</haxe_doc>
		</htmlText>
		<initialize set="method" line="45" override="1"><f a=""><x path="Void"/></f></initialize>
		<_systemFonts><x path="Bool"/></_systemFonts>
		<_justifyAlignButton><c path="haxe.ui.toolkit.containers._RTFView.RTFToolButton"/></_justifyAlignButton>
		<_rightAlignButton><c path="haxe.ui.toolkit.containers._RTFView.RTFToolButton"/></_rightAlignButton>
		<_centerAlignButton><c path="haxe.ui.toolkit.containers._RTFView.RTFToolButton"/></_centerAlignButton>
		<_leftAlignButton><c path="haxe.ui.toolkit.containers._RTFView.RTFToolButton"/></_leftAlignButton>
		<_bulletButton><c path="haxe.ui.toolkit.containers._RTFView.RTFToolButton"/></_bulletButton>
		<_underlineButton><c path="haxe.ui.toolkit.containers._RTFView.RTFToolButton"/></_underlineButton>
		<_italicButton><c path="haxe.ui.toolkit.containers._RTFView.RTFToolButton"/></_italicButton>
		<_boldButton><c path="haxe.ui.toolkit.containers._RTFView.RTFToolButton"/></_boldButton>
		<_fontSizeList><c path="haxe.ui.toolkit.controls.selection.List"/></_fontSizeList>
		<_fontNameList><c path="haxe.ui.toolkit.controls.selection.List"/></_fontNameList>
		<_rtf><c path="haxe.ui.toolkit.controls.extended.RTF"/></_rtf>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Rich text editor container (contains style controls)</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.containers._RTFView.RTFToolButton" params="" file="src/haxe/ui/toolkit/containers/RTFView.hx" private="1" module="haxe.ui.toolkit.containers.RTFView">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<new public="1" set="method" line="233"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers._ScrollView.ScrollViewLayout" params="" file="src/haxe/ui/toolkit/containers/ScrollView.hx" private="1" module="haxe.ui.toolkit.containers.ScrollView">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<set_inlineScrolls set="method" line="452"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_inlineScrolls>
		<get_inlineScrolls set="method" line="448"><f a=""><x path="Bool"/></f></get_inlineScrolls>
		<inlineScrolls public="1" get="accessor" set="accessor"><x path="Bool"/></inlineScrolls>
		<get_usableHeight set="method" line="434" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<get_usableWidth set="method" line="424" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<repositionChildren public="1" set="method" line="410" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren public="1" set="method" line="406" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<_inlineScrolls><x path="Bool"/></_inlineScrolls>
		<new public="1" set="method" line="402"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.Stack" params="" file="src/haxe/ui/toolkit/containers/Stack.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<set_selectedIndex set="method" line="41"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<get_selectedIndex set="method" line="37"><f a=""><x path="Int"/></f></get_selectedIndex>
		<selectedIndex public="1" get="accessor" set="accessor"><x path="Int"/></selectedIndex>
		<addChild public="1" set="method" line="25" override="1"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<_selectedIndex><x path="Int"/></_selectedIndex>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.TabView" params="" file="src/haxe/ui/toolkit/containers/TabView.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<get_pageCount set="method" line="70"><f a=""><x path="Int"/></f></get_pageCount>
		<set_selectedIndex set="method" line="65"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<get_selectedIndex set="method" line="61"><f a=""><x path="Int"/></f></get_selectedIndex>
		<pageCount public="1" get="accessor" set="null"><x path="Int"/></pageCount>
		<selectedIndex public="1" get="accessor" set="accessor"><x path="Int"/></selectedIndex>
		<addChild public="1" set="method" line="40" override="1"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<_onTabsChange set="method" line="33"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onTabsChange>
		<_stack><c path="haxe.ui.toolkit.containers.Stack"/></_stack>
		<_tabs><c path="haxe.ui.toolkit.controls.TabBar"/></_tabs>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls._Button.ButtonLayout" params="" file="src/haxe/ui/toolkit/controls/Button.hx" private="1" module="haxe.ui.toolkit.controls.Button">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<repositionChildren set="method" line="352" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<set_labelPosition set="method" line="344"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_labelPosition>
		<get_labelPosition set="method" line="340"><f a=""><c path="String"/></f></get_labelPosition>
		<set_iconPosition set="method" line="335"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_iconPosition>
		<get_iconPosition set="method" line="331"><f a=""><c path="String"/></f></get_iconPosition>
		<labelPosition public="1" get="accessor" set="accessor"><c path="String"/></labelPosition>
		<iconPosition public="1" get="accessor" set="accessor"><c path="String"/></iconPosition>
		<_labelPos><c path="String"/></_labelPos>
		<_iconPos><c path="String"/></_iconPos>
		<new public="1" set="method" line="321"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.Calendar" params="" file="src/haxe/ui/toolkit/controls/Calendar.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<mouseClickButton set="method" line="139"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></mouseClickButton>
		<buildMouseClickFunction set="method" line="135"><f a="index">
	<x path="Int"/>
	<f a="event">
		<c path="flash.events.MouseEvent"/>
		<x path="Void"/>
	</f>
</f></buildMouseClickFunction>
		<getEndDay set="method" line="120"><f a="month:year">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getEndDay>
		<set_selectedDate set="method" line="111"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_selectedDate>
		<get_selectedDate set="method" line="107"><f a=""><c path="Date"/></f></get_selectedDate>
		<set_date set="method" line="81"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_date>
		<get_date set="method" line="77"><f a=""><c path="Date"/></f></get_date>
		<selectedDate public="1" get="accessor" set="accessor"><c path="Date"/></selectedDate>
		<date public="1" get="accessor" set="accessor"><c path="Date"/></date>
		<nextMonth public="1" set="method" line="61"><f a=""><x path="Void"/></f></nextMonth>
		<previousMonth public="1" set="method" line="51"><f a=""><x path="Void"/></f></previousMonth>
		<preInitialize set="method" line="34" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_selectedDate><c path="Date"/></_selectedDate>
		<_day><x path="Int"/></_day>
		<_month><x path="Int"/></_month>
		<_year><x path="Int"/></_year>
		<_date><c path="Date"/></_date>
		<_dayItems><c path="Array"><c path="haxe.ui.toolkit.controls._Calendar.CalendarDay"/></c></_dayItems>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls._Calendar.CalendarDay" params="" file="src/haxe/ui/toolkit/controls/Calendar.hx" private="1" module="haxe.ui.toolkit.controls.Calendar">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<new public="1" set="method" line="148"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls._Calendar.CalendarLayout" params="" file="src/haxe/ui/toolkit/controls/Calendar.hx" private="1" module="haxe.ui.toolkit.controls.Calendar">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<resizeChildren set="method" line="161" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="154"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.CheckBox" params="" file="src/haxe/ui/toolkit/controls/CheckBox.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<set_selected set="method" line="69"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selected>
		<get_selected set="method" line="65"><f a=""><x path="Bool"/></f></get_selected>
		<selected public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Defines whether the checkbox is checked or not</haxe_doc>
		</selected>
		<set_text set="method" line="51" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_text set="method" line="47" override="1"><f a=""><c path="String"/></f></get_text>
		<initialize set="method" line="33" override="1"><f a=""><x path="Void"/></f></initialize>
		<_label><c path="haxe.ui.toolkit.controls.Text"/></_label>
		<_value><c path="haxe.ui.toolkit.controls._CheckBox.CheckBoxValue"/></_value>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Simple two state checkbox control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when the value of the checkbox is modified]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.Value" params="" file="src/haxe/ui/toolkit/controls/Value.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<set_interactive set="method" line="91"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_interactive>
		<get_interactive set="method" line="87"><f a=""><x path="Bool"/></f></get_interactive>
		<set_value set="method" line="72"><f a="newValue">
	<c path="String"/>
	<c path="String"/>
</f></set_value>
		<get_value set="method" line="68"><f a=""><c path="String"/></f></get_value>
		<interactive public="1" get="accessor" set="accessor"><x path="Bool"/></interactive>
		<value public="1" get="accessor" set="accessor"><c path="String"/></value>
		<_onMouseClick set="method" line="56"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<cycleValues public="1" set="method" line="44"><f a=""><x path="Void"/></f></cycleValues>
		<addValue public="1" set="method" line="31"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></addValue>
		<_interactive><x path="Bool"/></_interactive>
		<_value><c path="String"/></_value>
		<_valuesList><c path="Array"><c path="String"/></c></_valuesList>
		<_values><x path="Map">
	<c path="String"/>
	<c path="haxe.ui.toolkit.controls.Button"/>
</x></_values>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
		<haxe_doc>N-state cyclic value control</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls._CheckBox.CheckBoxValue" params="" file="src/haxe/ui/toolkit/controls/CheckBox.hx" private="1" module="haxe.ui.toolkit.controls.CheckBox">
		<extends path="haxe.ui.toolkit.controls.Value"/>
		<new public="1" set="method" line="84"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDirectional" params="" file="src/haxe/ui/toolkit/core/interfaces/IDirectional.hx" interface="1"><direction public="1" get="null" set="null"><c path="String"/></direction></class>
	<class path="haxe.ui.toolkit.core.interfaces.IScrollable" params="" file="src/haxe/ui/toolkit/core/interfaces/IScrollable.hx" interface="1">
		<incrementSize public="1" get="null" set="null"><x path="Float"/></incrementSize>
		<pageSize public="1" get="null" set="null"><x path="Float"/></pageSize>
		<max public="1" get="null" set="null"><x path="Float"/></max>
		<min public="1" get="null" set="null"><x path="Float"/></min>
		<pos public="1" get="null" set="null"><x path="Float"/></pos>
	</class>
	<class path="haxe.ui.toolkit.controls.Progress" params="" file="src/haxe/ui/toolkit/controls/Progress.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDirectional"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IScrollable"/>
		<set_incrementSize set="method" line="145"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_incrementSize>
		<get_incrementSize set="method" line="141"><f a=""><x path="Float"/></f></get_incrementSize>
		<set_pageSize set="method" line="137"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pageSize>
		<get_pageSize set="method" line="133"><f a=""><x path="Float"/></f></get_pageSize>
		<set_pos set="method" line="117"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<get_pos set="method" line="113"><f a=""><x path="Float"/></f></get_pos>
		<set_max set="method" line="108"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_max>
		<get_max set="method" line="104"><f a=""><x path="Float"/></f></get_max>
		<set_min set="method" line="99"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_min>
		<get_min set="method" line="95"><f a=""><x path="Float"/></f></get_min>
		<set_direction set="method" line="85"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_direction>
		<get_direction set="method" line="81"><f a=""><c path="String"/></f></get_direction>
		<incrementSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>How much the scrollbar should increment (or deincrement)</haxe_doc>
		</incrementSize>
		<pageSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Not applicable to progress bar</haxe_doc>
		</pageSize>
		<pos public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Value of the progress bar</haxe_doc>
		</pos>
		<max public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Maximum value allowed for the progress bar</haxe_doc>
		</max>
		<min public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Minimum value allowed for the progress bar</haxe_doc>
		</min>
		<direction public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>The direction of this progress bar. Can be `horizontal` or `vertical`</haxe_doc>
		</direction>
		<initialize set="method" line="46" override="1"><f a=""><x path="Void"/></f></initialize>
		<_valueComp><c path="haxe.ui.toolkit.core.Component"/></_valueComp>
		<_valueBgComp><c path="haxe.ui.toolkit.core.Component"/></_valueBgComp>
		<_incrementSize><x path="Float"/></_incrementSize>
		<_pos><x path="Float"/></_pos>
		<_max><x path="Float"/></_max>
		<_min><x path="Float"/></_min>
		<_direction><c path="String"/></_direction>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Progress bar control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the progess bar has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.HProgress" params="" file="src/haxe/ui/toolkit/controls/HProgress.hx">
		<extends path="haxe.ui.toolkit.controls.Progress"/>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Horizontal progress bar control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the progess bar has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.Scroll" params="" file="src/haxe/ui/toolkit/controls/Scroll.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDirectional"/>
		<set_direction set="method" line="33"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_direction>
		<get_direction set="method" line="29"><f a=""><c path="String"/></f></get_direction>
		<direction public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>The direction of this progress bar. Can be `horizontal` or `vertical`</haxe_doc>
		</direction>
		<_direction><c path="String"/></_direction>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Scrollbar control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the scrollbar has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.HScroll" params="" file="src/haxe/ui/toolkit/controls/HScroll.hx">
		<extends path="haxe.ui.toolkit.controls.Scroll"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IScrollable"/>
		<incrementValue public="1" set="method" line="296">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Increment the scrollbar value by `incrementSize`</haxe_doc>
		</incrementValue>
		<deincrementValue public="1" set="method" line="289">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Deincrement the scrollbar value by `incrementSize`</haxe_doc>
		</deincrementValue>
		<set_incrementSize set="method" line="278"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_incrementSize>
		<get_incrementSize set="method" line="274"><f a=""><x path="Float"/></f></get_incrementSize>
		<set_pageSize set="method" line="266"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pageSize>
		<get_pageSize set="method" line="262"><f a=""><x path="Float"/></f></get_pageSize>
		<set_max set="method" line="251"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_max>
		<get_max set="method" line="247"><f a=""><x path="Float"/></f></get_max>
		<set_min set="method" line="236"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_min>
		<get_min set="method" line="232"><f a=""><x path="Float"/></f></get_min>
		<set_pos set="method" line="216"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<get_pos set="method" line="212"><f a=""><x path="Float"/></f></get_pos>
		<incrementSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>How much the scrollbar should increment (or deincrement) when using the scroll buttons</haxe_doc>
		</incrementSize>
		<pageSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>The size of one page for the scrollbar (affects the size of the thumb)</haxe_doc>
		</pageSize>
		<max public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Maximum value allowed for the scrollbar</haxe_doc>
		</max>
		<min public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Minimum value allowed for the scrollbar</haxe_doc>
		</min>
		<pos public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Value of the scrollbar</haxe_doc>
		</pos>
		<_onMouseDown set="method" line="171"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<_onScrollTimerComplete set="method" line="159"><f a="event">
	<c path="flash.events.TimerEvent"/>
	<x path="Void"/>
</f></_onScrollTimerComplete>
		<_onInc set="method" line="147"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onInc>
		<_onDeinc set="method" line="135"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onDeinc>
		<_onScreenMouseUp set="method" line="126"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseUp>
		<_onScreenMouseMove set="method" line="102"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onThumbMouseDown set="method" line="94"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onThumbMouseDown>
		<initialize set="method" line="61" override="1"><f a=""><x path="Void"/></f></initialize>
		<preInitialize set="method" line="51" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_hasButtons><x path="Bool"/></_hasButtons>
		<_scrollTimer><c path="flash.utils.Timer"/></_scrollTimer>
		<_scrollDirection><x path="Int"/></_scrollDirection>
		<_mouseDownOffset><x path="Float"/></_mouseDownOffset>
		<_thumb><c path="haxe.ui.toolkit.controls.Button"/></_thumb>
		<_incButton><c path="haxe.ui.toolkit.controls.Button"/></_incButton>
		<_deincButton><c path="haxe.ui.toolkit.controls.Button"/></_deincButton>
		<_incrementSize><x path="Float"/></_incrementSize>
		<_pageSize><x path="Float"/></_pageSize>
		<_max><x path="Float"/></_max>
		<_min><x path="Float"/></_min>
		<_pos><x path="Float"/></_pos>
		<new public="1" set="method" line="43"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Horizontal scrollbar control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the slider bar has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls._HScroll.HScrollLayout" params="" file="src/haxe/ui/toolkit/controls/HScroll.hx" private="1" module="haxe.ui.toolkit.controls.HScroll">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<get_usableWidth set="method" line="351" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<repositionChildren public="1" set="method" line="324" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren public="1" set="method" line="306" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="302"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.Slider" params="" file="src/haxe/ui/toolkit/controls/Slider.hx">
		<extends path="haxe.ui.toolkit.controls.Progress"/>
		<_onMouseWheel set="method" line="56"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseWheel>
		<_onScreenMouseUp set="method" line="50"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseUp>
		<_onScreenMouseMove set="method" line="47"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onMouseDown set="method" line="44"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<initialize set="method" line="29" override="1"><f a=""><x path="Void"/></f></initialize>
		<_mouseDownOffset><x path="Float"/></_mouseDownOffset>
		<_thumb><c path="haxe.ui.toolkit.controls.Button"/></_thumb>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Slider bar control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the slider bar has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.HSlider" params="" file="src/haxe/ui/toolkit/controls/HSlider.hx">
		<extends path="haxe.ui.toolkit.controls.Slider"/>
		<_onScreenMouseMove set="method" line="32" override="1"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onMouseDown set="method" line="24" override="1"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Horizontal slider bar control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the progess bar has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.Image" params="" file="src/haxe/ui/toolkit/controls/Image.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<set_resource set="method" line="59"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_resource>
		<get_resource set="method" line="55"><f a=""><c path="String"/></f></get_resource>
		<resource public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>The resource asset for this image: eg `assets/myimage.jpeg`</haxe_doc>
		</resource>
		<dispose public="1" set="method" line="38" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroy the image and free the resources (will be called by the framework automatically)</haxe_doc>
		</dispose>
		<initialize set="method" line="24" override="1"><f a=""><x path="Void"/></f></initialize>
		<_resource><c path="String"/></_resource>
		<_bmp><c path="flash.display.Bitmap"/></_bmp>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<haxe_doc>General purpose image control</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.OptionBox" params="" file="src/haxe/ui/toolkit/controls/OptionBox.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<_groups static="1"><c path="haxe.ds.StringMap"><c path="Array"><c path="haxe.ui.toolkit.controls.OptionBox"/></c></c></_groups>
		<optionInGroup set="method" line="136" static="1"><f a="value:option">
	<c path="String"/>
	<c path="haxe.ui.toolkit.controls.OptionBox"/>
	<x path="Bool"/>
</f></optionInGroup>
		<set_group set="method" line="111"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_group>
		<get_group set="method" line="107"><f a=""><c path="String"/></f></get_group>
		<set_selected set="method" line="84"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selected>
		<get_selected set="method" line="80"><f a=""><x path="Bool"/></f></get_selected>
		<group public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Defines the group for this option. Options belonging to the same group will only ever have a single option selected.</haxe_doc>
		</group>
		<selected public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Defines whether the option is checked or not, if set to `true` then other options of the same group will be deselected.</haxe_doc>
		</selected>
		<set_text set="method" line="62" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_text set="method" line="58" override="1"><f a=""><c path="String"/></f></get_text>
		<initialize set="method" line="42" override="1"><f a=""><x path="Void"/></f></initialize>
		<_group><c path="String"/></_group>
		<_label><c path="haxe.ui.toolkit.controls.Text"/></_label>
		<_value><c path="haxe.ui.toolkit.controls._OptionBox.OptionBoxValue"/></_value>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Simple two state option control (supports groups)
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the option group has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls._OptionBox.OptionBoxValue" params="" file="src/haxe/ui/toolkit/controls/OptionBox.hx" private="1" module="haxe.ui.toolkit.controls.OptionBox">
		<extends path="haxe.ui.toolkit.controls.Value"/>
		<new public="1" set="method" line="152"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls._Progress.HProgressLayout" params="" file="src/haxe/ui/toolkit/controls/Progress.hx" private="1" module="haxe.ui.toolkit.controls.Progress">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<repositionChildren public="1" set="method" line="193" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren public="1" set="method" line="156" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="152"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls._Progress.VProgressLayout" params="" file="src/haxe/ui/toolkit/controls/Progress.hx" private="1" module="haxe.ui.toolkit.controls.Progress">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<repositionChildren public="1" set="method" line="263" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren public="1" set="method" line="227" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="223"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.Spacer" params="" file="src/haxe/ui/toolkit/controls/Spacer.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<haxe_doc>General purpose spacer component</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.TabBar" params="" file="src/haxe/ui/toolkit/controls/TabBar.hx">
		<extends path="haxe.ui.toolkit.containers.ScrollView"/>
		<mouseClickButton set="method" line="90"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></mouseClickButton>
		<buildMouseClickFunction set="method" line="86"><f a="index">
	<x path="Int"/>
	<f a="event">
		<c path="flash.events.MouseEvent"/>
		<x path="Void"/>
	</f>
</f></buildMouseClickFunction>
		<addTab public="1" set="method" line="75">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a new button to the tab bar with the specified `text`</haxe_doc>
		</addTab>
		<set_selectedIndex set="method" line="51"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<get_selectedIndex set="method" line="47"><f a=""><x path="Int"/></f></get_selectedIndex>
		<selectedIndex public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>Gets (or sets) the selected button index for the tab bar</haxe_doc>
		</selectedIndex>
		<initialize set="method" line="35" override="1"><f a=""><x path="Void"/></f></initialize>
		<_selectedIndex><x path="Int"/></_selectedIndex>
		<_content><c path="haxe.ui.toolkit.containers.HBox"/></_content>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Horizontally scrollable tab bar
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when the selection is changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.Text" params="" file="src/haxe/ui/toolkit/controls/Text.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<set_multiline set="method" line="99"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multiline>
		<get_multiline set="method" line="95"><f a=""><x path="Bool"/></f></get_multiline>
		<multiline public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Defines whether or not the text can span more than a single line</haxe_doc>
		</multiline>
		<applyStyle set="method" line="74" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<set_width set="method" line="62" override="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<set_text set="method" line="51" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_text set="method" line="47" override="1"><f a=""><c path="String"/></f></get_text>
		<dispose public="1" set="method" line="39" override="1"><f a=""><x path="Void"/></f></dispose>
		<initialize set="method" line="23" override="1"><f a=""><x path="Void"/></f></initialize>
		<_textDisplay><c path="haxe.ui.toolkit.text.ITextDisplay"/></_textDisplay>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Generic non-editable text component (supports multiline text)</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.TextInput" params="" file="src/haxe/ui/toolkit/controls/TextInput.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<checkScrolls set="method" line="188"><f a=""><x path="Void"/></f></checkScrolls>
		<replaceSelectedText public="1" set="method" line="181">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the selected text (if available) to with the specified string</haxe_doc>
		</replaceSelectedText>
		<get_selectedTextFormat set="method" line="170"><f a=""><c path="flash.text.TextFormat"/></f></get_selectedTextFormat>
		<get_selectionEndIndex set="method" line="161"><f a=""><x path="Int"/></f></get_selectionEndIndex>
		<get_selectionBeginIndex set="method" line="152"><f a=""><x path="Int"/></f></get_selectionBeginIndex>
		<set_multiline set="method" line="147"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multiline>
		<get_multiline set="method" line="143"><f a=""><x path="Bool"/></f></get_multiline>
		<selectedTextFormat public="1" get="accessor" set="null">
			<c path="flash.text.TextFormat"/>
			<haxe_doc>Sets the currently selected text (if available) to the specified text format</haxe_doc>
		</selectedTextFormat>
		<selectionEndIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The end position of the selected text</haxe_doc>
		</selectionEndIndex>
		<selectionBeginIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The start position of the selected text</haxe_doc>
		</selectionBeginIndex>
		<multiline public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Defines whether or not the text can span more than a single line. Vertical and horizontal scrollbars will be added as needed.</haxe_doc>
		</multiline>
		<applyStyle set="method" line="114" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<set_text set="method" line="104" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_text set="method" line="100" override="1"><f a=""><c path="String"/></f></get_text>
		<_onHScrollChange set="method" line="90"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onHScrollChange>
		<_onVScrollChange set="method" line="82"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onVScrollChange>
		<_onTextScroll set="method" line="78"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onTextScroll>
		<_onTextChange set="method" line="74"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onTextChange>
		<invalidate public="1" set="method" line="60" override="1"><f a="?type">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidate>
		<dispose public="1" set="method" line="53" override="1"><f a=""><x path="Void"/></f></dispose>
		<initialize set="method" line="38" override="1"><f a=""><x path="Void"/></f></initialize>
		<preInitialize set="method" line="34" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_hscroll><c path="haxe.ui.toolkit.controls.HScroll"/></_hscroll>
		<_vscroll><c path="haxe.ui.toolkit.controls.VScroll"/></_vscroll>
		<_textDisplay><c path="haxe.ui.toolkit.text.ITextDisplay"/></_textDisplay>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Generic editable text component (supports multiline text)</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls._TextInput.TextInputLayout" params="" file="src/haxe/ui/toolkit/controls/TextInput.hx" private="1" module="haxe.ui.toolkit.controls.TextInput">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<get_usableHeight set="method" line="288" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<get_usableWidth set="method" line="279" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<repositionChildren public="1" set="method" line="265" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren public="1" set="method" line="245" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="241"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.VProgress" params="" file="src/haxe/ui/toolkit/controls/VProgress.hx">
		<extends path="haxe.ui.toolkit.controls.Progress"/>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Vertical progress bar control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the progess bar has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.VScroll" params="" file="src/haxe/ui/toolkit/controls/VScroll.hx">
		<extends path="haxe.ui.toolkit.controls.Scroll"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IScrollable"/>
		<incrementValue public="1" set="method" line="295">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Increment the scrollbar value by `incrementSize`</haxe_doc>
		</incrementValue>
		<deincrementValue public="1" set="method" line="288">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Deincrement the scrollbar value by `incrementSize`</haxe_doc>
		</deincrementValue>
		<set_incrementSize set="method" line="277"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_incrementSize>
		<get_incrementSize set="method" line="273"><f a=""><x path="Float"/></f></get_incrementSize>
		<set_pageSize set="method" line="265"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pageSize>
		<get_pageSize set="method" line="261"><f a=""><x path="Float"/></f></get_pageSize>
		<set_max set="method" line="250"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_max>
		<get_max set="method" line="246"><f a=""><x path="Float"/></f></get_max>
		<set_min set="method" line="235"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_min>
		<get_min set="method" line="231"><f a=""><x path="Float"/></f></get_min>
		<set_pos set="method" line="215"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<get_pos set="method" line="211"><f a=""><x path="Float"/></f></get_pos>
		<incrementSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>How much the scrollbar should increment (or deincrement) when using the scroll buttons</haxe_doc>
		</incrementSize>
		<pageSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>The size of one page for the scrollbar (affects the size of the thumb)</haxe_doc>
		</pageSize>
		<max public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Maximum value allowed for the scrollbar</haxe_doc>
		</max>
		<min public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Minimum value allowed for the scrollbar</haxe_doc>
		</min>
		<pos public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Value of the scrollbar</haxe_doc>
		</pos>
		<_onMouseDown set="method" line="170"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<_onScrollTimerComplete set="method" line="158"><f a="event">
	<c path="flash.events.TimerEvent"/>
	<x path="Void"/>
</f></_onScrollTimerComplete>
		<_onInc set="method" line="146"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onInc>
		<_onDeinc set="method" line="134"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onDeinc>
		<_onScreenMouseUp set="method" line="125"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseUp>
		<_onScreenMouseMove set="method" line="101"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onThumbMouseDown set="method" line="93"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onThumbMouseDown>
		<initialize set="method" line="60" override="1"><f a=""><x path="Void"/></f></initialize>
		<preInitialize set="method" line="50" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_hasButtons><x path="Bool"/></_hasButtons>
		<_scrollTimer><c path="flash.utils.Timer"/></_scrollTimer>
		<_scrollDirection><x path="Int"/></_scrollDirection>
		<_mouseDownOffset><x path="Float"/></_mouseDownOffset>
		<_thumb><c path="haxe.ui.toolkit.controls.Button"/></_thumb>
		<_incButton><c path="haxe.ui.toolkit.controls.Button"/></_incButton>
		<_deincButton><c path="haxe.ui.toolkit.controls.Button"/></_deincButton>
		<_incrementSize><x path="Float"/></_incrementSize>
		<_pageSize><x path="Float"/></_pageSize>
		<_max><x path="Float"/></_max>
		<_min><x path="Float"/></_min>
		<_pos><x path="Float"/></_pos>
		<new public="1" set="method" line="42"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Vertical scrollbar control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the slider bar has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls._VScroll.VScrollLayout" params="" file="src/haxe/ui/toolkit/controls/VScroll.hx" private="1" module="haxe.ui.toolkit.controls.VScroll">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<get_usableHeight set="method" line="350" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<repositionChildren public="1" set="method" line="323" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren public="1" set="method" line="305" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="301"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.VSlider" params="" file="src/haxe/ui/toolkit/controls/VSlider.hx">
		<extends path="haxe.ui.toolkit.controls.Slider"/>
		<_onScreenMouseMove set="method" line="32" override="1"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onMouseDown set="method" line="24" override="1"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Vertical slider bar control
 
 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when value of the progess bar has changed]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.extended.Code" params="" file="src/haxe/ui/toolkit/controls/extended/Code.hx">
		<extends path="haxe.ui.toolkit.controls.TextInput"/>
		<applyRules set="method" line="84"><f a=""><x path="Void"/></f></applyRules>
		<_onCodeKeyDown set="method" line="74"><f a="event">
	<c path="flash.events.KeyboardEvent"/>
	<x path="Void"/>
</f></_onCodeKeyDown>
		<_onCodeChange set="method" line="70"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onCodeChange>
		<set_syntax set="method" line="61"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_syntax>
		<get_syntax set="method" line="57"><f a=""><c path="String"/></f></get_syntax>
		<syntax public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Syntax to use for highlighting, valid options are:
	
	 * `haxe` - Haxe syntax</haxe_doc>
		</syntax>
		<set_text set="method" line="40" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<dispose public="1" set="method" line="34" override="1"><f a=""><x path="Void"/></f></dispose>
		<initialize set="method" line="26" override="1"><f a=""><x path="Void"/></f></initialize>
		<_syntax><c path="haxe.ui.toolkit.controls.extended.syntax.CodeSyntax"/></_syntax>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Simple regex based syntax highlighting component</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.extended.RTF" params="" file="src/haxe/ui/toolkit/controls/extended/RTF.hx">
		<extends path="haxe.ui.toolkit.controls.TextInput"/>
		<applyRTFStyle set="method" line="121"><f a="what:?value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></applyRTFStyle>
		<alignJustify public="1" set="method" line="117">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Horizontally justifies the currently selected text</haxe_doc>
		</alignJustify>
		<alignRight public="1" set="method" line="110">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Horizontally aligns the currently selected text to the right</haxe_doc>
		</alignRight>
		<alignCenter public="1" set="method" line="103">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Horizontally aligns the currently selected text to the center</haxe_doc>
		</alignCenter>
		<alignLeft public="1" set="method" line="96">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Horizontally aligns the currently selected text to the left</haxe_doc>
		</alignLeft>
		<bullet public="1" set="method" line="89">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Formats the currently selected text as bullet points</haxe_doc>
		</bullet>
		<fontName public="1" set="method" line="82">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the currently selected text to the specified font name</haxe_doc>
		</fontName>
		<fontSize public="1" set="method" line="75">
			<f a="size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the currently selected text to the specified font size</haxe_doc>
		</fontSize>
		<underline public="1" set="method" line="68">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets the currently selected text to underlined</haxe_doc>
		</underline>
		<italic public="1" set="method" line="61">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets the currently selected text to italic</haxe_doc>
		</italic>
		<bold public="1" set="method" line="54">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets the currently selected text to bold</haxe_doc>
		</bold>
		<set_htmlText set="method" line="37"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_htmlText>
		<get_htmlText set="method" line="32"><f a=""><c path="String"/></f></get_htmlText>
		<htmlText public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Gets or sets the rich text of the editor from a html string</haxe_doc>
		</htmlText>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Basic rich text editor
 
 Note - The `RTF` class does not contain the controls to apply styles to the text, merely the functions. For a full rich text editor (including controls) see `RTFView`.</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.extended.syntax.CodeSyntax" params="" file="src/haxe/ui/toolkit/controls/extended/syntax/CodeSyntax.hx">
		<getSyntax public="1" set="method" line="22" static="1"><f a="id">
	<c path="String"/>
	<c path="haxe.ui.toolkit.controls.extended.syntax.CodeSyntax"/>
</f></getSyntax>
		<getCompiledRule public="1" set="method" line="57"><f a="rule">
	<c path="String"/>
	<c path="EReg"/>
</f></getCompiledRule>
		<get_rules set="method" line="50"><f a=""><x path="Map">
	<c path="String"/>
	<c path="flash.text.TextFormat"/>
</x></f></get_rules>
		<set_defaultFormat set="method" line="45"><f a="value">
	<c path="flash.text.TextFormat"/>
	<c path="flash.text.TextFormat"/>
</f></set_defaultFormat>
		<get_defaultFormat set="method" line="41"><f a=""><c path="flash.text.TextFormat"/></f></get_defaultFormat>
		<get_identifier set="method" line="37"><f a=""><c path="String"/></f></get_identifier>
		<rules public="1" get="accessor" set="null"><x path="Map">
	<c path="String"/>
	<c path="flash.text.TextFormat"/>
</x></rules>
		<defaultFormat public="1" get="accessor" set="accessor"><c path="flash.text.TextFormat"/></defaultFormat>
		<identifier public="1" get="accessor" set="null"><c path="String"/></identifier>
		<addRule public="1" set="method" line="17"><f a="regex:color">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addRule>
		<_identifier><c path="String"/></_identifier>
		<_defaultFormat><c path="flash.text.TextFormat"/></_defaultFormat>
		<_compiledRules><x path="Map">
	<c path="String"/>
	<c path="EReg"/>
</x></_compiledRules>
		<_rules><x path="Map">
	<c path="String"/>
	<c path="flash.text.TextFormat"/>
</x></_rules>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.extended.syntax.HaxeSyntax" params="" file="src/haxe/ui/toolkit/controls/extended/syntax/HaxeSyntax.hx">
		<extends path="haxe.ui.toolkit.controls.extended.syntax.CodeSyntax"/>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.PopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/PopupContent.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Empty popup content</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.SimplePopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/SimplePopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.PopupContent"/>
		<initialize set="method" line="21" override="1"><f a=""><x path="Void"/></f></initialize>
		<_textControl><c path="haxe.ui.toolkit.controls.Text"/></_textControl>
		<new public="1" set="method" line="11"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Basic text popup (resizes based on content)</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.BusyPopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/BusyPopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.SimplePopupContent"/>
		<initialize set="method" line="15" override="1"><f a=""><x path="Void"/></f></initialize>
		<new public="1" set="method" line="8"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Text content for busy popups</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.CalendarPopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/CalendarPopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.PopupContent"/>
		<set_selectedDate set="method" line="33"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_selectedDate>
		<get_selectedDate set="method" line="29"><f a=""><c path="Date"/></f></get_selectedDate>
		<selectedDate public="1" get="accessor" set="accessor"><c path="Date"/></selectedDate>
		<initialize set="method" line="17" override="1"><f a=""><x path="Void"/></f></initialize>
		<_cal><c path="haxe.ui.toolkit.containers.CalendarView"/></_cal>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.CustomPopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/CustomPopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.PopupContent"/>
		<initialize set="method" line="20" override="1"><f a=""><x path="Void"/></f></initialize>
		<_display><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></_display>
		<new public="1" set="method" line="11"><f a="display">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Custom popup content that resizes based on size</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.ListPopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/ListPopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.PopupContent"/>
		<onTimerComplete set="method" line="59"><f a="event">
	<c path="flash.events.TimerEvent"/>
	<x path="Void"/>
</f></onTimerComplete>
		<_onListChange set="method" line="53"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onListChange>
		<initialize set="method" line="34" override="1"><f a=""><x path="Void"/></f></initialize>
		<_fn><f a="">
	<d/>
	<x path="Void"/>
</f></_fn>
		<hideTimer><c path="flash.utils.Timer"/></hideTimer>
		<_maxListSize><x path="Int"/></_maxListSize>
		<_list><c path="haxe.ui.toolkit.containers.ListView"/></_list>
		<new public="1" set="method" line="21"><f a="dataSource:?selectedIndex:fn">
	<c path="haxe.ui.toolkit.data.IDataSource"/>
	<x path="Int"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc>List content for list popups</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDraggable" params="" file="src/haxe/ui/toolkit/core/interfaces/IDraggable.hx" interface="1"><allowDrag public="1" set="method"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Bool"/>
</f></allowDrag></class>
	<class path="haxe.ui.toolkit.controls.popups.Popup" params="" file="src/haxe/ui/toolkit/controls/popups/Popup.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDraggable"/>
		<addStandardButton set="method" line="126"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addStandardButton>
		<allowDrag public="1" set="method" line="119">
			<f a="event">
				<c path="flash.events.MouseEvent"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if the popup can be dragged by ensuring the mouse is in the title bar</haxe_doc>
		</allowDrag>
		<initialize set="method" line="72" override="1"><f a=""><x path="Void"/></f></initialize>
		<_fn><f a="">
	<d/>
	<x path="Void"/>
</f></_fn>
		<_config><c path="haxe.ui.toolkit.core.PopupConfig"/></_config>
		<_buttonBar><c path="haxe.ui.toolkit.containers.HBox"/></_buttonBar>
		<_content><c path="haxe.ui.toolkit.controls.popups.PopupContent"/></_content>
		<_title><c path="haxe.ui.toolkit.controls.Text"/></_title>
		<_titleBar><c path="haxe.ui.toolkit.containers.HBox"/></_titleBar>
		<new public="1" set="method" line="36">
			<f a="?title:?content:?config:?fn">
				<c path="String"/>
				<c path="haxe.ui.toolkit.controls.popups.PopupContent"/>
				<c path="haxe.ui.toolkit.core.PopupConfig"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new popup
	 
	 * `title` - The title of the popup

	 * `content` - The content of the popup
	 
	 * `config` - Configuration options for the popup (buttons, etc)
	 
	 * `fn` - Callback invoked when buttons are clicked
	 
	 Note - Creating the popup does not display it, use `PopupManager.showPopup` to display it.</haxe_doc>
		</new>
		<haxe_doc>Simple modal, draggable popup component</haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.selection.Date" params="" file="src/haxe/ui/toolkit/controls/selection/Date.hx">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<onDateChange set="method" line="162"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></onDateChange>
		<_onRootMouseDown set="method" line="148"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onRootMouseDown>
		<set_method set="method" line="140"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_method>
		<get_method set="method" line="136"><f a=""><c path="String"/></f></get_method>
		<method public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Specifies the method to display the calendar, valid values are:
		 
	 * `default` - The calendar will be displayed under the button, similar to a standard drop down box

	 * `popup` - The calendar will be a modal popup of the choices, this is more suited to mobile applications</haxe_doc>
		</method>
		<hideCalendar public="1" set="method" line="102"><f a=""><x path="Void"/></f></hideCalendar>
		<showCalendar public="1" set="method" line="53"><f a=""><x path="Void"/></f></showCalendar>
		<_onMouseClick set="method" line="41" override="1"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<initialize set="method" line="37" override="1"><f a=""><x path="Void"/></f></initialize>
		<preInitialize set="method" line="27" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_method><c path="String"/></_method>
		<_cal><c path="haxe.ui.toolkit.containers.CalendarView"/></_cal>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.controls.selection.List" params="" file="src/haxe/ui/toolkit/controls/selection/List.hx">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDataComponent"/>
		<_onListChange set="method" line="233"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onListChange>
		<_onRootMouseDown set="method" line="219"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onRootMouseDown>
		<get_selectedItems set="method" line="212"><f a=""><c path="Array"><c path="haxe.ui.toolkit.containers.ListViewItem"/></c></f></get_selectedItems>
		<selectedItems public="1" get="accessor" set="null">
			<c path="Array"><c path="haxe.ui.toolkit.containers.ListViewItem"/></c>
			<haxe_doc>Returns an array of the selected list items</haxe_doc>
		</selectedItems>
		<set_method set="method" line="199"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_method>
		<get_method set="method" line="195"><f a=""><c path="String"/></f></get_method>
		<method public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Specifies the method to display the list, valid values are:
		 
	 * `default` - The list will be displayed under the button, similar to a standard drop down box

	 * `popup` - The list will be a modal popup of the choices, this is more suited to mobile applications</haxe_doc>
		</method>
		<hideList public="1" set="method" line="161">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Hides the list from the user</haxe_doc>
		</hideList>
		<showList public="1" set="method" line="96">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Displays the list to the user based on `method` (this will be called automatically when the user clicks the button)</haxe_doc>
		</showList>
		<set_dataSource set="method" line="85"><f a="value">
	<c path="haxe.ui.toolkit.data.IDataSource"/>
	<c path="haxe.ui.toolkit.data.IDataSource"/>
</f></set_dataSource>
		<get_dataSource set="method" line="78"><f a=""><c path="haxe.ui.toolkit.data.IDataSource"/></f></get_dataSource>
		<dataSource public="1" get="accessor" set="accessor">
			<c path="haxe.ui.toolkit.data.IDataSource"/>
			<haxe_doc>Specifies the data source where the list will get its options from</haxe_doc>
		</dataSource>
		<_onMouseClick set="method" line="61" override="1"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<preInitialize set="method" line="51" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_selectedItems><c path="Array"><c path="haxe.ui.toolkit.containers.ListViewItem"/></c></_selectedItems>
		<_selectedIndex><x path="Int"/></_selectedIndex>
		<_method><c path="String"/></_method>
		<_maxListSize><x path="Int"/></_maxListSize>
		<_list><c path="haxe.ui.toolkit.containers.ListView"/></_list>
		<_dataSource><c path="haxe.ui.toolkit.data.IDataSource"/></_dataSource>
		<new public="1" set="method" line="43"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Allows the user to select an item from a list

 The way in which the list is displayed after the user clicks the button depends on the `method` property:
 
 * `default` - The list will be displayed under the button, similar to a standard drop down box
 * `popup` - The list will be a modal popup of the choices, this is more suited to mobile applications

 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when the user selects a list item]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.controls.selection._List.DropDownList" params="" file="src/haxe/ui/toolkit/controls/selection/List.hx" private="1" module="haxe.ui.toolkit.controls.selection.List">
		<extends path="haxe.ui.toolkit.containers.ListView"/>
		<new public="1" set="method" line="246"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.ClassManager" params="" file="src/haxe/ui/toolkit/core/ClassManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.ClassManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.ClassManager"/></instance>
		<get_instance set="method" line="10" static="1"><f a=""><c path="haxe.ui.toolkit.core.ClassManager"/></f></get_instance>
		<registerDataSourceClassName set="method" line="99"><f a="className:simpleName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></registerDataSourceClassName>
		<registerDataSourceClass public="1" set="method" line="94"><f a="cls:simpleName">
	<x path="Class"><c path="haxe.ui.toolkit.data.IDataSource"/></x>
	<c path="String"/>
	<x path="Void"/>
</f></registerDataSourceClass>
		<getDataSourceClassName public="1" set="method" line="81"><f a="simpleName">
	<c path="String"/>
	<c path="String"/>
</f></getDataSourceClassName>
		<dataSourceClassMap><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry"/></c></dataSourceClassMap>
		<registerComponentClassName set="method" line="60"><f a="className:simpleName:prefix">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></registerComponentClassName>
		<registerComponentClass public="1" set="method" line="55"><f a="cls:simpleName:prefix">
	<x path="Class"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></x>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></registerComponentClass>
		<getComponentClassName public="1" set="method" line="38"><f a="simpleName:prefix">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></getComponentClassName>
		<componentClassMap><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry"/></c></componentClassMap>
		<componentClassPrefixMap><c path="haxe.ds.StringMap"><c path="String"/></c></componentClassPrefixMap>
		<registerDefaults set="method" line="24"><f a=""><x path="Void"/></f></registerDefaults>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry" params="" file="src/haxe/ui/toolkit/core/ClassManager.hx" private="1" module="haxe.ui.toolkit.core.ClassManager">
		<className public="1"><c path="String"/></className>
		<simpleName public="1"><c path="String"/></simpleName>
		<new public="1" set="method" line="112"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry" params="" file="src/haxe/ui/toolkit/core/ClassManager.hx" private="1" module="haxe.ui.toolkit.core.ClassManager">
		<extends path="haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry"/>
		<prefix public="1"><c path="String"/></prefix>
		<new public="1" set="method" line="120"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry" params="" file="src/haxe/ui/toolkit/core/ClassManager.hx" private="1" module="haxe.ui.toolkit.core.ClassManager">
		<extends path="haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry"/>
		<new public="1" set="method" line="124"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Client" params="" file="src/haxe/ui/toolkit/core/Client.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.Client"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.Client"/></instance>
		<get_instance set="method" line="8" static="1"><f a=""><c path="haxe.ui.toolkit.core.Client"/></f></get_instance>
		<get_screenHeight set="method" line="65"><f a=""><x path="Float"/></f></get_screenHeight>
		<get_screenWidth set="method" line="61"><f a=""><x path="Float"/></f></get_screenWidth>
		<get_target set="method" line="52"><f a=""><c path="String"/></f></get_target>
		<get_platform set="method" line="41"><f a=""><c path="String"/></f></get_platform>
		<get_dpi set="method" line="37"><f a=""><x path="Float"/></f></get_dpi>
		<get_language set="method" line="33"><f a=""><c path="String"/></f></get_language>
		<target public="1" get="accessor" set="null"><c path="String"/></target>
		<screenHeight public="1" get="accessor" set="null"><x path="Float"/></screenHeight>
		<screenWidth public="1" get="accessor" set="null"><x path="Float"/></screenWidth>
		<platform public="1" get="accessor" set="null"><c path="String"/></platform>
		<dpi public="1" get="accessor" set="null"><x path="Float"/></dpi>
		<language public="1" get="accessor" set="null"><c path="String"/></language>
		<init public="1" set="method" line="23"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Macros" params="" file="src/haxe/ui/toolkit/core/Macros.hx">
		<getClassNameFromType set="method" line="106" static="1"><f a="t">
	<e path="haxe.macro.Type"/>
	<c path="String"/>
</f></getClassNameFromType>
		<hasInterface set="method" line="122" static="1"><f a="t:interfaceRequired">
	<e path="haxe.macro.Type"/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasInterface>
	</class>
	<class path="haxe.ui.toolkit.core.PopupManager" params="" file="src/haxe/ui/toolkit/core/PopupManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.PopupManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.PopupManager"/></instance>
		<get_instance set="method" line="18" static="1"><f a=""><c path="haxe.ui.toolkit.core.PopupManager"/></f></get_instance>
		<getPopupConfig set="method" line="167"><f a="config">
	<d/>
	<c path="haxe.ui.toolkit.core.PopupConfig"/>
</f></getPopupConfig>
		<centerPopup public="1" set="method" line="162"><f a="p">
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
	<x path="Void"/>
</f></centerPopup>
		<hidePopup public="1" set="method" line="144"><f a="p">
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
	<x path="Void"/>
</f></hidePopup>
		<showPopup public="1" set="method" line="126"><f a="p">
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
	<x path="Void"/>
</f></showPopup>
		<showCalendar public="1" set="method" line="103"><f a="root:?title:?fn">
	<c path="haxe.ui.toolkit.core.Root"/>
	<c path="String"/>
	<f a=":">
		<d/>
		<c path="Date"/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showCalendar>
		<showBusy public="1" set="method" line="90"><f a="root:text:?delay:?title">
	<c path="haxe.ui.toolkit.core.Root"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showBusy>
		<showList public="1" set="method" line="60"><f a="root:items:?title:?selectedIndex:fn">
	<c path="haxe.ui.toolkit.core.Root"/>
	<d/>
	<c path="String"/>
	<x path="Int"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showList>
		<showCustom public="1" set="method" line="47"><f a="root:display:?title:?config:?fn">
	<c path="haxe.ui.toolkit.core.Root"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showCustom>
		<showSimple public="1" set="method" line="34"><f a="root:text:?title:?config:?fn">
	<c path="haxe.ui.toolkit.core.Root"/>
	<c path="String"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showSimple>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.PopupConfig" params="" file="src/haxe/ui/toolkit/core/PopupManager.hx" module="haxe.ui.toolkit.core.PopupManager">
		<addButton public="1" set="method" line="198"><f a="type">
	<x path="Int"/>
	<x path="Void"/>
</f></addButton>
		<buttons public="1"><c path="Array"><c path="haxe.ui.toolkit.core.PopupButtonConfig"/></c></buttons>
		<new public="1" set="method" line="194"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.PopupButtonConfig" params="" file="src/haxe/ui/toolkit/core/PopupManager.hx" module="haxe.ui.toolkit.core.PopupManager">
		<type public="1"><x path="Int"/></type>
		<new public="1" set="method" line="208"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.PopupButtonType" params="" file="src/haxe/ui/toolkit/core/PopupManager.hx" module="haxe.ui.toolkit.core.PopupManager">
		<OK public="1" get="inline" set="null" line="214" static="1"><x path="Int"/></OK>
		<YES public="1" get="inline" set="null" line="215" static="1"><x path="Int"/></YES>
		<NO public="1" get="inline" set="null" line="216" static="1"><x path="Int"/></NO>
		<CANCEL public="1" get="inline" set="null" line="217" static="1"><x path="Int"/></CANCEL>
		<CONFIRM public="1" get="inline" set="null" line="218" static="1"><x path="Int"/></CONFIRM>
		<CUSTOM public="1" get="inline" set="null" line="219" static="1"><x path="Int"/></CUSTOM>
	</class>
	<class path="haxe.ui.toolkit.core.Root" params="" file="src/haxe/ui/toolkit/core/Root.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<hideModalOverlay public="1" set="method" line="91"><f a=""><x path="Void"/></f></hideModalOverlay>
		<showModalOverlay public="1" set="method" line="68"><f a=""><x path="Void"/></f></showModalOverlay>
		<resizeRoot set="method" line="57"><f a=""><x path="Void"/></f></resizeRoot>
		<get_mousePosition set="method" line="51"><f a=""><c path="flash.geom.Point"/></f></get_mousePosition>
		<mousePosition public="1" get="accessor" set="null"><c path="flash.geom.Point"/></mousePosition>
		<_onScreenResize set="method" line="42"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></_onScreenResize>
		<preInitialize set="method" line="31" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_mousePos><c path="flash.geom.Point"/></_mousePos>
		<_modalOverlayCounter><x path="Int"/></_modalOverlayCounter>
		<_modalOverlay><c path="haxe.ui.toolkit.core.Component"/></_modalOverlay>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.RootManager" params="" file="src/haxe/ui/toolkit/core/RootManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.RootManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.RootManager"/></instance>
		<get_instance public="1" set="method" line="10" static="1"><f a=""><c path="haxe.ui.toolkit.core.RootManager"/></f></get_instance>
		<destroyAllRoots public="1" set="method" line="71"><f a=""><x path="Void"/></f></destroyAllRoots>
		<destroyRoot public="1" set="method" line="58"><f a="root">
	<c path="haxe.ui.toolkit.core.Root"/>
	<x path="Void"/>
</f></destroyRoot>
		<createRoot public="1" set="method" line="26"><f a="?options:?fn">
	<d/>
	<f a="">
		<c path="haxe.ui.toolkit.core.Root"/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></createRoot>
		<_roots><c path="Array"><c path="haxe.ui.toolkit.core.Root"/></c></_roots>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Screen" params="" file="src/haxe/ui/toolkit/core/Screen.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.Screen"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.Screen"/></instance>
		<get_instance public="1" set="method" line="8" static="1"><f a=""><c path="haxe.ui.toolkit.core.Screen"/></f></get_instance>
		<get_height set="method" line="39"><f a=""><x path="Float"/></f></get_height>
		<get_width set="method" line="35"><f a=""><x path="Float"/></f></get_width>
		<removeEventListener public="1" set="method" line="30"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<addEventListener public="1" set="method" line="25"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<height public="1" get="accessor" set="null"><x path="Float"/></height>
		<width public="1" get="accessor" set="null"><x path="Float"/></width>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Toolkit" params="" file="src/haxe/ui/toolkit/core/Toolkit.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.Toolkit"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.Toolkit"/></instance>
		<get_instance public="1" set="method" line="24" static="1"><f a=""><c path="haxe.ui.toolkit.core.Toolkit"/></f></get_instance>
		<init public="1" set="method" line="33" static="1"><f a=""><x path="Void"/></f></init>
		<_registeredProcessors static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></_registeredProcessors>
		<registerXMLProcessor public="1" set="method" line="51" static="1"><f a="cls:prefix">
	<x path="Class"><c path="haxe.ui.toolkit.core.xml.IXMLProcessor"/></x>
	<c path="String"/>
	<x path="Void"/>
</f></registerXMLProcessor>
		<processXml public="1" set="method" line="62" static="1"><f a="xml">
	<c path="Xml"/>
	<d/>
</f></processXml>
		<processXmlNode set="method" line="70" static="1"><f a="node">
	<c path="Xml"/>
	<d/>
</f></processXmlNode>
		<_defaultStyle static="1"><c path="String"/></_defaultStyle>
		<_defaultTransition line="143" static="1"><c path="String"/></_defaultTransition>
		<_transitionRegister static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></_transitionRegister>
		<defaultStyle public="1" get="accessor" set="accessor" static="1"><c path="String"/></defaultStyle>
		<defaultTransition public="1" get="accessor" set="accessor" static="1"><c path="String"/></defaultTransition>
		<get_defaultStyle set="method" line="149" static="1"><f a=""><c path="String"/></f></get_defaultStyle>
		<set_defaultStyle set="method" line="153" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_defaultStyle>
		<get_defaultTransition set="method" line="158" static="1"><f a=""><c path="String"/></f></get_defaultTransition>
		<set_defaultTransition set="method" line="162" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_defaultTransition>
		<getTransitionForClass public="1" set="method" line="167" static="1"><f a="cls">
	<x path="Class"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></x>
	<c path="String"/>
</f></getTransitionForClass>
		<setTransitionForClass public="1" set="method" line="176" static="1"><f a="cls:transition">
	<x path="Class"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></x>
	<c path="String"/>
	<x path="Void"/>
</f></setTransitionForClass>
		<openFullscreen public="1" set="method" line="195" static="1"><f a="?fn">
	<f a="">
		<c path="haxe.ui.toolkit.core.Root"/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></openFullscreen>
		<openPopup public="1" set="method" line="200" static="1"><f a="?fn">
	<f a="">
		<c path="haxe.ui.toolkit.core.Root"/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></openPopup>
		<initInstance set="method" line="191"><f a=""><x path="Void"/></f></initInstance>
		<new public="1" set="method" line="187"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.Direction" params="" file="src/haxe/ui/toolkit/core/interfaces/Direction.hx">
		<HORIZONTAL public="1" get="inline" set="null" line="4" static="1"><c path="String"/></HORIZONTAL>
		<VERTICAL public="1" get="inline" set="null" line="5" static="1"><c path="String"/></VERTICAL>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.InvalidationFlag" params="" file="src/haxe/ui/toolkit/core/interfaces/InvalidationFlag.hx">
		<LAYOUT public="1" get="inline" set="null" line="4" static="1"><x path="Int"/></LAYOUT>
		<DISPLAY public="1" get="inline" set="null" line="5" static="1"><x path="Int"/></DISPLAY>
		<SIZE public="1" get="inline" set="null" line="6" static="1"><x path="Int"/></SIZE>
		<STATE public="1" get="inline" set="null" line="7" static="1"><x path="Int"/></STATE>
		<DATA public="1" get="inline" set="null" line="8" static="1"><x path="Int"/></DATA>
		<ALL public="1" get="inline" set="null" line="10" static="1"><x path="Int"/></ALL>
	</class>
	<class path="haxe.ui.toolkit.core.xml.IXMLProcessor" params="" file="src/haxe/ui/toolkit/core/xml/IXMLProcessor.hx" interface="1"><process public="1" set="method"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process></class>
	<class path="haxe.ui.toolkit.core.xml.XMLProcessor" params="" file="src/haxe/ui/toolkit/core/xml/XMLProcessor.hx">
		<implements path="haxe.ui.toolkit.core.xml.IXMLProcessor"/>
		<stripNamespace public="1" set="method" line="12"><f a="nodeName">
	<c path="String"/>
	<c path="String"/>
</f></stripNamespace>
		<process public="1" set="method" line="8"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.xml.DataProcessor" params="" file="src/haxe/ui/toolkit/core/xml/DataProcessor.hx">
		<extends path="haxe.ui.toolkit.core.xml.XMLProcessor"/>
		<createDataSource set="method" line="23" static="1"><f a="className:config">
	<c path="String"/>
	<c path="Xml"/>
	<c path="haxe.ui.toolkit.data.IDataSource"/>
</f></createDataSource>
		<process public="1" set="method" line="12" override="1"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.xml.StyleProcessor" params="" file="src/haxe/ui/toolkit/core/xml/StyleProcessor.hx">
		<extends path="haxe.ui.toolkit.core.xml.XMLProcessor"/>
		<process public="1" set="method" line="12" override="1"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.xml.UIProcessor" params="" file="src/haxe/ui/toolkit/core/xml/UIProcessor.hx">
		<extends path="haxe.ui.toolkit.core.xml.XMLProcessor"/>
		<createComponent set="method" line="43" static="1"><f a="className:config">
	<c path="String"/>
	<c path="Xml"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></createComponent>
		<process public="1" set="method" line="17" override="1"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.IDataSource" params="" file="src/haxe/ui/toolkit/data/IDataSource.hx" interface="1">
		<hash public="1" set="method"><f a=""><c path="String"/></f></hash>
		<remove public="1" set="method"><f a=""><x path="Bool"/></f></remove>
		<update public="1" set="method"><f a="o">
	<d/>
	<x path="Bool"/>
</f></update>
		<add public="1" set="method"><f a="o">
	<d/>
	<x path="Bool"/>
</f></add>
		<get public="1" set="method"><f a=""><d/></f></get>
		<moveNext public="1" set="method"><f a=""><x path="Bool"/></f></moveNext>
		<moveFirst public="1" set="method"><f a=""><x path="Bool"/></f></moveFirst>
		<close public="1" set="method"><f a=""><x path="Bool"/></f></close>
		<open public="1" set="method"><f a=""><x path="Bool"/></f></open>
		<createFromResource public="1" set="method"><f a="resourceId:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromResource>
		<createFromString public="1" set="method"><f a="?data:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<create public="1" set="method"><f a="?config">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<id public="1" get="null" set="null"><c path="String"/></id>
	</class>
	<class path="haxe.ui.toolkit.data.DataSource" params="" file="src/haxe/ui/toolkit/data/DataSource.hx">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IEventDispatcher"/>
		<implements path="haxe.ui.toolkit.data.IDataSource"/>
		<SAFE_NUM get="inline" set="null" line="174" static="1"><x path="Int"/></SAFE_NUM>
		<clsId line="175" static="1"><x path="Int"/></clsId>
		<getObjectId get="inline" set="null" line="176"><f a="obj">
	<d/>
	<x path="Int"/>
</f></getObjectId>
		<dispatchChanged set="method" line="167"><f a=""><x path="Void"/></f></dispatchChanged>
		<createFromResource public="1" set="method" line="160"><f a="resourceId:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromResource>
		<createFromString public="1" set="method" line="156"><f a="?data:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<_remove set="method" line="149"><f a=""><x path="Bool"/></f></_remove>
		<_update set="method" line="145"><f a="o">
	<d/>
	<x path="Bool"/>
</f></_update>
		<_add set="method" line="141"><f a="o">
	<d/>
	<x path="Bool"/>
</f></_add>
		<_get set="method" line="137"><f a=""><d/></f></_get>
		<_moveNext set="method" line="133"><f a=""><x path="Bool"/></f></_moveNext>
		<_moveFirst set="method" line="129"><f a=""><x path="Bool"/></f></_moveFirst>
		<_close set="method" line="125"><f a=""><x path="Bool"/></f></_close>
		<_open set="method" line="121"><f a=""><x path="Bool"/></f></_open>
		<hash public="1" set="method" line="110"><f a=""><c path="String"/></f></hash>
		<remove public="1" set="method" line="99"><f a=""><x path="Bool"/></f></remove>
		<update public="1" set="method" line="88"><f a="o">
	<d/>
	<x path="Bool"/>
</f></update>
		<add public="1" set="method" line="77"><f a="o">
	<d/>
	<x path="Bool"/>
</f></add>
		<get public="1" set="method" line="73"><f a=""><d/></f></get>
		<moveNext public="1" set="method" line="69"><f a=""><x path="Bool"/></f></moveNext>
		<moveFirst public="1" set="method" line="65"><f a=""><x path="Bool"/></f></moveFirst>
		<close public="1" set="method" line="61"><f a=""><x path="Bool"/></f></close>
		<open public="1" set="method" line="57"><f a=""><x path="Bool"/></f></open>
		<create public="1" set="method" line="47"><f a="?config">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<set_id set="method" line="42"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_id>
		<get_id set="method" line="38"><f a=""><c path="String"/></f></get_id>
		<id public="1" get="accessor" set="accessor"><c path="String"/></id>
		<clone public="1" set="method" line="28"><f a=""><c path="haxe.ui.toolkit.data.DataSource"/></f></clone>
		<get_config set="method" line="24"><f a=""><c path="Xml"/></f></get_config>
		<allowEvents><x path="Bool"/></allowEvents>
		<allowDeletions><x path="Bool"/></allowDeletions>
		<allowUpdates><x path="Bool"/></allowUpdates>
		<allowAdditions><x path="Bool"/></allowAdditions>
		<_id><c path="String"/></_id>
		<_config><c path="Xml"/></_config>
		<config public="1" get="accessor" set="null"><c path="Xml"/></config>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.ArrayDataSource" params="" file="src/haxe/ui/toolkit/data/ArrayDataSource.hx">
		<extends path="haxe.ui.toolkit.data.DataSource"/>
		<createFromString public="1" set="method" line="86" override="1"><f a="?data:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<_remove set="method" line="79" override="1"><f a=""><x path="Bool"/></f></_remove>
		<_add set="method" line="74" override="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></_add>
		<_get set="method" line="67" override="1"><f a=""><d/></f></_get>
		<_moveNext set="method" line="54" override="1"><f a=""><x path="Bool"/></f></_moveNext>
		<_moveFirst set="method" line="46" override="1"><f a=""><x path="Bool"/></f></_moveFirst>
		<create public="1" set="method" line="16" override="1"><f a="?config">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<pos><x path="Int"/></pos>
		<array><c path="Array"><d/></c></array>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.DataManager" params="" file="src/haxe/ui/toolkit/data/DataManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.data.DataManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.data.DataManager"/></instance>
		<get_instance set="method" line="9" static="1"><f a=""><c path="haxe.ui.toolkit.data.DataManager"/></f></get_instance>
		<get_dataSources set="method" line="47"><f a=""><c path="Array"><c path="haxe.ui.toolkit.data.IDataSource"/></c></f></get_dataSources>
		<getRegisteredDataSource public="1" set="method" line="43"><f a="id">
	<c path="String"/>
	<c path="haxe.ui.toolkit.data.IDataSource"/>
</f></getRegisteredDataSource>
		<registerDataSource public="1" set="method" line="34">
			<f a="dataSource">
				<c path="haxe.ui.toolkit.data.IDataSource"/>
				<x path="Void"/>
			</f>
			<haxe_doc>*		Registers a data source for global access.
	 *		@param dataSource The data source to register - if dataSource has no id one will be generated</haxe_doc>
		</registerDataSource>
		<dataSources public="1" get="accessor" set="null">
			<c path="Array"><c path="haxe.ui.toolkit.data.IDataSource"/></c>
			<haxe_doc>*		List of registered data sources.</haxe_doc>
		</dataSources>
		<_dataSourceMap><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.data.IDataSource"/></c></_dataSourceMap>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.FilesDataSource" params="" file="src/haxe/ui/toolkit/data/FilesDataSource.hx">
		<extends path="haxe.ui.toolkit.data.ArrayDataSource"/>
		<fixDir set="method" line="94"><f a="dir">
	<c path="String"/>
	<c path="String"/>
</f></fixDir>
		<isRoot set="method" line="84"><f a="dir">
	<c path="String"/>
	<x path="Bool"/>
</f></isRoot>
		<isDir set="method" line="67"><f a="dir">
	<c path="String"/>
	<x path="Bool"/>
</f></isDir>
		<createFromResource public="1" set="method" line="63" override="1"><f a="resourceId:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromResource>
		<createFromString public="1" set="method" line="57" override="1"><f a="?data:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<_open set="method" line="31" override="1"><f a=""><x path="Bool"/></f></_open>
		<create public="1" set="method" line="17" override="1"><f a="?config">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<_dir><c path="String"/></_dir>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.JSONDataSource" params="" file="src/haxe/ui/toolkit/data/JSONDataSource.hx">
		<extends path="haxe.ui.toolkit.data.ArrayDataSource"/>
		<createFromString public="1" set="method" line="40" override="1"><f a="?data:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<create public="1" set="method" line="14" override="1"><f a="?config">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.MySQLDataSource" params="" file="src/haxe/ui/toolkit/data/MySQLDataSource.hx">
		<extends path="haxe.ui.toolkit.data.DataSource"/>
		<createFromResource public="1" set="method" line="151" override="1"><f a="resourceId:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromResource>
		<createFromString public="1" set="method" line="101" override="1"><f a="?data:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<_get set="method" line="92" override="1"><f a=""><d/></f></_get>
		<_moveNext set="method" line="79" override="1"><f a=""><x path="Bool"/></f></_moveNext>
		<_moveFirst set="method" line="62" override="1"><f a=""><x path="Bool"/></f></_moveFirst>
		<_close set="method" line="55" override="1"><f a=""><x path="Bool"/></f></_close>
		<_open set="method" line="44" override="1"><f a=""><x path="Bool"/></f></_open>
		<create public="1" set="method" line="29" override="1"><f a="?config">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<_rs><c path="sys.db.ResultSet"/></_rs>
		<_connection><c path="sys.db.Connection"/></_connection>
		<_currentRecord><d/></_currentRecord>
		<_query><c path="String"/></_query>
		<_connectionDetails><d/></_connectionDetails>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.XMLDataSource" params="" file="src/haxe/ui/toolkit/data/XMLDataSource.hx">
		<extends path="haxe.ui.toolkit.data.ArrayDataSource"/>
		<createFromString public="1" set="method" line="37" override="1"><f a="?data:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<create public="1" set="method" line="11" override="1"><f a="?config">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.hscript.ClientWrapper" params="" file="src/haxe/ui/toolkit/hscript/ClientWrapper.hx">
		<screenHeight public="1"><x path="Float"/></screenHeight>
		<screenWidth public="1"><x path="Float"/></screenWidth>
		<target public="1"><c path="String"/></target>
		<platform public="1"><c path="String"/></platform>
		<dpi public="1"><x path="Float"/></dpi>
		<language public="1"><c path="String"/></language>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.layout.AbsoluteLayout" params="" file="src/haxe/ui/toolkit/layout/AbsoluteLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<resizeChildren set="method" line="11" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.layout.GridLayout" params="" file="src/haxe/ui/toolkit/layout/GridLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<calcRowHeights public="1" set="method" line="156"><f a=""><c path="Array"><x path="Float"/></c></f></calcRowHeights>
		<calcColumnWidths set="method" line="128"><f a=""><c path="Array"><x path="Float"/></c></f></calcColumnWidths>
		<get_usableHeight set="method" line="119" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<get_usableWidth set="method" line="113" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<repositionChildren set="method" line="80" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren set="method" line="27" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<set_columns set="method" line="19"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_columns>
		<get_columns set="method" line="15"><f a=""><x path="Int"/></f></get_columns>
		<columns public="1" get="accessor" set="accessor"><x path="Int"/></columns>
		<_columns><x path="Int"/></_columns>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.layout.HorizontalLayout" params="" file="src/haxe/ui/toolkit/layout/HorizontalLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<get_usableWidth set="method" line="61" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<repositionChildren set="method" line="46" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren set="method" line="11" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.layout.VerticalLayout" params="" file="src/haxe/ui/toolkit/layout/VerticalLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<get_usableHeight set="method" line="61" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<repositionChildren set="method" line="46" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<resizeChildren set="method" line="11" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.resources.ResourceManager" params="" file="src/haxe/ui/toolkit/resources/ResourceManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.resources.ResourceManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.resources.ResourceManager"/></instance>
		<get_instance set="method" line="10" static="1"><f a=""><c path="haxe.ui.toolkit.resources.ResourceManager"/></f></get_instance>
		<reset public="1" set="method" line="37"><f a=""><x path="Void"/></f></reset>
		<getBitmapData public="1" set="method" line="32"><f a="resourceId:?locale">
	<c path="String"/>
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
</f></getBitmapData>
		<getText public="1" set="method" line="24"><f a="resourceId:?locale">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></getText>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.style.StyleHelper" params="" file="src/haxe/ui/toolkit/style/StyleHelper.hx">
		<sectionCache static="1"><c path="haxe.ds.StringMap"><c path="flash.display.BitmapData"/></c></sectionCache>
		<clearCache public="1" set="method" line="17" static="1"><f a=""><x path="Void"/></f></clearCache>
		<paintStyle public="1" set="method" line="21" static="1"><f a="g:style:rc">
	<c path="flash.display.Graphics"/>
	<d/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></paintStyle>
		<paintScale9 public="1" set="method" line="119" static="1"><f a="g:resourceId:resourceRect:scale9:rc">
	<c path="flash.display.Graphics"/>
	<c path="String"/>
	<c path="flash.geom.Rectangle"/>
	<c path="String"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></paintScale9>
		<paintCompoundBitmap public="1" set="method" line="152" static="1"><f a="g:resourceId:resourceRect:sourceRects:targetRect">
	<c path="flash.display.Graphics"/>
	<c path="String"/>
	<c path="flash.geom.Rectangle"/>
	<c path="haxe.ds.StringMap"><c path="flash.geom.Rectangle"/></c>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></paintCompoundBitmap>
		<paintBitmapSection public="1" set="method" line="225" static="1"><f a="g:resourceId:resourceRect:src:dst">
	<c path="flash.display.Graphics"/>
	<c path="String"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></paintBitmapSection>
		<getBitmapSection set="method" line="263" static="1"><f a="resourceId:?rc">
	<c path="String"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.display.BitmapData"/>
</f></getBitmapSection>
	</class>
	<class path="haxe.ui.toolkit.style.StyleManager" params="" file="src/haxe/ui/toolkit/style/StyleManager.hx">
		<STYLE_WINDOWS public="1" line="12" static="1"><c path="String"/></STYLE_WINDOWS>
		<STYLE_GRADIENT public="1" line="13" static="1"><c path="String"/></STYLE_GRADIENT>
		<STYLE_GRADIENT_MOBILE public="1" line="14" static="1"><c path="String"/></STYLE_GRADIENT_MOBILE>
		<_instance static="1"><c path="haxe.ui.toolkit.style.StyleManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.style.StyleManager"/></instance>
		<get_instance set="method" line="18" static="1"><f a=""><c path="haxe.ui.toolkit.style.StyleManager"/></f></get_instance>
		<dump public="1" set="method" line="266"><f a=""><x path="Void"/></f></dump>
		<buildStyleFor public="1" set="method" line="236"><f a="c:?state">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="String"/>
	<d/>
</f></buildStyleFor>
		<mergeStyle public="1" set="method" line="206"><f a="oldStyle:newStyle">
	<d/>
	<d/>
	<d/>
</f></mergeStyle>
		<ruleMatch set="method" line="157"><f a="c:rule:state">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></ruleMatch>
		<rulePartMatch set="method" line="116"><f a="c:rulePart:state">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></rulePartMatch>
		<findAncestor set="method" line="98"><f a="c:rulePart">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="String"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
</f></findAncestor>
		<clear public="1" set="method" line="92"><f a=""><x path="Void"/></f></clear>
		<addStyles public="1" set="method" line="86"><f a="styles">
	<c path="haxe.ui.toolkit.style.Styles"/>
	<x path="Void"/>
</f></addStyles>
		<addStyle public="1" set="method" line="81"><f a="rule:style">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addStyle>
		<loadStyle public="1" set="method" line="65"><f a="style">
	<c path="String"/>
	<x path="Void"/>
</f></loadStyle>
		<addStyleAsset public="1" set="method" line="53"><f a="style:assetId">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addStyleAsset>
		<stylesBuiltFor><x path="Map">
	<c path="String"/>
	<x path="Int"/>
</x></stylesBuiltFor>
		<stylesBuilt><x path="Int"/></stylesBuilt>
		<_rules><c path="Array"><d/></c></_rules>
		<_styles><c path="haxe.ds.StringMap"><d/></c></_styles>
		<_styleAssets><c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c></_styleAssets>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.style.StyleParser" params="" file="src/haxe/ui/toolkit/style/StyleParser.hx"><fromString public="1" set="method" line="6" static="1"><f a="styleString">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Styles"/>
</f></fromString></class>
	<class path="haxe.ui.toolkit.style.Styles" params="" file="src/haxe/ui/toolkit/style/Styles.hx">
		<dump public="1" set="method" line="36"><f a=""><x path="Void"/></f></dump>
		<get_rules set="method" line="32"><f a=""><t path="Iterator"><c path="String"/></t></f></get_rules>
		<getStyle public="1" set="method" line="28"><f a="rule">
	<c path="String"/>
	<d/>
</f></getStyle>
		<addStyle public="1" set="method" line="16"><f a="rule:style">
	<c path="String"/>
	<d/>
	<d/>
</f></addStyle>
		<rules public="1" get="accessor" set="null"><t path="Iterator"><c path="String"/></t></rules>
		<_styleRules><c path="Array"><c path="String"/></c></_styleRules>
		<_styles><c path="haxe.ds.StringMap"><d/></c></_styles>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.text.ITextDisplay" params="" file="src/haxe/ui/toolkit/text/ITextDisplay.hx" interface="1">
		<wrapLines public="1" get="null" set="null"><x path="Bool"/></wrapLines>
		<multiline public="1" get="null" set="null"><x path="Bool"/></multiline>
		<interactive public="1" get="null" set="null"><x path="Bool"/></interactive>
		<display public="1" get="null" set="null"><c path="flash.display.DisplayObject"/></display>
		<style public="1" get="null" set="null"><d/></style>
		<text public="1" get="null" set="null"><c path="String"/></text>
	</class>
	<class path="haxe.ui.toolkit.text.TextDisplay" params="" file="src/haxe/ui/toolkit/text/TextDisplay.hx">
		<implements path="haxe.ui.toolkit.text.ITextDisplay"/>
		<set_wrapLines set="method" line="140"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_wrapLines>
		<get_wrapLines set="method" line="136"><f a=""><x path="Bool"/></f></get_wrapLines>
		<set_multiline set="method" line="130"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multiline>
		<get_multiline set="method" line="126"><f a=""><x path="Bool"/></f></get_multiline>
		<set_interactive set="method" line="113"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_interactive>
		<get_interactive set="method" line="109"><f a=""><x path="Bool"/></f></get_interactive>
		<get_display set="method" line="105"><f a=""><c path="flash.display.DisplayObject"/></f></get_display>
		<set_style set="method" line="71"><f a="value">
	<d/>
	<d/>
</f></set_style>
		<get_style set="method" line="67"><f a=""><d/></f></get_style>
		<set_text set="method" line="38"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_text set="method" line="34"><f a=""><c path="String"/></f></get_text>
		<wrapLines public="1" get="accessor" set="accessor"><x path="Bool"/></wrapLines>
		<multiline public="1" get="accessor" set="accessor"><x path="Bool"/></multiline>
		<interactive public="1" get="accessor" set="accessor"><x path="Bool"/></interactive>
		<display public="1" get="accessor" set="null"><c path="flash.display.DisplayObject"/></display>
		<style public="1" get="accessor" set="accessor"><d/></style>
		<text public="1" get="accessor" set="accessor"><c path="String"/></text>
		<_tf><c path="flash.text.TextField"/></_tf>
		<_style><d/></_style>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.util.FilterParser" params="" file="src/haxe/ui/toolkit/util/FilterParser.hx">
		<filterParamDefaults line="9" static="1"><a>
	<glow><c path="Array"><c path="String"/></c></glow>
	<dropShadow><c path="Array"><c path="String"/></c></dropShadow>
	<blur><c path="Array"><c path="String"/></c></blur>
</a></filterParamDefaults>
		<parseFilter public="1" set="method" line="15" static="1"><f a="filterString">
	<c path="String"/>
	<c path="flash.filters.BitmapFilter"/>
</f></parseFilter>
		<createFilter public="1" set="method" line="40" static="1"><f a="filterName:filterParams">
	<c path="String"/>
	<c path="String"/>
	<c path="flash.filters.BitmapFilter"/>
</f></createFilter>
		<createBlurFilter set="method" line="62" static="1"><f a="params">
	<c path="Array"><c path="String"/></c>
	<c path="flash.filters.BlurFilter"/>
</f></createBlurFilter>
		<createDropShadowFilter set="method" line="72" static="1"><f a="params">
	<c path="Array"><c path="String"/></c>
	<c path="flash.filters.DropShadowFilter"/>
</f></createDropShadowFilter>
		<createGlowFilter set="method" line="90" static="1"><f a="params">
	<c path="Array"><c path="String"/></c>
	<c path="flash.filters.GlowFilter"/>
</f></createGlowFilter>
		<copyFilterDefaults set="method" line="104" static="1"><f a="filterName:params">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
</f></copyFilterDefaults>
	</class>
	<class path="haxe.ui.toolkit.util.Identifier" params="" file="src/haxe/ui/toolkit/util/Identifier.hx">
		<guid public="1" set="method" line="4" static="1"><f a=""><c path="String"/></f></guid>
		<S4 set="method" line="8" static="1"><f a=""><c path="String"/></f></S4>
	</class>
	<class path="haxe.ui.toolkit.util.PerfTimer" params="" file="src/haxe/ui/toolkit/util/PerfTimer.hx">
		<end public="1" set="method" line="14"><f a=""><x path="Void"/></f></end>
		<endStamp><x path="Float"/></endStamp>
		<startStamp><x path="Float"/></startStamp>
		<name><c path="String"/></name>
		<new public="1" set="method" line="9"><f a="?s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.util.TypeParser" params="" file="src/haxe/ui/toolkit/util/TypeParser.hx">
		<parseInt public="1" set="method" line="4" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></parseInt>
		<parseFloat public="1" set="method" line="13" static="1"><f a="s">
	<c path="String"/>
	<x path="Float"/>
</f></parseFloat>
		<parseBool public="1" set="method" line="22" static="1"><f a="s">
	<c path="String"/>
	<x path="Bool"/>
</f></parseBool>
		<parseColor public="1" set="method" line="34" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></parseColor>
	</class>
	<enum path="hscript.Const" params="" file="C:\tools\Haxe\haxe/lib\hscript/2,0,1/hscript/Expr.hx" module="hscript.Expr">
		<CInt a="v"><x path="Int"/></CInt>
		<CFloat a="f"><x path="Float"/></CFloat>
		<CString a="s"><c path="String"/></CString>
	</enum>
	<enum path="hscript.Expr" params="" file="C:\tools\Haxe\haxe/lib\hscript/2,0,1/hscript/Expr.hx">
		<EConst a="c"><e path="hscript.Const"/></EConst>
		<EIdent a="v"><c path="String"/></EIdent>
		<EVar a="n:?t:?e">
			<c path="String"/>
			<e path="hscript.CType"/>
			<e path="hscript.Expr"/>
		</EVar>
		<EParent a="e"><e path="hscript.Expr"/></EParent>
		<EBlock a="e"><c path="Array"><e path="hscript.Expr"/></c></EBlock>
		<EField a="e:f">
			<e path="hscript.Expr"/>
			<c path="String"/>
		</EField>
		<EBinop a="op:e1:e2">
			<c path="String"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EBinop>
		<EUnop a="op:prefix:e">
			<c path="String"/>
			<x path="Bool"/>
			<e path="hscript.Expr"/>
		</EUnop>
		<ECall a="e:params">
			<e path="hscript.Expr"/>
			<c path="Array"><e path="hscript.Expr"/></c>
		</ECall>
		<EIf a="cond:e1:?e2">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EIf>
		<EWhile a="cond:e">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EWhile>
		<EFor a="v:it:e">
			<c path="String"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EFor>
		<EBreak/>
		<EContinue/>
		<EFunction a="args:e:?name:?ret">
			<c path="Array"><a>
	<t><t path="Null"><e path="hscript.CType"/></t></t>
	<name><c path="String"/></name>
</a></c>
			<e path="hscript.Expr"/>
			<c path="String"/>
			<e path="hscript.CType"/>
		</EFunction>
		<EReturn a="?e"><e path="hscript.Expr"/></EReturn>
		<EArray a="e:index">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EArray>
		<EArrayDecl a="e"><c path="Array"><e path="hscript.Expr"/></c></EArrayDecl>
		<ENew a="cl:params">
			<c path="String"/>
			<c path="Array"><e path="hscript.Expr"/></c>
		</ENew>
		<EThrow a="e"><e path="hscript.Expr"/></EThrow>
		<ETry a="e:v:t:ecatch">
			<e path="hscript.Expr"/>
			<c path="String"/>
			<t path="Null"><e path="hscript.CType"/></t>
			<e path="hscript.Expr"/>
		</ETry>
		<EObject a="fl"><c path="Array"><a>
	<name><c path="String"/></name>
	<e><e path="hscript.Expr"/></e>
</a></c></EObject>
		<ETernary a="cond:e1:e2">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</ETernary>
	</enum>
	<enum path="hscript.CType" params="" file="C:\tools\Haxe\haxe/lib\hscript/2,0,1/hscript/Expr.hx" module="hscript.Expr">
		<CTPath a="path:?params">
			<c path="Array"><c path="String"/></c>
			<c path="Array"><e path="hscript.CType"/></c>
		</CTPath>
		<CTFun a="args:ret">
			<c path="Array"><e path="hscript.CType"/></c>
			<e path="hscript.CType"/>
		</CTFun>
		<CTAnon a="fields"><c path="Array"><a>
	<t><e path="hscript.CType"/></t>
	<name><c path="String"/></name>
</a></c></CTAnon>
		<CTParent a="t"><e path="hscript.CType"/></CTParent>
	</enum>
	<enum path="hscript.Error" params="" file="C:\tools\Haxe\haxe/lib\hscript/2,0,1/hscript/Expr.hx" module="hscript.Expr">
		<EInvalidChar a="c"><x path="Int"/></EInvalidChar>
		<EUnexpected a="s"><c path="String"/></EUnexpected>
		<EUnterminatedString/>
		<EUnterminatedComment/>
		<EUnknownVariable a="v"><c path="String"/></EUnknownVariable>
		<EInvalidIterator a="v"><c path="String"/></EInvalidIterator>
		<EInvalidOp a="op"><c path="String"/></EInvalidOp>
		<EInvalidAccess a="f"><c path="String"/></EInvalidAccess>
	</enum>
	<enum path="hscript._Interp.Stop" params="" file="C:\tools\Haxe\haxe/lib\hscript/2,0,1/hscript/Interp.hx" private="1" module="hscript.Interp">
		<SBreak/>
		<SContinue/>
		<SReturn a="v"><d/></SReturn>
	</enum>
	<class path="hscript.Interp" params="" file="C:\tools\Haxe\haxe/lib\hscript/2,0,1/hscript/Interp.hx">
		<cnew set="method" line="449"><f a="cl:args">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
</f></cnew>
		<call set="method" line="445"><f a="o:f:args">
	<d/>
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<fcall set="method" line="441"><f a="o:f:args">
	<d/>
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
</f></fcall>
		<set set="method" line="435"><f a="o:f:v">
	<d/>
	<c path="String"/>
	<d/>
	<d/>
</f></set>
		<get set="method" line="430"><f a="o:f">
	<d/>
	<c path="String"/>
	<d/>
</f></get>
		<forLoop set="method" line="411"><f a="n:it:e">
	<c path="String"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<x path="Void"/>
</f></forLoop>
		<makeIterator set="method" line="401"><f a="v">
	<d/>
	<t path="Iterator"><d/></t>
</f></makeIterator>
		<whileLoop set="method" line="385"><f a="econd:e">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<x path="Void"/>
</f></whileLoop>
		<expr public="1" set="method" line="238"><f a="e">
	<e path="hscript.Expr"/>
	<d/>
</f></expr>
		<resolve set="method" line="228"><f a="id">
	<c path="String"/>
	<d/>
</f></resolve>
		<restore set="method" line="221"><f a="old">
	<x path="Int"/>
	<x path="Void"/>
</f></restore>
		<duplicate params="T" set="method" line="210"><f a="h">
	<x path="Map">
		<c path="String"/>
		<c path="duplicate.T"/>
	</x>
	<x path="Map">
		<c path="String"/>
		<t path="Null"><c path="duplicate.T"/></t>
	</x>
</f></duplicate>
		<exprReturn set="method" line="197"><f a="e">
	<e path="hscript.Expr"/>
	<d/>
</f></exprReturn>
		<execute public="1" set="method" line="188"><f a="expr">
	<e path="hscript.Expr"/>
	<d/>
</f></execute>
		<increment set="method" line="153"><f a="e:prefix:delta">
	<e path="hscript.Expr"/>
	<x path="Bool"/>
	<x path="Int"/>
	<d/>
</f></increment>
		<evalAssignOp set="method" line="128"><f a="op:fop:e1:e2">
	<c path="String"/>
	<f a=":">
		<d/>
		<d/>
		<unknown/>
	</f>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<d/>
</f></evalAssignOp>
		<assignOp set="method" line="123"><f a="op:fop">
	<c path="String"/>
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<x path="Void"/>
</f></assignOp>
		<assign set="method" line="105"><f a="e1:e2">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<d/>
</f></assign>
		<initOps set="method" line="64"><f a=""><x path="Void"/></f></initOps>
		<declared><c path="Array"><a>
	<old><a><r><d/></r></a></old>
	<n><c path="String"/></n>
</a></c></declared>
		<binops><x path="Map">
	<c path="String"/>
	<f a=":">
		<e path="hscript.Expr"/>
		<e path="hscript.Expr"/>
		<d/>
	</f>
</x></binops>
		<locals><x path="Map">
	<c path="String"/>
	<a><r><d/></r></a>
</x></locals>
		<variables public="1"><x path="Map">
	<c path="String"/>
	<d/>
</x></variables>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="hscript.Token" params="" file="C:\tools\Haxe\haxe/lib\hscript/2,0,1/hscript/Parser.hx" module="hscript.Parser">
		<TEof/>
		<TConst a="c"><e path="hscript.Const"/></TConst>
		<TId a="s"><c path="String"/></TId>
		<TOp a="s"><c path="String"/></TOp>
		<TPOpen/>
		<TPClose/>
		<TBrOpen/>
		<TBrClose/>
		<TDot/>
		<TComma/>
		<TSemicolon/>
		<TBkOpen/>
		<TBkClose/>
		<TQuestion/>
		<TDoubleDot/>
	</enum>
	<class path="hscript.Parser" params="" file="C:\tools\Haxe\haxe/lib\hscript/2,0,1/hscript/Parser.hx">
		<p1 get="inline" set="null" line="86" static="1"><x path="Int"/></p1>
		<readPos get="inline" set="null" line="87" static="1"><x path="Int"/></readPos>
		<tokenMin get="inline" set="null" line="88" static="1"><x path="Int"/></tokenMin>
		<tokenMax get="inline" set="null" line="89" static="1"><x path="Int"/></tokenMax>
		<tokenString set="method" line="1023"><f a="t">
	<e path="hscript.Token"/>
	<c path="String"/>
</f></tokenString>
		<constString set="method" line="1012"><f a="c">
	<e path="hscript.Const"/>
	<c path="String"/>
</f></constString>
		<tokenComment set="method" line="974"><f a="op:char">
	<c path="String"/>
	<x path="Int"/>
	<t path="Null"><e path="hscript.Token"/></t>
</f></tokenComment>
		<token set="method" line="798"><f a=""><t path="Null"><e path="hscript.Token"/></t></f></token>
		<readString set="method" line="720"><f a="until">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<readChar set="method" line="715"><f a=""><x path="Int"/></f></readChar>
		<incPos get="inline" set="null" line="709"><f a=""><x path="Void"/></f></incPos>
		<parseExprList set="method" line="690"><f a="etk">
	<t path="Null"><e path="hscript.Token"/></t>
	<c path="Array"><e path="hscript.Expr"/></c>
</f></parseExprList>
		<parseTypeNext set="method" line="668"><f a="t">
	<e path="hscript.CType"/>
	<e path="hscript.CType"/>
</f></parseTypeNext>
		<parseType set="method" line="602"><f a=""><e path="hscript.CType"/></f></parseType>
		<parseExprNext set="method" line="565"><f a="e1">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></parseExprNext>
		<parseStructure set="method" line="399"><f a="id">
	<c path="String"/>
	<e path="hscript.Expr"/>
</f></parseStructure>
		<makeBinop set="method" line="382"><f a="op:e1:e">
	<c path="String"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></makeBinop>
		<makeUnop set="method" line="374"><f a="op:e">
	<c path="String"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></makeUnop>
		<parseExpr set="method" line="294"><f a=""><e path="hscript.Expr"/></f></parseExpr>
		<parseObject set="method" line="260"><f a="p1">
	<t path="Null"><x path="Int"/></t>
	<e path="hscript.Expr"/>
</f></parseObject>
		<parseFullExpr set="method" line="248"><f a=""><e path="hscript.Expr"/></f></parseFullExpr>
		<isBlock set="method" line="233"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Bool"/>
</f></isBlock>
		<mk get="inline" set="null" line="223"><f a="e:?pmin:?pmax">
	<e path="hscript.Expr"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="hscript.Expr"/>
</f></mk>
		<pmax get="inline" set="null" line="215"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Int"/>
</f></pmax>
		<pmin get="inline" set="null" line="207"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Int"/>
</f></pmin>
		<expr get="inline" set="null" line="199"><f a="e">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></expr>
		<ensure get="inline" set="null" line="194"><f a="tk">
	<t path="Null"><e path="hscript.Token"/></t>
	<x path="Void"/>
</f></ensure>
		<push get="inline" set="null" line="184"><f a="tk">
	<e path="hscript.Token"/>
	<x path="Void"/>
</f></push>
		<unexpected set="method" line="179"><f a="tk">
	<e path="hscript.Token"/>
	<d/>
</f></unexpected>
		<parse public="1" set="method" line="150"><f a="s">
	<c path="haxe.io.Input"/>
	<e path="hscript.Expr"/>
</f></parse>
		<parseString public="1" set="method" line="145"><f a="s">
	<c path="String"/>
	<e path="hscript.Expr"/>
</f></parseString>
		<invalidChar public="1" set="method" line="141"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidChar>
		<error public="1" get="inline" set="null" line="133"><f a="err:pmin:pmax">
	<e path="hscript.Error"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></error>
		<tokens><c path="haxe.ds.GenericStack_hscript_Token"/></tokens>
		<idents><c path="Array"><x path="Bool"/></c></idents>
		<ops><c path="Array"><x path="Bool"/></c></ops>
		<char><x path="Int"/></char>
		<input><c path="haxe.io.Input"/></input>
		<allowTypes public="1">
			<x path="Bool"/>
			<haxe_doc>allow types declarations</haxe_doc>
		</allowTypes>
		<allowJSON public="1">
			<x path="Bool"/>
			<haxe_doc>activate JSON compatiblity</haxe_doc>
		</allowJSON>
		<unops public="1"><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></unops>
		<opRightAssoc public="1"><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></opRightAssoc>
		<opPriority public="1"><x path="Map">
	<c path="String"/>
	<x path="Int"/>
</x></opPriority>
		<identChars public="1"><c path="String"/></identChars>
		<opChars public="1"><c path="String"/></opChars>
		<line public="1"><x path="Int"/></line>
		<new public="1" set="method" line="99"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.actuators.IGenericActuator" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/actuators/GenericActuator.hx" module="motion.actuators.GenericActuator" interface="1">
		<snapping public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Snapping causes tween values to be rounded automatically
	 * @param	value		Whether tween values should be rounded (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</snapping>
		<smartRotation public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Enabling smartRotation can prevent undesired results when tweening rotation values
	 * @param	value		Whether smart rotation should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</smartRotation>
		<reverse public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Sets if the tween should be handled in reverse
	 * @param	value		Whether the tween should be reversed (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</reverse>
		<repeat public="1" set="method">
			<f a="?times">
				<x path="Int"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Repeats the tween after it finishes
	 * @param	times		The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)
	 * @return		The current actuator instance</haxe_doc>
		</repeat>
		<reflect public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect
	 * @param	value		Whether reflect should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</reflect>
		<onUpdate public="1" set="method">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween updates
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onUpdate>
		<onRepeat public="1" set="method">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween repeats
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onRepeat>
		<onComplete public="1" set="method">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween finishes
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onComplete>
		<ease public="1" set="method">
			<f a="easing">
				<c path="motion.easing.IEasing"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Sets the easing which is used when running the tween
	 * @param	easing		An easing equation, like Elastic.easeIn or Quad.easeOut
	 * @return		The current actuator instance</haxe_doc>
		</ease>
		<delay public="1" set="method">
			<f a="duration">
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Increases the delay before a tween is executed
	 * @param	duration		The amount of seconds to delay
	 * @return		The current actuator instance</haxe_doc>
		</delay>
		<autoVisible public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Flash performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values
	 * @param	value		Whether autoVisible should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</autoVisible>
	</class>
	<class path="motion.actuators.GenericActuator" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/actuators/GenericActuator.hx">
		<implements path="motion.actuators.IGenericActuator"/>
		<stop public="1" set="method" line="401"><f a="properties:complete:sendEvent">
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></stop>
		<snapping public="1" set="method" line="385">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Snapping causes tween values to be rounded automatically
	 * @param	value		Whether tween values should be rounded (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</snapping>
		<smartRotation public="1" set="method" line="364">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Enabling smartRotation can prevent undesired results when tweening rotation values
	 * @param	value		Whether smart rotation should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</smartRotation>
		<reverse public="1" set="method" line="343">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Sets if the tween should be handled in reverse
	 * @param	value		Whether the tween should be reversed (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</reverse>
		<resume public="1" set="method" line="331"><f a=""><x path="Void"/></f></resume>
		<repeat public="1" set="method" line="316">
			<f a="?times">
				<x path="Int"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Repeats the tween after it finishes
	 * @param	times		The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)
	 * @return		The current actuator instance</haxe_doc>
		</repeat>
		<reflect public="1" set="method" line="295">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect
	 * @param	value		Whether reflect should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</reflect>
		<pause public="1" set="method" line="283"><f a=""><x path="Void"/></f></pause>
		<onUpdate public="1" set="method" line="264">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween updates
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onUpdate>
		<onRepeat public="1" set="method" line="239">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween repeats
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onRepeat>
		<onComplete public="1" set="method" line="208">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween finishes
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onComplete>
		<move public="1" set="method" line="195"><f a=""><x path="Void"/></f></move>
		<ease public="1" set="method" line="186">
			<f a="easing">
				<c path="motion.easing.IEasing"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Sets the easing which is used when running the tween
	 * @param	easing		An easing equation, like Elastic.easeIn or Quad.easeOut
	 * @return		The current actuator instance</haxe_doc>
		</ease>
		<delay public="1" set="method" line="172">
			<f a="duration">
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Increases the delay before a tween is executed
	 * @param	duration		The amount of seconds to delay
	 * @return		The current actuator instance</haxe_doc>
		</delay>
		<complete set="method" line="148"><f a="?sendEvent">
	<x path="Bool"/>
	<x path="Void"/>
</f></complete>
		<change set="method" line="137"><f a=""><x path="Void"/></f></change>
		<callMethod get="inline" set="null" line="106"><f a="method:?params">
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></callMethod>
		<autoVisible public="1" set="method" line="91">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Flash performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values
	 * @param	value		Whether autoVisible should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</autoVisible>
		<apply public="1" set="method" line="59"><f a=""><x path="Void"/></f></apply>
		<special><x path="Bool"/></special>
		<_snapping><x path="Bool"/></_snapping>
		<_smartRotation><x path="Bool"/></_smartRotation>
		<_reverse><x path="Bool"/></_reverse>
		<_repeat><x path="Int"/></_repeat>
		<_reflect><x path="Bool"/></_reflect>
		<_onUpdateParams><c path="Array"><d/></c></_onUpdateParams>
		<_onUpdate><d/></_onUpdate>
		<_onRepeatParams><c path="Array"><d/></c></_onRepeatParams>
		<_onRepeat><d/></_onRepeat>
		<_onCompleteParams><c path="Array"><d/></c></_onCompleteParams>
		<_onComplete><d/></_onComplete>
		<_ease><c path="motion.easing.IEasing"/></_ease>
		<_delay><x path="Float"/></_delay>
		<_autoVisible><x path="Bool"/></_autoVisible>
		<target public="1"><d/></target>
		<properties public="1"><d/></properties>
		<id public="1"><c path="String"/></id>
		<duration public="1"><x path="Float"/></duration>
		<new public="1" set="method" line="39"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.actuators.SimpleActuator" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/actuators/SimpleActuator.hx">
		<extends path="motion.actuators.GenericActuator"/>
		<actuators line="28" static="1"><c path="Array"><c path="motion.actuators.SimpleActuator"/></c></actuators>
		<actuatorsLength line="29" static="1"><x path="Int"/></actuatorsLength>
		<addedEvent line="30" static="1"><x path="Bool"/></addedEvent>
		<stage_onEnterFrame set="method" line="496" static="1"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></stage_onEnterFrame>
		<update set="method" line="349"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<stop public="1" set="method" line="306" override="1"><f a="properties:complete:sendEvent">
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></stop>
		<setProperty get="inline" set="null" line="285"><f a="details:value">
	<c path="motion.actuators.PropertyDetails"/>
	<d/>
	<x path="Void"/>
</f></setProperty>
		<setField get="inline" set="null" line="264"><f a="target:propertyName:value">
	<d/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setField>
		<resume public="1" set="method" line="247" override="1"><f a=""><x path="Void"/></f></resume>
		<pause public="1" set="method" line="234" override="1"><f a=""><x path="Void"/></f></pause>
		<onUpdate public="1" set="method" line="223" override="1">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</onUpdate>
		<move public="1" set="method" line="197" override="1"><f a=""><x path="Void"/></f></move>
		<initialize set="method" line="158"><f a=""><x path="Void"/></f></initialize>
		<getField get="inline" set="null" line="127"><f a="target:propertyName">
	<d/>
	<c path="String"/>
	<d/>
</f></getField>
		<delay public="1" set="method" line="117" override="1">
			<f a="duration">
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</delay>
		<autoVisible public="1" set="method" line="87" override="1">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</autoVisible>
		<toggleVisible><x path="Bool"/></toggleVisible>
		<startTime><x path="Float"/></startTime>
		<setVisible><x path="Bool"/></setVisible>
		<sendChange><x path="Bool"/></sendChange>
		<propertyDetails><c path="Array"><c path="motion.actuators.PropertyDetails"/></c></propertyDetails>
		<pauseTime><x path="Float"/></pauseTime>
		<paused><x path="Bool"/></paused>
		<initialized><x path="Bool"/></initialized>
		<detailsLength><x path="Int"/></detailsLength>
		<cacheVisible><x path="Bool"/></cacheVisible>
		<active><x path="Bool"/></active>
		<timeOffset><x path="Float"/></timeOffset>
		<new public="1" set="method" line="49"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick
 * @version 1.2</haxe_doc>
	</class>
	<class path="motion.easing.Expo" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/easing/Expo.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="motion.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="motion.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="motion.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="19" static="1"><f a=""><c path="motion.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="26" static="1"><f a=""><c path="motion.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="33" static="1"><f a=""><c path="motion.easing.IEasing"/></f></get_easeOut>
	</class>
	<class path="motion.easing.IEasing" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/easing/IEasing.hx" interface="1">
		<ease public="1" set="method"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<calculate public="1" set="method"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<haxe_doc>* @author Joshua Granick
 * @author Philippe / http://philippe.elsass.me</haxe_doc>
	</class>
	<class path="motion.easing.ExpoEaseOut" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/easing/Expo.hx" module="motion.easing.Expo">
		<implements path="motion.easing.IEasing"/>
		<ease public="1" set="method" line="128"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<calculate public="1" set="method" line="121"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="114"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.Actuate" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/Actuate.hx">
		<defaultActuator public="1" line="24" static="1"><x path="Class"><c path="motion.actuators.GenericActuator"/></x></defaultActuator>
		<defaultEase public="1" line="25" static="1"><c path="motion.easing.IEasing"/></defaultEase>
		<targetLibraries line="26" static="1"><t path="motion.ObjectHash"><c path="Array"><c path="motion.actuators.GenericActuator"/></c></t></targetLibraries>
		<apply public="1" set="method" line="37" static="1">
			<f a="target:properties:?customActuator">
				<d/>
				<d/>
				<x path="Class"><c path="motion.actuators.GenericActuator"/></x>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[* Copies properties from one object to another. Conflicting tweens are stopped automatically
	 * @example		<code>Actuate.apply (MyClip, { alpha: 1 } );</code>
	 * @param	target		The object to copy to
	 * @param	properties		The object to copy from
	 * @param	customActuator		A custom actuator to use instead of the default (Optional)
	 * @return		The current actuator instance, which can be used to apply properties like onComplete or onUpdate handlers]]></haxe_doc>
		</apply>
		<effects public="1" set="method" line="64" static="1">
			<f a="target:duration:?overwrite">
				<c path="flash.display.DisplayObject"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="motion._Actuate.EffectsOptions"/>
			</f>
			<haxe_doc>* Creates a new effects tween 
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		An EffectsOptions instance, which is used to select the kind of effect you would like to apply to the target</haxe_doc>
		</effects>
		<getLibrary set="method" line="73" static="1"><f a="target">
	<d/>
	<c path="Array"><c path="motion.actuators.GenericActuator"/></c>
</f></getLibrary>
		<motionPath public="1" set="method" line="94" static="1">
			<f a="target:duration:properties:?overwrite">
				<d/>
				<x path="Float"/>
				<d/>
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Creates a new MotionPath tween
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	properties		An object containing a motion path for each property you wish to tween
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate</haxe_doc>
		</motionPath>
		<pause public="1" set="method" line="106" static="1">
			<f a="target">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Pauses tweens for the specified target objects
	 * @param	... targets		The target objects which will have their tweens paused. Passing no value pauses tweens for all objects</haxe_doc>
		</pause>
		<pauseAll public="1" set="method" line="127" static="1"><f a=""><x path="Void"/></f></pauseAll>
		<reset public="1" set="method" line="145" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets Actuate by stopping and removing tweens for all objects</haxe_doc>
		</reset>
		<resume public="1" set="method" line="166" static="1">
			<f a="target">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Resumes paused tweens for the specified target objects
	 * @param	... targets		The target objects which will have their tweens resumed. Passing no value resumes tweens for all objects</haxe_doc>
		</resume>
		<resumeAll public="1" set="method" line="187" static="1"><f a=""><x path="Void"/></f></resumeAll>
		<stop public="1" set="method" line="209" static="1">
			<f a="target:?properties:?complete:?sendEvent">
				<d/>
				<d/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Stops all tweens for an individual object
	 * @param	target		The target object which will have its tweens stopped, or a generic actuator instance
	 * @param	properties		A string, array or object which contains the properties you wish to stop, like "alpha", [ "x", "y" ] or { alpha: null }. Passing no value removes all tweens for the object (Optional)
	 * @param	complete		If tweens should apply their final target values before stopping. Default is false (Optional) 
	 * @param	sendEvent	If a complete() event should be dispatched for the specified target. Default is true (Optional)</haxe_doc>
		</stop>
		<timer public="1" set="method" line="261" static="1">
			<f a="duration:?customActuator">
				<x path="Float"/>
				<x path="Class"><c path="motion.actuators.GenericActuator"/></x>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[* Creates a tween-based timer, which is useful for synchronizing function calls with other animations
	 * @example		<code>Actuate.timer (1).onComplete (trace, [ "Timer is now complete" ]);</code>
	 * @param	duration		The length of the timer in seconds
	 * @param	customActuator		A custom actuator to use instead of the default (Optional)
	 * @return		The current actuator instance, which can be used to apply properties like onComplete or to gain a reference to the target timer object]]></haxe_doc>
		</timer>
		<transform public="1" set="method" line="278" static="1">
			<f a="target:?duration:?overwrite">
				<d/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="motion._Actuate.TransformOptions"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new transform tween
	 * @example		<code>Actuate.transform (MyClip, 1).color (0xFF0000);</code>
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		A TransformOptions instance, which is used to select the kind of transform you would like to apply to the target]]></haxe_doc>
		</transform>
		<tween public="1" set="method" line="297" static="1">
			<f a="target:duration:properties:?overwrite:?customActuator">
				<d/>
				<x path="Float"/>
				<d/>
				<x path="Bool"/>
				<x path="Class"><c path="motion.actuators.GenericActuator"/></x>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new tween
	 * @example		<code>Actuate.tween (MyClip, 1, { alpha: 1 } ).onComplete (trace, [ "MyClip is now visible" ]);</code>
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	properties		The end values to tween the target to
	 * @param	overwrite			Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @param	customActuator		A custom actuator to use instead of the default (Optional)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]></haxe_doc>
		</tween>
		<unload public="1" set="method" line="354" static="1"><f a="actuator">
	<c path="motion.actuators.GenericActuator"/>
	<x path="Void"/>
</f></unload>
		<update public="1" set="method" line="383" static="1">
			<f a="target:duration:?start:?end:?overwrite">
				<d/>
				<x path="Float"/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new tween that updates a method rather than setting the properties of an object
	 * @example		<code>Actuate.update (trace, 1, ["Value: ", 0], ["", 1]).onComplete (trace, [ "Finished tracing values between 0 and 1" ]);</code>
	 * @param	target		The method to update		
	 * @param	duration		The length of the tween in seconds
	 * @param	start		The starting parameters of the method call. You may use both numeric and non-numeric values
	 * @param	end		The ending parameters of the method call. You may use both numeric and non-numeric values, but the signature should match the start parameters
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]></haxe_doc>
		</update>
	</class>
	<class path="motion._Actuate.EffectsOptions" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/Actuate.hx" private="1" module="motion.Actuate">
		<filter public="1" set="method" line="432">
			<f a="reference:properties">
				<d/>
				<d/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Creates a new BitmapFilter tween
	 * @param	reference		A reference to the target's filter, which can be an array index or the class of the filter
	 * @param	properties		The end properties to use for the tween
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate</haxe_doc>
		</filter>
		<target><c path="flash.display.DisplayObject"/></target>
		<overwrite><x path="Bool"/></overwrite>
		<duration><x path="Float"/></duration>
		<new public="1" set="method" line="417"><f a="target:duration:overwrite">
	<c path="flash.display.DisplayObject"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion._Actuate.TransformOptions" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/Actuate.hx" private="1" module="motion.Actuate">
		<sound public="1" set="method" line="489">
			<f a="?volume:?pan">
				<x path="Float"/>
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Creates a new SoundTransform tween
	 * @param	volume		The end volume for the target, or null if you would like to ignore this property (Default is null)
	 * @param	pan		The end pan for the target, or null if you would like to ignore this property (Default is null)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate</haxe_doc>
		</sound>
		<color public="1" set="method" line="468">
			<f a="?value:?strength:?alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Creates a new ColorTransform tween
	 * @param	color		The color value
	 * @param	strength		The percentage amount of tint to apply (Default is 1)
	 * @param	alpha		The end alpha of the target. If you wish to tween alpha and tint simultaneously, you must do them both as part of the ColorTransform. A value of null will make no change to the alpha of the object (Default is null)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate</haxe_doc>
		</color>
		<target><d/></target>
		<overwrite><x path="Bool"/></overwrite>
		<duration><x path="Float"/></duration>
		<new public="1" set="method" line="452"><f a="target:duration:overwrite">
	<d/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion._Actuate.TweenTimer" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/Actuate.hx" private="1" module="motion.Actuate">
		<progress public="1"><x path="Float"/></progress>
		<new public="1" set="method" line="521"><f a="progress">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="motion.ObjectHash" params="T" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/Actuate.hx" module="motion.Actuate"><c path="haxe.ds.ObjectMap">
	<d/>
	<c path="motion.ObjectHash.T"/>
</c></typedef>
	<class path="motion.MotionPath" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/MotionPath.hx">
		<get_y set="method" line="75"><f a=""><c path="motion.IComponentPath"/></f></get_y>
		<get_x set="method" line="68"><f a=""><c path="motion.IComponentPath"/></f></get_x>
		<line public="1" set="method" line="51">
			<f a="x:y:?strength">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="motion.MotionPath"/>
			</f>
			<haxe_doc>* Adds a line to the current motion path
	 * @param	x		The x position of the end point for the line
	 * @param	x		The y position of the end point for the line
	 * @param	strength		The degree of emphasis that should be placed on this segment . If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)
	 * @return		The current motion path instance</haxe_doc>
		</line>
		<bezier public="1" set="method" line="34">
			<f a="x:y:controlX:controlY:?strength">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="motion.MotionPath"/>
			</f>
			<haxe_doc>* Adds a bezier curve to the current motion path
	 * @param	x		The x position of the end point for the curve
	 * @param	y		The y position of the end point for the curve
	 * @param	controlX		The x position of the control point for the curve, which affects the angle and midpoint
	 * @param	controlX		The x position of the control point for the curve, which affects the angle and midpoint
	 * @param	strength		The degree of emphasis that should be placed on this segment. If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)
	 * @return		The current motion path instance</haxe_doc>
		</bezier>
		<_y><c path="motion.ComponentPath"/></_y>
		<_x><c path="motion.ComponentPath"/></_x>
		<y public="1" get="accessor" set="null"><c path="motion.IComponentPath"/></y>
		<x public="1" get="accessor" set="null"><c path="motion.IComponentPath"/></x>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* @author Joshua Granick</haxe_doc>
	</class>
	<class path="motion.IComponentPath" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/MotionPath.hx" module="motion.MotionPath" interface="1">
		<calculate public="1" set="method"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<start public="1"><x path="Float"/></start>
		<end public="1" get="null" set="null"><x path="Float"/></end>
	</class>
	<class path="motion.ComponentPath" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/MotionPath.hx" module="motion.MotionPath">
		<implements path="motion.IComponentPath"/>
		<get_end set="method" line="151"><f a=""><x path="Float"/></f></get_end>
		<calculate public="1" set="method" line="112"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<addPath public="1" set="method" line="104"><f a="path">
	<c path="motion.BezierPath"/>
	<x path="Void"/>
</f></addPath>
		<totalStrength><x path="Float"/></totalStrength>
		<paths><c path="Array"><c path="motion.BezierPath"/></c></paths>
		<end public="1" get="accessor" set="null"><x path="Float"/></end>
		<start public="1"><x path="Float"/></start>
		<new public="1" set="method" line="95"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.BezierPath" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/MotionPath.hx" module="motion.MotionPath">
		<calculate public="1" set="method" line="201"><f a="start:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<strength public="1"><x path="Float"/></strength>
		<end public="1"><x path="Float"/></end>
		<control public="1"><x path="Float"/></control>
		<new public="1" set="method" line="192"><f a="end:control:strength">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.LinearPath" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/MotionPath.hx" module="motion.MotionPath">
		<extends path="motion.BezierPath"/>
		<calculate public="1" set="method" line="221" override="1"><f a="start:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="214"><f a="end:strength">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.actuators.FilterActuator" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/actuators/FilterActuator.hx">
		<extends path="motion.actuators.SimpleActuator"/>
		<update set="method" line="93" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<initialize set="method" line="70" override="1"><f a=""><x path="Void"/></f></initialize>
		<apply public="1" set="method" line="51" override="1"><f a=""><x path="Void"/></f></apply>
		<filterIndex><x path="Int"/></filterIndex>
		<filterClass><x path="Class"><c path="flash.filters.BitmapFilter"/></x></filterClass>
		<filter><c path="flash.filters.BitmapFilter"/></filter>
		<new public="1" set="method" line="21"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick
 * @version 1.2</haxe_doc>
	</class>
	<class path="motion.actuators.MethodActuator" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/actuators/MethodActuator.hx">
		<extends path="motion.actuators.SimpleActuator"/>
		<update set="method" line="93" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<initialize set="method" line="65" override="1"><f a=""><x path="Void"/></f></initialize>
		<complete set="method" line="50" override="1"><f a="?sendEvent">
	<x path="Bool"/>
	<x path="Void"/>
</f></complete>
		<apply public="1" set="method" line="43" override="1"><f a=""><x path="Void"/></f></apply>
		<tweenProperties><d/></tweenProperties>
		<currentParameters><c path="Array"><d/></c></currentParameters>
		<new public="1" set="method" line="15"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick
 * @version 1.2</haxe_doc>
	</class>
	<class path="motion.actuators.MotionPathActuator" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/actuators/MotionPathActuator.hx">
		<extends path="motion.actuators.SimpleActuator"/>
		<update set="method" line="92" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<initialize set="method" line="47" override="1"><f a=""><x path="Void"/></f></initialize>
		<apply public="1" set="method" line="20" override="1"><f a=""><x path="Void"/></f></apply>
		<new public="1" set="method" line="13"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick</haxe_doc>
	</class>
	<class path="motion.actuators.PropertyDetails" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/actuators/PropertyDetails.hx">
		<target public="1"><d/></target>
		<start public="1"><x path="Float"/></start>
		<propertyName public="1"><c path="String"/></propertyName>
		<isField public="1"><x path="Bool"/></isField>
		<change public="1"><x path="Float"/></change>
		<new public="1" set="method" line="19"><f a="target:propertyName:start:change:?isField">
	<d/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.actuators.PropertyPathDetails" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/actuators/MotionPathActuator.hx" module="motion.actuators.MotionPathActuator">
		<extends path="motion.actuators.PropertyDetails"/>
		<path public="1"><c path="motion.IComponentPath"/></path>
		<new public="1" set="method" line="245"><f a="target:propertyName:path:?isField">
	<d/>
	<c path="String"/>
	<c path="motion.IComponentPath"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.actuators.TransformActuator" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/actuators/TransformActuator.hx">
		<extends path="motion.actuators.SimpleActuator"/>
		<update set="method" line="178" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<initializeSound set="method" line="149"><f a=""><x path="Void"/></f></initializeSound>
		<initializeColor set="method" line="72"><f a=""><x path="Void"/></f></initializeColor>
		<initialize set="method" line="52" override="1"><f a=""><x path="Void"/></f></initialize>
		<apply public="1" set="method" line="32" override="1"><f a=""><x path="Void"/></f></apply>
		<tweenSoundTransform><c path="flash.media.SoundTransform"/></tweenSoundTransform>
		<tweenColorTransform><c path="flash.geom.ColorTransform"/></tweenColorTransform>
		<endSoundTransform><c path="flash.media.SoundTransform"/></endSoundTransform>
		<endColorTransform><c path="flash.geom.ColorTransform"/></endColorTransform>
		<new public="1" set="method" line="25"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick
 * @version 1.2</haxe_doc>
	</class>
	<class path="motion.easing.ExpoEaseIn" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/easing/Expo.hx" module="motion.easing.Expo">
		<implements path="motion.easing.IEasing"/>
		<ease public="1" set="method" line="60"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<calculate public="1" set="method" line="53"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.easing.ExpoEaseInOut" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/easing/Expo.hx" module="motion.easing.Expo">
		<implements path="motion.easing.IEasing"/>
		<ease public="1" set="method" line="92"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<calculate public="1" set="method" line="80"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="73"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.easing.Linear" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/easing/Linear.hx">
		<easeNone public="1" get="accessor" set="null" static="1"><c path="motion.easing.IEasing"/></easeNone>
		<get_easeNone set="method" line="17" static="1"><f a=""><c path="motion.easing.IEasing"/></f></get_easeNone>
	</class>
	<class path="motion.easing.LinearEaseNone" params="" file="C:\tools\Haxe\haxe/lib\actuate/1,6,7/motion/easing/Linear.hx" module="motion.easing.Linear">
		<implements path="motion.easing.IEasing"/>
		<ease public="1" set="method" line="44"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<calculate public="1" set="method" line="37"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="nme.AssetData" params="" file="bin/windows/cpp/haxe/nme/AssetData.hx">
		<library public="1" static="1"><x path="Map">
	<c path="String"/>
	<e path="openfl.LibraryType"/>
</x></library>
		<path public="1" static="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></path>
		<type public="1" static="1"><x path="Map">
	<c path="String"/>
	<e path="openfl.AssetType"/>
</x></type>
		<initialized line="14" static="1"><x path="Bool"/></initialized>
		<initialize public="1" set="method" line="17" static="1"><f a=""><x path="Void"/></f></initialize>
	</class>
	<class path="openfl.Assets" params="" file="C:\tools\Haxe\haxe/lib\openfl/1,0,6/openfl/Assets.hx">
		<cachedBitmapData public="1" line="50" static="1"><x path="Map">
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
</x></cachedBitmapData>
		<id public="1" get="accessor" set="null" static="1"><c path="Array"><c path="String"/></c></id>
		<library public="1" get="accessor" set="null" static="1"><x path="Map">
	<c path="String"/>
	<e path="openfl.LibraryType"/>
</x></library>
		<path public="1" get="accessor" set="null" static="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></path>
		<type public="1" get="accessor" set="null" static="1"><x path="Map">
	<c path="String"/>
	<e path="openfl.AssetType"/>
</x></type>
		<initialized line="59" static="1"><x path="Bool"/></initialized>
		<initialize set="method" line="62" static="1"><f a=""><x path="Void"/></f></initialize>
		<getBitmapData public="1" set="method" line="86" static="1">
			<f a="id:?useCache">
				<c path="String"/>
				<x path="Bool"/>
				<c path="flash.display.BitmapData"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded bitmap
	 * @usage		var bitmap = new Bitmap(Assets.getBitmapData("image.jpg"));
	 * @param	id		The ID or asset path for the bitmap
	 * @param	useCache		(Optional) Whether to use BitmapData from the cache(Default: true)
	 * @return		A new BItmapData object</haxe_doc>
		</getBitmapData>
		<getBytes public="1" set="method" line="180" static="1">
			<f a="id">
				<c path="String"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded binary asset
	 * @usage		var bytes = Assets.getBytes("file.zip");
	 * @param	id		The ID or asset path for the file
	 * @return		A new ByteArray object</haxe_doc>
		</getBytes>
		<getFont public="1" set="method" line="237" static="1">
			<f a="id">
				<c path="String"/>
				<c path="flash.text.Font"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded font
	 * @usage		var fontName = Assets.getFont("font.ttf").fontName;
	 * @param	id		The ID or asset path for the font
	 * @return		A new Font object</haxe_doc>
		</getFont>
		<getSound public="1" set="method" line="330" static="1">
			<f a="id">
				<c path="String"/>
				<c path="flash.media.Sound"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded sound
	 * @usage		var sound = Assets.getSound("sound.wav");
	 * @param	id		The ID or asset path for the sound
	 * @return		A new Sound object</haxe_doc>
		</getSound>
		<getText public="1" set="method" line="407" static="1">
			<f a="id">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded text asset
	 * @usage		var text = Assets.getText("text.txt");
	 * @param	id		The ID or asset path for the file
	 * @return		A new String object</haxe_doc>
		</getText>
		<resolveClass set="method" line="457" static="1"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum set="method" line="466" static="1"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<get_id set="method" line="491" static="1"><f a=""><c path="Array"><c path="String"/></c></f></get_id>
		<get_library set="method" line="512" static="1"><f a=""><x path="Map">
	<c path="String"/>
	<e path="openfl.LibraryType"/>
</x></f></get_library>
		<get_path set="method" line="529" static="1"><f a=""><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></f></get_path>
		<get_type set="method" line="546" static="1"><f a=""><x path="Map">
	<c path="String"/>
	<e path="openfl.AssetType"/>
</x></f></get_type>
		<haxe_doc><![CDATA[* <p>The Assets class provides a cross-platform interface to access 
 * embedded images, fonts, sounds and other resource files.</p>
 * 
 * <p>The contents are populated automatically when an application
 * is compiled using the NME command-line tools, based on the
 * contents of the *.nmml project file.</p>
 * 
 * <p>For most platforms, the assets are included in the same directory
 * or package as the application, and the paths are handled
 * automatically. For web content, the assets are preloaded before
 * the start of the rest of the application. You can customize the 
 * preloader by extending the <code>NMEPreloader</code> class,
 * and specifying a custom preloader using <window preloader="" />
 * in the project file.</p>]]></haxe_doc>
	</class>
	<enum path="openfl.AssetType" params="" file="C:\tools\Haxe\haxe/lib\openfl/1,0,6/openfl/Assets.hx" module="openfl.Assets">
		<BINARY/>
		<FONT/>
		<IMAGE/>
		<MUSIC/>
		<SOUND/>
		<TEXT/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="openfl.LibraryType" params="" file="C:\tools\Haxe\haxe/lib\openfl/1,0,6/openfl/Assets.hx" module="openfl.Assets">
		<SWF/>
		<SWF_LITE/>
		<XFL/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="openfl.display.ManagedStage" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/openfl/display/ManagedStage.hx">
		<extends path="flash.display.Stage"/>
		<etUnknown public="1" get="inline" set="null" line="11" static="1"><x path="Int"/></etUnknown>
		<etKeyDown public="1" get="inline" set="null" line="12" static="1"><x path="Int"/></etKeyDown>
		<etChar public="1" get="inline" set="null" line="13" static="1"><x path="Int"/></etChar>
		<etKeyUp public="1" get="inline" set="null" line="14" static="1"><x path="Int"/></etKeyUp>
		<etMouseMove public="1" get="inline" set="null" line="15" static="1"><x path="Int"/></etMouseMove>
		<etMouseDown public="1" get="inline" set="null" line="16" static="1"><x path="Int"/></etMouseDown>
		<etMouseClick public="1" get="inline" set="null" line="17" static="1"><x path="Int"/></etMouseClick>
		<etMouseUp public="1" get="inline" set="null" line="18" static="1"><x path="Int"/></etMouseUp>
		<etResize public="1" get="inline" set="null" line="19" static="1"><x path="Int"/></etResize>
		<etPoll public="1" get="inline" set="null" line="20" static="1"><x path="Int"/></etPoll>
		<etQuit public="1" get="inline" set="null" line="21" static="1"><x path="Int"/></etQuit>
		<etFocus public="1" get="inline" set="null" line="22" static="1"><x path="Int"/></etFocus>
		<etShouldRotate public="1" get="inline" set="null" line="23" static="1"><x path="Int"/></etShouldRotate>
		<etDestroyHandler public="1" get="inline" set="null" line="24" static="1"><x path="Int"/></etDestroyHandler>
		<etRedraw public="1" get="inline" set="null" line="25" static="1"><x path="Int"/></etRedraw>
		<etTouchBegin public="1" get="inline" set="null" line="26" static="1"><x path="Int"/></etTouchBegin>
		<etTouchMove public="1" get="inline" set="null" line="27" static="1"><x path="Int"/></etTouchMove>
		<etTouchEnd public="1" get="inline" set="null" line="28" static="1"><x path="Int"/></etTouchEnd>
		<etTouchTap public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></etTouchTap>
		<etChange public="1" get="inline" set="null" line="30" static="1"><x path="Int"/></etChange>
		<efLeftDown public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></efLeftDown>
		<efShiftDown public="1" get="inline" set="null" line="32" static="1"><x path="Int"/></efShiftDown>
		<efCtrlDown public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></efCtrlDown>
		<efAltDown public="1" get="inline" set="null" line="34" static="1"><x path="Int"/></efAltDown>
		<efCommandDown public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></efCommandDown>
		<efMiddleDown public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></efMiddleDown>
		<efRightDown public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></efRightDown>
		<efLocationRight public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></efLocationRight>
		<efPrimaryTouch public="1" get="inline" set="null" line="39" static="1"><x path="Int"/></efPrimaryTouch>
		<nme_managed_stage_create line="119" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></nme_managed_stage_create>
		<nme_managed_stage_pump_event line="120" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_managed_stage_pump_event>
		<__render public="1" set="method" line="103" override="1">
			<f a="sendEnterFrame">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__render>
		<__doProcessStageEvent set="method" line="91" override="1">
			<f a="event">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__doProcessStageEvent>
		<setNextWake public="1" set="dynamic" line="84"><f a="delay">
	<x path="Float"/>
	<x path="Void"/>
</f></setNextWake>
		<sendQuit public="1" set="method" line="77"><f a=""><x path="Void"/></f></sendQuit>
		<resize public="1" set="method" line="70"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<pumpEvent public="1" set="method" line="63"><f a="event">
	<d/>
	<x path="Void"/>
</f></pumpEvent>
		<endRender public="1" set="dynamic" line="56"><f a=""><x path="Void"/></f></endRender>
		<beginRender public="1" set="dynamic" line="49"><f a=""><x path="Void"/></f></beginRender>
		<new public="1" set="method" line="42"><f a="width:height:?flags">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="openfl.display.Tilesheet" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/openfl/display/Tilesheet.hx">
		<TILE_SCALE public="1" get="inline" set="null" line="15" static="1"><x path="Int"/></TILE_SCALE>
		<TILE_ROTATION public="1" get="inline" set="null" line="16" static="1"><x path="Int"/></TILE_ROTATION>
		<TILE_RGB public="1" get="inline" set="null" line="17" static="1"><x path="Int"/></TILE_RGB>
		<TILE_ALPHA public="1" get="inline" set="null" line="18" static="1"><x path="Int"/></TILE_ALPHA>
		<TILE_TRANS_2x2 public="1" get="inline" set="null" line="19" static="1"><x path="Int"/></TILE_TRANS_2x2>
		<TILE_BLEND_NORMAL public="1" get="inline" set="null" line="20" static="1"><x path="Int"/></TILE_BLEND_NORMAL>
		<TILE_BLEND_ADD public="1" get="inline" set="null" line="21" static="1"><x path="Int"/></TILE_BLEND_ADD>
		<TILE_BLEND_MULTIPLY public="1" get="inline" set="null" line="22" static="1"><x path="Int"/></TILE_BLEND_MULTIPLY>
		<TILE_BLEND_SCREEN public="1" get="inline" set="null" line="23" static="1"><x path="Int"/></TILE_BLEND_SCREEN>
		<nme_tilesheet_create line="58" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_tilesheet_create>
		<nme_tilesheet_add_rect line="59" static="1"><f a="::">
	<d/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="Int"/>
</f></nme_tilesheet_add_rect>
		<drawTiles public="1" set="method" line="44"><f a="graphics:tileData:?smooth:?flags">
	<c path="flash.display.Graphics"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawTiles>
		<addTileRect public="1" set="method" line="37"><f a="rectangle:?centerPoint">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="Int"/>
</f></addTileRect>
		<__handle public="1">
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__handle>
		<__bitmap public="1">
			<c path="flash.display.BitmapData"/>
			<meta><m n=":noCompletion"/></meta>
		</__bitmap>
		<new public="1" set="method" line="29"><f a="image">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="openfl.events.JoystickEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/openfl/events/JoystickEvent.hx">
		<extends path="flash.events.Event"/>
		<AXIS_MOVE public="1" get="inline" set="null" line="10" static="1"><c path="String"/></AXIS_MOVE>
		<BALL_MOVE public="1" get="inline" set="null" line="11" static="1"><c path="String"/></BALL_MOVE>
		<BUTTON_DOWN public="1" get="inline" set="null" line="12" static="1"><c path="String"/></BUTTON_DOWN>
		<BUTTON_UP public="1" get="inline" set="null" line="13" static="1"><c path="String"/></BUTTON_UP>
		<HAT_MOVE public="1" get="inline" set="null" line="14" static="1"><c path="String"/></HAT_MOVE>
		<toString public="1" set="method" line="45" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="38" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<z public="1"><x path="Float"/></z>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<id public="1"><x path="Int"/></id>
		<device public="1"><x path="Int"/></device>
		<axis public="1"><c path="Array"><x path="Float"/></c></axis>
		<new public="1" set="method" line="23"><f a="type:?bubbles:?cancelable:?device:?id:?x:?y:?z">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="openfl.events.SystemEvent" params="" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/openfl/events/SystemEvent.hx">
		<extends path="flash.events.Event"/>
		<SYSTEM public="1" line="10" static="1"><c path="String"/></SYSTEM>
		<toString public="1" set="method" line="30" override="1"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method" line="23" override="1"><f a=""><c path="flash.events.Event"/></f></clone>
		<data public="1" set="null"><x path="Int"/></data>
		<new public="1" set="method" line="15"><f a="type:?bubbles:?cancelable:?data">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="openfl.utils.WeakRef" params="T" file="C:\tools\Haxe\haxe/lib\openfl-native/1,0,8/openfl/utils/WeakRef.hx">
		<nme_weak_ref_create line="77" static="1"><d/></nme_weak_ref_create>
		<nme_weak_ref_get line="78" static="1"><d/></nme_weak_ref_get>
		<toString public="1" set="method" line="57"><f a=""><c path="String"/></f></toString>
		<get public="1" set="method" line="31"><f a=""><c path="openfl.utils.WeakRef.T"/></f></get>
		<weakRef><x path="Int"/></weakRef>
		<hardRef><c path="openfl.utils.WeakRef.T"/></hardRef>
		<new public="1" set="method" line="14"><f a="object:?makeWeak">
	<c path="openfl.utils.WeakRef.T"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="sys.FileStat" params="" file="C:\Tools\Haxe\haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>the user id for the file</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>the size of the file</haxe_doc>
			</size>
			<rdev><x path="Int"/></rdev>
			<nlink><x path="Int"/></nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>the last modification time for the file</haxe_doc>
			</mtime>
			<mode><x path="Int"/></mode>
			<ino><x path="Int"/></ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>the user group id for the file</haxe_doc>
			</gid>
			<dev><x path="Int"/></dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>the creation time for the file</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>the last access time for the file (when enabled by the file system)</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File informations, as given by [sys.FileSystem.stat]</haxe_doc>
	</typedef>
	<enum path="sys._FileSystem.FileKind" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/sys/FileSystem.hx" private="1" module="sys.FileSystem">
		<kdir/>
		<kfile/>
		<kother a="k"><c path="String"/></kother>
	</enum>
	<class path="sys.FileSystem" params="" file="C:\Tools\Haxe\haxe/std/cpp/_std/sys/FileSystem.hx">
		<kind set="method" line="56" static="1"><f a="path">
	<c path="String"/>
	<e path="sys._FileSystem.FileKind"/>
</f></kind>
		<isDirectory public="1" set="method" line="65" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the file or directory specified by `path` is a directory.
		
		If `path` is not a valid file system entry or if its destination is no
		accessible, an exception is thrown.
		
		If `path` is null, the result is unspecified.</haxe_doc>
		</isDirectory>
		<readDirectory public="1" set="method" line="89" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directory in the directory specified
		by `path`.
		
		If `path` does not denote a valid directory, an exception is thrown.
		
		If `path` is null, the result is unspecified.</haxe_doc>
		</readDirectory>
		<sys_file_type line="97" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></sys_file_type>
		<sys_read_dir line="100" static="1"><f a="">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></sys_read_dir>
		<haxe_doc>This class allows you to get information about the files and directories.
	
	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.db.Connection" params="" file="C:\Tools\Haxe\haxe/std/sys/db/Connection.hx" interface="1">
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<request public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></request>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.db.Mysql" params="" file="C:\Tools\Haxe\haxe/std/sys/db/Mysql.hx">
		<connect public="1" set="method" line="26" static="1"><f a="params">
	<a>
		<user><c path="String"/></user>
		<socket>
			<t path="Null"><c path="String"/></t>
			<meta><m n=":optional"/></meta>
		</socket>
		<port>
			<t path="Null"><x path="Int"/></t>
			<meta><m n=":optional"/></meta>
		</port>
		<pass><c path="String"/></pass>
		<host><c path="String"/></host>
		<database><c path="String"/></database>
	</a>
	<c path="sys.db.Connection"/>
</f></connect>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.db.ResultSet" params="" file="C:\Tools\Haxe\haxe/std/sys/db/ResultSet.hx" interface="1">
		<next public="1" set="method"><f a=""><d/></f></next>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<meta><m n=":keep"/></meta>
	</class>
</haxe>